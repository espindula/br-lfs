<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-multiarch-wrapper" role="wrap">
  <?dbhtml filename="multiarch_wrapper.html"?>

  <title>Création d'un programme enveloppe multi-architecture ( « Multiarch Wrapper »)</title>

  <indexterm zone="ch-system-multiarch-wrapper">
    <primary sortas="a-Multiarch Wrapper">Multiarch Wrapper</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Le programme envoloppe multi-architecture, ou « Multiarch Wrapper », sert à
    envelopper certains binaires contenant en dur les chemins vers leurs bibliothèques ou bien qui 
    sont spécifiques à certaines architectures..</para>

  </sect2>

  <sect2 role="installation">
    <title>Installation de The Multiarch Wrapper</title>

    <para os="a">Créez le fichier source&nbsp;:</para>

<screen os="b"><userinput>cat &gt; multiarch_wrapper.c &lt;&lt; "EOF"
#define _GNU_SOURCE

#include &lt;errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;unistd.h&gt;

#ifndef DEF_SUFFIX
#  define DEF_SUFFIX "64"
#endif

int main(int argc, char **argv)
{
  char *filename;
  char *suffix;

  if(!(suffix = getenv("USE_ARCH")))
    if(!(suffix = getenv("BUILDENV")))
      suffix = DEF_SUFFIX;

  if (asprintf(&amp;filename, "%s-%s", argv[0], suffix) &lt; 0) {
    perror(argv[0]);
    return -1;
  }

  int status = EXIT_FAILURE;
  pid_t pid = fork();

  if (pid == 0) {
    execvp(filename, argv);
    perror(filename);
  } else if (pid &lt; 0) {
    perror(argv[0]);
  } else {
    if (waitpid(pid, &amp;status, 0) != pid) {
      status = EXIT_FAILURE;
      perror(argv[0]);
    } else {
      status = WEXITSTATUS(status);
    }
  }
  free(filename);

  return status;
}

EOF</userinput></screen>

    <para os="c">Compilez et installez le «&nbsp;Multiarch Wrapper&nbsp;»&nbsp;:</para>

<screen os="d"><userinput>gcc ${BUILD64} multiarch_wrapper.c -o /usr/bin/multiarch_wrapper</userinput></screen>

    <para os="e">Ce programme sera utilisé plus tard dans le livre avec Perl. 
    Il sera également très utile hors du système CLFS de base.</para>

    <para os="f">Faisons un test&nbsp;:</para>

<screen os="g"><userinput>echo 'echo "Version 32 bits"' &gt; test-32
echo 'echo "Version 64 bits"' &gt; test-64
chmod -v 755 test-32 test-64
ln -sv /usr/bin/multiarch_wrapper test</userinput></screen>

    <para os="h">Testons le programme enveloppe&nbsp;:</para>

<screen os="i"><userinput>USE_ARCH=32 ./test
USE_ARCH=64 ./test</userinput></screen>

    <para os="j">Le résultat de ces commandes devrait être alors&nbsp;:</para>

<screen os="k" role="nodump"><userinput>32bit Version
64bit Version</userinput></screen>

    <para os="l">Supprimez les sources, les binaires et le lien testcase&nbsp;:</para>

<screen os="m"><userinput>rm -v multiarch_wrapper.c test{,-32,-64}</userinput></screen>

  </sect2>

  <sect2 id="contents-multiarch-wrapper" role="content">
    <title>Contenu du Multiarch Wrapper</title>

    <segmentedlist>
      <segtitle>programmes installés</segtitle>

      <seglistitem>
        <seg>multiarch_wrapper</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="multiarch_wrapper">
        <term><command>multiarch_wrapper</command></term>
        <listitem>
          <para>Exécute un programme différent en se basant sur la variable 
          <envar>USE_ARCH</envar>. Cette variable <envar>USE_ARCH</envar> 
          sera alors le suffixe du programme exécuté.</para>
          <indexterm zone="ch-system-multiarch-wrapper multiarch_wrapper">
            <primary sortas="b-multiarch_wrapper">multiarch_wrapper</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
