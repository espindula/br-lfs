<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="pre-foreword">
  <?dbhtml filename="foreword.html"?>

  <title>Avant-propos</title>

  <para>Le projet Linux From Scratch a connu de nombreux changements ces dernières années. J'ai personnellement été impliqué 
  dans le projet en 1999, période des versions 2.x. A cette époque, la procédure de construction consistait en la création de 
  binaires statiques avec le système hôte, puis se chrooter et construire les binaires finaux sur la base de ceux 
  statiques.</para>

  <para>Plus tard on a commencé à utiliser le répertoire /static qui contenait les constructions statiques initiales, les 
  séparant du système final, puis la procédure PureLFS développée par Ryan Oliver et Greg Schafer, introduisant une nouvelle 
  procédure de construction de l'ensemble d'outils qui sépare même nos constructions
  initiales de l'hôte. Enfin, LFS 6 a adopté le noyau 
  Linux 2.6, la structure des périphériques dynamiques Udev, nettoyé les en-têtes du noyau et d'autres améliorations pour le 
  système Linux From Scratch.</para>

  <para>Le seul "défaut" dans LFS est qu'il a toujours été fondé sur un processeur de classe x86. Avec l'arrivée des 
  processeurs Athlon 64 et Intel EM64T, la LFS constructible uniquement en x86 n'est plus idéale. Pendant ce temps, Ryan 
  Oliver a développé et documenté une procédure par laquelle vous pourriez construire Linux pour 
  n'importe quel système et à partir de n'importe quel système, en utilisant les techniques de la 
  compilation croisée. Ainsi, le <foreignphrase>Cross-
  Compiled LFS</foreignphrase> (CLFS ou LFS croisé) est né.</para>

  <para>CLFS suit les mêmes principes directeurs que le projet LFS a toujours suivis, comme celui selon lequel vous connaissez votre système à l'intérieur et à l'extérieur grâce au fait que vous 
  ayez compilé votre système vous-même. En 
  plus, pendant une construction CLFS, vous apprendrez des techniques avancées comme la construction croisée d'ensembles 
  d'outils, le support multilib (bibliothèques 32 &amp; 64 bit séparées), des architectures alternatives telles que Sparc, 
  MIPS et Alpha et beaucoup plus.</para>

  <para>Nous espérons que vous apprécierez la construction de votre propre système CLFS et les
  avantages résultant d'un système sur mesure selon vos besoins.</para>

<literallayout>--
Jeremy Utley, gestionnaire de la version 1.x de CLFS (auteur de la Page)
Jim Gifford, Co-leader du projet CLFS
Ryan Oliver, Co-leader du projet CLFS
Joe Ciccone, Justin Knierim, Chris Staub, Matt Darcy, Ken Moffat,
Manuel Canales Esparcia et Nathan Coulson - Dévelopeurs CLFS</literallayout>

</sect1>
