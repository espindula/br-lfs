<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="ch-boot-building-a-bootloader" role="wrap">
  <?dbhtml filename="building-a-bootloader.html"?>

  <title>Construire un chargeurde démarrage</title>

    <para>Sur des architectures x86 et x86_64 (multilib), on préfère le chargeur de démarrage GRUB. Malheureusement, GRUB ne 
    fonctionne pas sur x86_64 Pure64 - on peut construire correctement les  fichiers stage2 en tant que 32 bit, mais le shell
      <command>grub</command> est  un programme 64 bits et il essaie d'exécuter certaines routines de stage2 - ceci aboutit à 
      une erreur de segmentation. Donc, dans le système final, nous utilisons Lilo comme chargeur de démarrage.</para>

    <para>Si vous avez déjà un chargeur de démarrage comme GRUB installé sur le système,  vous devriez l'utiliser pour rendre
    votre nouveau noyau amorçable.</para>

  <note>
    <para>Nous allons maintenant compiler de manière croisée Bin86 et Lilo - ces instructions supposent que vous utilisez une 
    machine x86_64 (démarrée par exemple à partir d'un LiveCD) ou pure 64 ou multilib. Cette approche ne fonctionnera pas si 
    vous exécutez la machine comme i686 car un noyau 32 bits ne sera pas en mesure d'exécuter un binaire 64 bits pour installer 
    le  chargeur de démarrage. Si tel est le cas, vous devrez installer un chargeur de démarrage i686 sur le système hôte.</para>
  </note>

</sect1>
