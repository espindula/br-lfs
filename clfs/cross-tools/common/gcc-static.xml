<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="ch-cross-tools-gcc-static" role="wrap">
  <?dbhtml filename="gcc-static.html"?>

  <title>GCC-&gcc-version; croisé - Statique</title>

  <indexterm zone="ch-cross-tools-gcc-static">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>outils croisés, statique</secondary>
  </indexterm>

  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
  href="../../final-system/common/gcc.xml"
  xpointer="xpointer(//*[@role='package'])"/>

  <sect2 role="installation">
    <title>Installation du compilateur GCC croisé avec libgcc statique et sans Threads</title>

    <para os="e">ici nous compilerons GCC, comme un compilateur croisé qui pourra créer
    des exécutables pour notre architecture cible, statiquement pour qu'il n'ai pas besoin de regarder
    dans les Startfiles de Glibc, qui n'existe pas encore dans 
    <filename class="directory">/tools</filename>. Nous utiliserons ce compilateur croisé, plus l'éditeur
    de liens croisé que nous venons juste d'installer avec binutils, pour compiler glibc. Après que 
    glibc soit installé dans 
    <filename class="directory">/tools</filename>, nous pourrons reconstruire GCC pour qu'il 
    soit capable de construire des exécutables qui se lient contre les bibliothèques dans
    <filename class="directory">/tools</filename>.</para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../../final-system/common/gcc.xml"
    xpointer="xpointer(//*[@os='p1'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../../final-system/common/gcc.xml"
    xpointer="xpointer(//*[@os='p2'])"/>

    <para os="aa">Faites deux ajustements essentiels pour le fichier specs
    de GCC pour vous assurer que GCC utilise notre environnement de construction&nbsp;:</para>

<screen os="ab"><userinput>patch -Np1 -i ../&gcc-specs-patch;</userinput></screen>

    <para os="ag">Modifiez la spec StartFile afin que GCC regarde dans
    <filename class="directory">/tools</filename>&nbsp;:</para>

<screen os="ah"><userinput>echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"\n' &gt;&gt; gcc/config/linux.h
echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' &gt;&gt; gcc/config/linux.h</userinput></screen>

    <para os="t1">Nous allons créer un faux limits.h pour que la construction n'utilise pas celui fourni par la distrib 
    hôte&nbsp;:</para>

<screen os="t2"><userinput>touch /tools/include/limits.h</userinput></screen>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../../final-system/common/gcc.xml"
    xpointer="xpointer(//*[@os='f'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../../final-system/common/gcc.xml"
    xpointer="xpointer(//*[@os='g'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../../final-system/common/gcc.xml"
    xpointer="xpointer(//*[@os='h'])"/>

<screen os="al"><userinput>AR=ar LDFLAGS="-Wl,-rpath,/cross-tools/lib" \
    ../gcc-&gcc-version;/configure --prefix=/cross-tools \
    --build=${CLFS_HOST} --host=${CLFS_HOST} --target=${CLFS_TARGET} \
    --with-sysroot=${CLFS} --with-local-prefix=/tools \
    --with-native-system-header-dir=/tools/include --disable-nls \
    --disable-shared --with-mpfr=/cross-tools --with-gmp=/cross-tools \
    --with-isl=/cross-tools --with-cloog=/cross-tools --with-mpc=/cross-tools \
    --without-headers --with-newlib --disable-decimal-float --disable-libgomp \
    --disable-libmudflap --disable-libssp --disable-libatomic --disable-libitm \
    --disable-libsanitizer --disable-libquadmath --disable-threads \
    --disable-multilib --disable-target-zlib --with-system-zlib \
    --enable-languages=c --enable-checking=release</userinput></screen>

    <variablelist os="am">
      <title>Voici la signification des nouvelles options de configure&nbsp;:</title>

      <varlistentry>
        <term><parameter>--build=${CLFS_HOST}</parameter></term>
        <listitem>
          <para>cela spécifie le système pour lequel le compilateur croisé sera construit.</para>
        </listitem>
      </varlistentry>

     <varlistentry>
        <term><parameter>--with-local-prefix=/tools</parameter></term>
        <listitem>
          <para>Le but de ce paramètre est de supprimer 
          <filename class="directory">/usr/local/include</filename> du chemin de recherche include de
          <command>gcc</command>. Ce n'est pas absolument essentiel, néanmoins 
          cela aide à minimiser l'influence du système hôte.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-native-system-headers-dir=/tools/include</parameter></term>
        <listitem>
          <para>Cette option garantit que GCC cherchera les en-têtes du système
          dans <filename class="directory">/tools/include</filename> et que les
          en-têtes du système hôte ne seront pas recherchées.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>Cela dit à GCC de ne pas créer de bibliothèques partagé.</para>
        </listitem>
      </varlistentry>

       <varlistentry>
        <term><parameter>--without-headers</parameter></term>
        <listitem>
          <para>Désactive l'utilisation par GCC de la Libc de la cible lors
          de la compilation croisée.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-newlib</parameter></term>
        <listitem>
          <para>Ceci amène GCC à activer le drapeau <envar>inhibit_libc</envar>,
          qui empêche <filename class="libraryfile">libgcc</filename> de
          construire du code utilisant le support libc.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-decimal-float</parameter></term>
        <listitem>
          <para>Désactive le support de l'extension des points flottants décimaux 
          en C.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-lib*</parameter></term>
        <listitem>
          <para>Ces options empêchent GCC de construire un certain nombre de
          bibliothèques inutiles pour l'instant.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-libssp</parameter></term>
        <listitem>
          <para>Désactive l'utilisation de <foreignphrase>Stack Smashing 
          Protection</foreignphrase> (protection du smashing de la pile) pour
          les bibliothèques utilisées au moment d'une exécution.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-threads</parameter></term>
        <listitem>
          <para>Cela empêchera GCC de chercher les fichiers include multi-thread, vu qu'ils n'ont pas encore été créés pour cette 
          architecture. GCC sera capable de trouver les informations multi-thread après que les en-têtes Glibc ont été créés.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-target-zlib</parameter></term>
        <listitem>
         <para>Ceci dit à GCC de ne pas construire la copie de Zlib de
         l'arborescence de ses sources.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-system-zlib</parameter></term>
        <listitem>
          <para>Ceci dit à GCC de se lier au zlib installé sur le szstème au
          lieu de celle dans l'arborescence de ses sources.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c</parameter></term>
        <listitem>
          <para>Cette option nous assure que seul le compilateur C sera construit.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-checking=release</parameter></term>
        <listitem>
          <para>Cette option sélectionne la complexité des tests de cohérence interne
          et ajoute le contrôle des erreurs dans le compilateur.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para os="an">Poursuivez en compilant le paquet&nbsp;:</para>

<screen os="ao"><userinput>make all-gcc all-target-libgcc</userinput></screen>

    <variablelist os="ap">
      <title>Voici la signification des nouvelles options de make&nbsp;:</title>

      <varlistentry>
        <term><parameter>all-gcc all-target-libgcc</parameter></term>
        <listitem>
          <para>Ne ompile que les partie de GCC nécessaires pour l'instant, et
          non tout le paquet.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para os="aq">Installez le paquet&nbsp;:</para>

<screen os="ar"><userinput>make install-gcc install-target-libgcc</userinput></screen>
  </sect2>

  <sect2 role="content">
    <title/>

    <para>Les détails sur ce paquet sont disponibles dans <xref
    linkend="contents-gcc" role="."/></para>

  </sect2>

</sect1>
