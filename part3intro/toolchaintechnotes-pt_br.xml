<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-toolchaintechnotes" xreflabel="Toolchain Technical Notes">
  <?dbhtml filename="toolchaintechnotes-pt_br.html"?>

<!--

Direitos autorais (Copyright): (c) 2022 Jamenson Ferreira Espindula de Almeida Melo (<jafesp@gmail.com>).

Direitos autorais da versão modificada traduzida para a língua 
portuguesa escrita e falada no Brasil: (c) 2022 Jamenson Ferreira 
Espindula de Almeida Melo (<jafesp@gmail.com>).

  Este trabalho de tradução do livro "Linux From Scratch" é classificado
  pela Free Software Foundation como sendo uma "versão modificada" do
  mencionado livro.  Em assim sendo, na qualidade de tradutor, produtor
  da "versão modificada" e titular dos direitos autorais sobre a versão
  traduzida para a língua portuguesa do livro "Linux From Scratch",
  concede-se a seguinte permissão:

  É concedida permissão para copiar, distribuir e (ou) modificar este
  livro "Linux From Scratch", versão traduzida para a língua portuguesa,
  sob os termos da Licença de Documentação Livre GNU, versão 1.3 ou
  qualquer versão posterior publicada pela Free Software Foundation; sem
  Seções Invariantes, sem Textos de Capa Frontal e sem Textos de Quarta
  Capa.  Uma cópia da licença está incluída na seção intitulada "Licença
  de Documentação Livre GNU".

# Atenção: todos os documentos aqui publicados são distribuídos sem qualquer garantia, implícita e (ou) explícita.

  Permission is granted to copy, distribute and (or) modify this book
  "Linux From Scratch", translated into Brazilian Portuguese, under the
  terms of the GNU Free Documentation License, Version 1.3 or any later
  version published by the Free Software Foundation; with no Invariant
  Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
  the license is included in the section entitled "GNU Free
  Documentation License".

# Warning: all the files herein published are released with no warranty, implicit and (or) explicit.
-->

  <title>Notas Técnicas do Conjunto de Ferramentas</title>

  <para>Esta seção explana algumas das razões e detalhes técnicos por 
  trás do método completo de construção. Não é essencial entender 
  imediatamente tudo nesta seção. A maior parte desta informação 
  ficará mais clara após executar uma construção atual. Esta 
  seção pode e deve ser consultada a qualquer momento durante o 
  processo.</para>

  <para>O objetivo geral do <xref linkend="chapter-cross-tools"/> e do 
  <xref linkend="chapter-temporary-tools"/> é o de produzir uma área 
  temporária que contém um conjunto reconhecidamente bom de 
  ferramentas que pode ser isolado do sistema anfitrião. 
  Usando-se <command>chroot</command>, os comandos nos capítulos 
  subsequentes estarão confinados naquele ambiente, assegurando 
  uma construção limpa e livre de problemas do sistema LFS alvo. 
  O processo de construção foi desenhado para minimizar os riscos 
  para leitores novatos e para prover o maior valor educacional 
  ao mesmo tempo.</para>

  <para>O processo de construção é baseado no processo de 
  <emphasis>compilação cruzada</emphasis>. A compilação cruzada 
  normalmente é usada para construir um compilador e o conjunto de 
  ferramentas dele para uma máquina diferente daquela que é usada 
  para a construção. Isso não é estritamente necessário para LFS, 
  dado que a máquina onde o novo sistema executará é a mesma 
  usada para a construção. Porém, a compilação cruzada tem a 
  grande vantagem de que tudo o que é compilado cruzadamente não 
  pode depender do ambiente do anfitrião.</para>

  <sect2 id="cross-compile" xreflabel="About Cross-Compilation">

    <title>Acerca da Compilação Cruzada</title>

    <note>
      <para>
        O livro LFS não é, e não contém, um tutorial geral para 
        construir um conjunto de ferramentas cruzado (ou nativo). Não 
        use os comandos no livro para um conjunto de ferramentas cruzado 
        o qual será usado para algum outro propósito que não construir 
        LFS, a menos que você realmente entenda o que está fazendo.
      </para>
    </note>

    <para>Compilação cruzada envolve alguns conceitos que merecem 
    uma seção por si próprios. Apesar que esta seção pode ser 
    omitida em uma primeira leitura, retornar até ela mais tarde 
    será benéfico para o seu completo entendimento do processo.</para>

    <para>Permita-nos primeiro definir alguns termos usados nesse 
    contexto</para>

    <variablelist>
      <varlistentry><term>build</term><listitem>
        <para>é a máquina onde nós construímos aplicativos. Note que 
        essa máquina é referenciada como sendo a <quote>anfitriã</quote> em outras 
        seções.</para></listitem>

      </varlistentry>

      <varlistentry><term>host</term><listitem>
        <para>é a máquina/sistema onde os aplicativos construídos 
        executarão. Note que esse uso de <quote>host</quote> não 
        é o mesmo que o uso em outras seções.</para></listitem>
      </varlistentry>

      <varlistentry><term>target</term><listitem>
        <para>é usado apenas para compiladores. Ele é a máquina para a 
        qual o compilador produz código. Ele pode ser diferente de 
        ambos build e host.</para></listitem>
      </varlistentry>

    </variablelist>

   <para>Como um exemplo, permita-nos imaginar o seguinte cenário 
   (as vezes rotulado de <quote>Cruzado Canadense</quote>): nós 
   podemos ter um compilador somente em uma máquina lenta, vamos 
   rotulá-la de <quote>máquina A</quote>, e o compilador de 
   <quote>ccA</quote>. Nós também podemos ter uma máquina rápida (B), 
   porém sem compilador, e nós eventualmente desejamos produzir código 
   para outra máquina lenta (C). Para construir um compilador para a 
   máquina <quote>C</quote>, nós teríamos três estágios:</para>

    <informaltable align="center">
      <tgroup cols="5">
        <colspec colnum="1" align="center"/>
        <colspec colnum="2" align="center"/>
        <colspec colnum="3" align="center"/>
        <colspec colnum="4" align="center"/>
        <colspec colnum="5" align="left"/>
        <thead>
          <row><entry>Estágio</entry><entry>Build</entry><entry>Host</entry>
               <entry>Target</entry><entry>Ação</entry></row>
        </thead>
        <tbody>
          <row>
            <entry>1</entry><entry>A</entry><entry>A</entry><entry>B</entry>
            <entry>construir compilador cruzado cc1 usando ccA na 
            máquina A</entry>
          </row>
          <row>
            <entry>2</entry><entry>A</entry><entry>B</entry><entry>C</entry>
            <entry>construir compilador cruzado cc2 usando cc1 na 
            máquina A</entry>
          </row>
          <row>
            <entry>3</entry><entry>B</entry><entry>C</entry><entry>C</entry>
            <entry>construir compilador ccC usando cc2 na máquina B</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Então, todos os outros programas necessários para a 
    máquina C podem ser compilados usando cc2 na rápida máquina 
    B. Note que a menos que B possa executar aplicativos 
    produzidos por C, não existe maneira de testar os aplicativos 
    construídos até que a própria máquina C esteja em execução. 
    Por exemplo, para testar ccC, nós eventualmente desejamos 
    adicionar um quarto estágio:</para>

    <informaltable align="center">
      <tgroup cols="5">
        <colspec colnum="1" align="center"/>
        <colspec colnum="2" align="center"/>
        <colspec colnum="3" align="center"/>
        <colspec colnum="4" align="center"/>
        <colspec colnum="5" align="left"/>
        <thead>
          <row><entry>Estágio</entry><entry>Build</entry><entry>Host</entry>
               <entry>Target</entry><entry>Ação</entry></row>
        </thead>
        <tbody>
          <row>
            <entry>4</entry><entry>C</entry><entry>C</entry><entry>C</entry>
            <entry>reconstruir e testar ccC usando o próprio na 
            máquina C</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>No exemplo acima, somente cc1 e cc2 são compiladores 
    cruzados, isto é, eles produzem código para uma máquina 
    diferente daquela na qual estão sendo executados. Tais 
    compiladores são rotulados de compiladores 
    <emphasis>nativos</emphasis>.</para>

  </sect2>

  <sect2 id="lfs-cross">
    <title>Implementação de Compilação Cruzada para LFS</title>

    <note>
      <para>Quase todos os sistemas de construção usam nomes da 
      forma cpu-vendor-kernel-os rotulados como o trio de 
      máquina. Um leitor atento eventualmente questionará porque 
      um <quote>trio</quote> rotula um nome de quatro 
      componentes. A razão é histórica: inicialmente, três nomes 
      de componente eram suficientes para designar uma máquina 
      inequivocamente, porém com novas máquinas e sistemas 
      aparecendo, isso se provou insuficiente. A palavra 
      <quote>trio</quote> subsistiu. Uma maneira simples de 
      determinar seu trio de máquina é executar o script 
      <command>config.guess</command> que vem com o fonte para 
      muitos pacotes. Desempacote os fontes do pacote 
      <quote>binutils</quote> e execute o script: 
      <userinput>./config.guess</userinput> e observe a saída. 
      Por exemplo, para um processador Intel de 32-bits, a saída 
      será <emphasis>i686-pc-linux-gnu</emphasis>. Em um sistema 
      de 64-bits, a saída será 
      <emphasis>x86_64-pc-linux-gnu</emphasis>.</para>

      <para>Esteja também ciente do nome do vinculador dinâmico 
      da plataforma, frequentemente rotulado de carregador 
      dinâmico (não confundir com o vinculador padrão 
      <command>ld</command> o qual é parte do pacote 
      <quote>binutils</quote>). O vinculador dinâmico provido por Glibc 
      encontra e carrega as bibliotecas compartilhadas necessárias para 
      um aplicativo, prepara o aplicativo para execução, e então o 
      executa. O nome do vinculador dinâmico para uma máquina Intel de 
      32-bits é <filename class="libraryfile">ld-linux.so.2</filename> 
      e é <filename class="libraryfile">ld-linux-x86-64.so.2</filename> 
      para sistemas 64-bits. Uma maneira infalível de determinar 
      o nome do vinculador dinâmico é inspecionar uma biblioteca 
      aleatória do sistema anfitrião executando: 
<userinput>readelf -l &lt;nome de binário&gt; | grep interpreter</userinput> e 
      observando a saída. A referência oficial cobrindo todas as 
      plataformas está no arquivo <filename>shlib-versions</filename> 
      na raiz da árvore do fonte do Glibc.</para>
    </note>

    <para> Para falsificar uma compilação cruzada em LFS, o nome 
    do trio do anfitrião é ligeiramente ajustado modificando-se 
    o campo &quot;vendor&quot; na variável 
    <envar>LFS_TGT</envar>. Nós também usamos a opção 
    <parameter>--with-sysroot</parameter> quando da construção do 
    vinculador dinâmico e do compilador cruzado para informá-los 
    onde encontrar os necessários arquivos do anfitrião. Isso 
    assegura que nenhum dos outros aplicativos construídos em <xref
    linkend="chapter-temporary-tools"/> pode se vincular a 
    bibliotecas na máquina de construção. Somente dois estágios 
    são obrigatórios, e mais um para testes:</para>

    <informaltable align="center">
      <tgroup cols="5">
        <colspec colnum="1" align="center"/>
        <colspec colnum="2" align="center"/>
        <colspec colnum="3" align="center"/>
        <colspec colnum="4" align="center"/>
        <colspec colnum="5" align="left"/>
        <thead>
          <row><entry>Estágio</entry><entry>Build</entry><entry>Host</entry>
               <entry>Target</entry><entry>Ação</entry></row>
        </thead>
        <tbody>
          <row>
            <entry>1</entry><entry>pc</entry><entry>pc</entry><entry>lfs</entry>
            <entry>construir compilador cruzado cc1 usando cc-pc em 
            pc</entry>
          </row>
          <row>
            <entry>2</entry><entry>pc</entry><entry>lfs</entry><entry>lfs</entry>
            <entry>construir compilador cc-lfs usando cc1 em pc</entry>
          </row>
          <row>
            <entry>3</entry><entry>lfs</entry><entry>lfs</entry><entry>lfs</entry>
            <entry>reconstruir e testar cc-lfs usando o próprio em 
            lfs</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Na tabela acima, <quote>em pc</quote> significa que os 
    comandos são executados em uma máquina usando a distribuição 
    já instalada. <quote>Em lfs</quote> significa que os comandos 
    são executados dentro de um ambiente enjaulado.</para>

    <para>Agora, existe mais acerca de compilação cruzada: a 
    linguagem C não é apenas um compilador, mas também define uma 
    biblioteca padrão. Neste livro, a biblioteca GNU C, rotulada 
    de <quote>glibc</quote>, é usada. Essa biblioteca deve ser compilada 
    para a máquina lfs, isto é, usando o compilador cruzado cc1. Porém, 
    o próprio compilador usa uma biblioteca interna implementando 
    complexas instruções não disponíveis no conjunto de instruções do 
    montador. Essa biblioteca interna é rotulada de 
    <quote>libgcc</quote>, e deve ser vinculada à biblioteca 
    <quote>glibc</quote> para ser completamente funcional! Além 
    disso, a biblioteca padrão para C++ (libstdc++) também 
    precisa estar vinculada à <quote>glibc</quote>. A solução 
    para esse problema de ovo e galinha é primeiro construir uma 
    libgcc degradada baseada em cc1, faltando algumas 
    funcionalidades tais como camadas e manipulação de exceções, 
    então construir glibc usando esse compilador degradado (o próprio 
    glibc não degradado), então construir libstdc++. Porém, nessa última 
    biblioteca faltarão as mesmas funcionalidades que libgcc.</para>

    <para>Esse não é o fim da história: a conclusão do parágrafo 
    precedente é a de que cc1 é incapaz de construir uma libstdc++ 
    completamente funcional, porém esse é o único compilador 
    disponível para construir as bibliotecas C/C++ durante o 
    estágio 2! Certamente, o compilador construído durante o 
    estágio 2, cc-lfs, seria capaz de construir aquelas 
    bibliotecas, porém (1) o sistema de construção do GCC não 
    sabe que está utilizável em pc; e (2) usá-lo em pc estaria sob 
    o risco de vinculamento às bibliotecas de pc, dado que cc-lfs é 
    um compilador nativo. Assim, nós temos de construir libstdc++ 
    mais tarde, em jaula.</para>

  </sect2>

  <sect2 id="other-details">

    <title>Outros detalhes procedurais</title>

    <para>O compilador cruzado será instalado em um diretório <filename 
    class="directory">$LFS/tools</filename> separado, dado que 
    ele não será parte do sistema final.</para>

    <para>Binutils é instalado primeiro, pois a execução de 
    <command>configure</command> de ambos GCC e Glibc executa 
    vários testes de características no montador e no vinculador 
    para determinar quais características de software habilitar 
    ou desabilitar. Isso é mais importante do que, inicialmente, alguém 
    possa perceber. Um GCC ou Glibc configurado incorretamente 
    pode resultar em um conjunto de ferramentas sutilmente 
    quebrado, onde o impacto de tal quebra talvez não se 
    manifeste até próximo do final da construção de uma 
    distribuição inteira. Uma falha de teste de suíte normalmente 
    destacará tal erro antes que muito mais trabalho adicional 
    seja realizado.</para>

    <para>O Binutils instala o montador e o vinculador dele em 
    duas localizações, <filename 
    class="directory">$LFS/tools/bin</filename> e <filename
    class="directory">$LFS/tools/$LFS_TGT/bin</filename>. As 
    ferramentas em uma localização são rigidamente vinculadas à 
    outra. Uma faceta importante do vinculador é a ordem de 
    procura de biblioteca dele. Informações detalhadas podem ser 
    obtidas de <command>ld</command> passando a flag 
    <parameter>--verbose</parameter>. Por exemplo, <command>$LFS_TGT-ld 
    --verbose | grep SEARCH</command> exibirá os caminhos atuais 
    de procura e a ordem deles. Isso mostra quais arquivos estão 
    vinculados por <command>ld</command> pela compilação de um 
    aplicativo fictício e passagem do modificador 
    <parameter>--verbose</parameter> ao vinculador. Por exemplo, 
    <command>$LFS_TGT-gcc dummy.c -Wl,--verbose 2&gt;&amp;1 | grep 
    succeeded</command> exibirá todos os arquivos abertos com 
    sucesso durante o vinculamento.</para>

    <para>O próximo pacote instalado é o GCC. Um exemplo do que pode ser 
    visto durante a execução dele de <command>configure</command> 
    é:</para>

<screen><computeroutput>checking what assembler to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/as
checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput></screen>

    <para>Isso é importante pelas razões mencionadas acima. 
    Também demonstra que o script de configuração do GCC não 
    busca os diretórios do PATH para encontrar quais ferramentas 
    usar. Entretanto, durante a operação atual do próprio 
    <command>gcc</command>, os mesmos caminhos de busca não são 
    necessariamente usados. Para descobrir qual vinculador padrão 
    <command>gcc</command> usará, execute: <command>$LFS_TGT-gcc 
    -print-prog-name=ld</command>.</para>

    <para>Informação detalhada pode ser obtida de <command>gcc</command> 
    passando-se a opção de linha de comando <parameter>-v</parameter> 
    durante a compilação de um aplicativo fictício. Por exemplo, 
    <command>gcc -v dummy.c</command> exibirá informação 
    detalhada acerca do preprocessador, compilação e estágios da 
    montagem, incluindo os caminhos de busca incluídos do 
    <command>gcc</command> e a ordem deles.</para>

    <para>Os próximos instalados são os cabeçalhos sanitizados da 
    API do Linux. Eles permitem a interface da biblioteca C padrão 
    (Glibc) com características que o kernel Linux proverá.</para>

    <para>O próximo pacote instalado é Glibc. As considerações 
    mais importantes para a construção do Glibc são o compilador, 
    ferramentas binárias e os cabeçalhos do kernel. O compilador 
    geralmente não é um problema dado que Glibc sempre usará o 
    compilador relacionado ao parâmetro <parameter>--host</parameter> 
    passado ao script de configuração dele; por exemplo, em nosso 
    caso, o compilador será <command>$LFS_TGT-gcc</command>. As 
    ferramentas binárias e os cabeçalhos do kernel podem ser um 
    bocado mais complicados. Dessa maneira, nós não nos 
    arriscamos e usamos os modificadores de configuração 
    disponíveis para forçar as seleções corretas. Após a execução 
    de <command>configure</command>, verifique o conteúdo do 
    arquivo <filename>config.make</filename> no diretório <filename
    class="directory">build</filename> para todos os detalhes 
    importantes. Observe o uso de 
    <parameter>CC="$LFS_TGT-gcc"</parameter> (com 
    <envar>$LFS_TGT</envar> expandida) para controlar quais 
    ferramentas binárias são usadas e o uso das flags 
    <parameter>-nostdinc</parameter> e 
    <parameter>-isystem</parameter> para controlar o caminho de 
    busca incluído do compilador. Esses itens destacam um importante 
    aspecto do pacote Glibc&mdash;ele é muito autossuficiente em termos 
    de maquinário de construção e geralmente não confia em padrões de 
    conjuntos de ferramentas.</para>

    <para>Como dito acima, a biblioteca C++ padrão é compilada 
    depois, seguida em <xref linkend="chapter-temporary-tools"/> 
    por todos os aplicativos que necessitam deles próprios para 
    serem construídos. O passo de instalação de todos aqueles 
    pacotes usa os aplicativos instalados no sistema de arquivos 
    do LFS.</para>

    <para>Ao final do <xref linkend="chapter-temporary-tools"/> o 
    compilador nativo do LFS é instalado. Primeiro binutils-pass2 é 
    construído, com a mesma instalação <envar>DESTDIR</envar> como os 
    outros programas, então a segunda passagem de GCC é construída, 
    omitindo libstdc++ e outras bibliotecas não importantes. Devido a 
    algumas lógicas estranhas no script configure do GCC, 
    <envar>CC_FOR_TARGET</envar> termina como <command>cc</command> 
    quando o host for o mesmo que o target, porém for diferente do sistema 
    de construção. Essa é a razão pela qual 
    <parameter>CC_FOR_TARGET=$LFS_TGT-gcc</parameter> é colocado 
    explicitamente nas opções de configuração.</para>

    <para>Uma vez dentro do ambiente chroot no <xref 
    linkend="chapter-chroot-temporary-tools"/>, a primeira tarefa é 
    instalar libstdc++. Então instalações temporárias de programas 
    necessários para a operação apropriada do conjunto de ferramentas 
    são executadas. Deste ponto em diante, o conjunto central de 
    ferramentas está autocontido e auto-hospedado. No <xref 
    linkend="chapter-building-system"/>, as versões finais de todos os 
    pacotes necessários para um sistema completamente funcional são 
    construídos, testados e instalados.</para>

  </sect2>

</sect1>
