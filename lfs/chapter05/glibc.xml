<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  <sect1info condition="script">
    <productname>glibc</productname>
    <productnumber>&glibc-version;</productnumber>
    <address>&glibc-url;</address>
  </sect1info>

  <title>Glibc-&glibc-version;</title>

  <indexterm zone="ch-tools-glibc">
    <primary sortas="a-Glibc">Glibc</primary>
    <secondary>outils</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/glibc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&glibc-ch5-sbu;</seg>
        <seg>&glibc-ch5-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Installation de Glibc</title>

<!-- 
    <para>Tout d'abord, corrigez un problème de construction qui concerne les
    systèmes i386&nbsp;:</para>

<screen><userinput remap="pre">patch -Np1 -i ../&glibc-upstream-patch;</userinput></screen>
-->

    <para>Corrigez des problèmes identifiés en amont&nbsp;:</para>

<screen><userinput remap="pre">patch -Np1 -i ../&glibc-upstream-patch;</userinput></screen>

   <para>La documentation de Glibc recommande de construire Glibc dans un
    répertoire de construction dédié&nbsp;:</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>Ensuite, préparez la compilation de Glibc&nbsp;:</para>

<screen><userinput remap="configure">../configure                             \
      --prefix=/tools                    \
      --host=$LFS_TGT                    \
      --build=$(../scripts/config.guess) \
      --enable-kernel=&min-kernel;             \
      --with-headers=/tools/include      \
      libc_cv_forced_unwind=yes          \
      libc_cv_ctors_header=yes           \
      libc_cv_c_cleanup=yes</userinput></screen>

    <variablelist>
      <title>Voici la signification des options de configure&nbsp;:</title>

      <varlistentry>
        <term><parameter>--host=$LFS_TGT, --build=$(../scripts/config.guess)</parameter></term>
        <listitem>
          <para>L'effet combiné de ces commutateurs est que le système de
          construction de Glibc se configure pour se compiler de manière
          croisée en utilisant l'éditeur de liens croisé et le compilateur
          croisé dans <filename class="directory">/tools</filename>.</para>
        </listitem>
      </varlistentry>
<!--      <varlistentry>
        <term><parameter>- -disable-profile</parameter></term>
        <listitem>
          <para>Ceci construit les bibliothèques sans les informations de
          profilage. Enlevez cette option si le profilage sur les outils 
          temporaires est nécessaire.</para>
        </listitem>
      </varlistentry>
-->
      <varlistentry>
        <term><parameter>--enable-kernel=&min-kernel;</parameter></term>
        <listitem>
          <para>Ceci indique à Glibc de compiler la bibliothèque avec le support
          des noyaux Linux &min-kernel; et supérieurs. Les contournements pour les
          noyaux plus anciens ne sont pas activés.</para>
        </listitem>
      </varlistentry>

<!--      <varlistentry>
        <term><parameter>- -enable-obsolete-rpc</parameter></term>
        <listitem>
          <para>Ceci installe les en-têtes liées £ NIS et à RPC qui ne sont
          pas installées par défaut. Elles sont nécessaires pour construire GCC
          et plusieurs paquets BLFS.</para>
        </listitem>
      </varlistentry>
-->

      <varlistentry>
        <term><parameter>--with-headers=/tools/include</parameter></term>
        <listitem>
          <para>Ceci dit à Glibc de se compiler contre les en-têtes récemment
          installées dans le répertoire tools, afin qu'il connaisse exactement les
          fonctionnalités du noyau et puisse s'optimiser en conséquence.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>libc_cv_forced_unwind=yes</parameter></term>
        <listitem>
          <para>L'éditeur de liens installé lors de
          <xref linkend="ch-tools-binutils-pass1"/> était construit de façon croisée
          et, dans cet état, il ne peut pas être utilisé tant que Glibc n'a pas été
          installé. Cela signifie que le test de configure du support
          force-unwind échouera puisqu'il croit avoir à faire à un éditeur de liens
          opérationnel. La variable libc_cv_forced_unwind=yes est
          passée afin d'indiquer à <command>configure</command> que le
          support de force-unwind est disponible sans qu'il n'ait à lancer le test.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>libc_cv_c_cleanup=yes</parameter></term>
        <listitem>
          <para>De la même façon, nous passons libc_cv_c_cleanup=yes au script
          <command>configure</command> afin que le test soit sauté
          et que le support de gestion du nettoyage C soit configuré.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>libc_cv_ctors_header=yes</parameter></term>
        <listitem>
          <para>De la même façon, nous passons libc_cv_ctors_header=yes au script
          <command>configure</command> pour sauter le test et configurer le
          support du constructeur gcc.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Lors de cette étape, le message d'avertissement suivant peut
    apparaître&nbsp;:</para>

    <blockquote>
<screen><computeroutput>configure: WARNING:
*** These auxiliary programs are missing or
*** incompatible versions: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</computeroutput></screen>
    </blockquote>

    <para>Le programme <command>msgfmt</command>, manquant ou incompatible, ne
    pose généralement pas de problème. Ce programme <command>msgfmt</command>
    fait partie du paquet Gettext que la distribution hôte
    devrait fournir.</para>

    <note><para>Il a été signalé que ce paquet pouvait échouer quand il est construit avec un "make parallèle".
    Si cela arrive, relancer la commande make avec l'option "-j1".
    </para></note>


    <para>Compilez le paquet&nbsp;:</para>

<screen><userinput remap="make">make</userinput></screen>

<!--    <para>Ce paquet est fourni avec une suite de test, cependant vous ne pouvez
    pas l'exécuter à ce moment car nous n'avons pas encore de compilateur C++.</para>

    <note>
      <para>La suite de tests exige aussi que des données de locale soient installées afin de s'exécuter avec succès. Les 
      données de locale fournissent au système des informations sur la date, l'heure et les formats normaux acceptés et fournis 
      par les outils systèmes. Si les suites de tests ne sont pas exécutés dans ce chapitre
      (suivant ainsi notre recommandation), il y a peu d'intérêt à installer les
      locales maintenant. Les bonnes locales seront installées dans le chapitre
      suivant.
      Néanmoins, pour installer les locales Glibc, utilisez les instructions de
      la section <xref linkend="ch-system-glibc" role="."/></para>
    </note>
-->

    <para>Installez le paquet&nbsp;:</para>

<screen><userinput remap="install">make install</userinput></screen>
 
  <caution>
    <para>À ce moment, il est impératif de vous arrêter et de vous assurer que
    les fonctions de base (compilation et édition des liens) du nouvel ensemble
    d'outils fonctionnent comme prévu. Pour effectuer un test de propreté, lancez
    les commandes suivantes&nbsp;:</para>

<screen><userinput>echo 'int main(){}' &gt; dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>Si tout fonctionne correctement, il ne devrait pas y avoir d'erreurs et
    la sortie de la dernière commande sera de la forme&nbsp;:</para>

<screen><computeroutput>[Requesting program interpreter: /tools/lib/ld-linux.so.2]</computeroutput></screen>

    <para>Remarquez que pour les machines 64 bits, le nom de l'interpréteur sera
    <filename>/tools/lib64/ld-linux-x86-64.so.2</filename>.</para>

    <para>Si l'affichage diffère ou s'il n'y a aucun affichage, alors
    quelque chose ne se passe pas bien. Enquêtez et tracez vos étapes pour
    trouver où se cache le problème et comment le corriger. Ce problème doit
    être corrigé avant de continuer.</para>

    <para>Une fois que tout va bien, nettoyez les fichiers de test&nbsp;::</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

  </caution>

  <note><para>La construction de Binutils dans deux sections servira de
  test supplémentaire pour vérifier que l'ensemble d'outils a été construit correctement. Si
  Binutils échoue pour se construire, c'est une
  indication que quelque chose ne va pas dans les installations précédentes de 
  Binutils, GCC, ou Glibc.</para></note>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>Les détails sur ce paquet sont situés dans
    <xref linkend="contents-glibc" role="."/></para>

  </sect2>

</sect1>
