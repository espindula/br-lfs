<sect2><title>&nbsp;</title><para>&nbsp;</para></sect2>

<sect2>
<title>Réinstallation de GCC</title>

<para>Les outils nécessaires pour tester GCC et Binutils sont maintenant
installés (Expect, TCL et DejaGNU). Nous pouvons continuer sur la reconstruction
de GCC et Binutils, les lier avec la nouvelle Glibc et les tester correctement.
Un point à noter, néanmoins, est que les suites de tests dépendent grandement
sur les fonctionnalités supportés par votre distribution hôte. Plus simplement,
une distribution hôte qui ne gère pas correctement le système de fichiers devpts
fera échouer la plupart des tests.</para>

<para>Déballez les trois archives tar de GCC dans un seul et même répertoire.
Ils construiront un seul sous-répertoire <filename>gcc-&gcc-version;/</filename>
.</para>

<para>Tout d'abord, corrigez un problème et faites un ajustement essentiel:
</para>

<para><screen><userinput>patch -Np1 -i ../gcc-&gcc-version;-no_fixincludes-2.patch
patch -Np1 -i ../gcc-&gcc-specs-version;.patch</userinput></screen></para>

<para>Le premier correctif désactive le script "fixincludes" de GCC. Nous avions
mentionné ceci brièvement précédemment, mais une explication un peu plus
complète de la procédure fixincludes est apportée ici. Dans des circonstances
normales le script fixincludes de GCC scanne votre système pour les fichiers
d'entête devant être corrigés. Il pourrait trouver que les fichiers d'entête de
Glibc su votre système hôte ont besoin d'être corrigés, les corriger et les
placer dans le répertoire include privé du GCC. Puis, plus tard lors du
chapitre 6, après avoir installé la nouvelle Glibc, ce répertoire include
privé sera recherché avant le répertoire système include, ce qui aboutirait à
ce que GCC trouve les entêtes corrigés du système hôte, qui ne correspondraient
certainement pas à la version de Glibc utilisée dans le système LFS.</para>

<para>Le dernier correctif modifie l'emplacement par défaut de l'éditeur de
liens de GCC (ld).  Corriger maintenant plutôt qu'ajuster le fichier specs
après installation nous assure que notre nouvel éditeur de liens sera utilisé
lors de la contruction de GCC. Donc, tous les binaires finaux (et temporaires)
créés lors de la construction seront liés à la nouvelle Glibc.</para>

<para>Créez de nouveau un répertoire de construction séparé:</para>

<para><screen><userinput>mkdir ../gcc-build
cd ../gcc-build</userinput></screen></para>

<para>Avant de commencer la construction de GCC, rappelez-vous de déconfigurer
toute variable d'environnement qui surcharge les options d'optimisation par
défaut.</para>

<para>Maintenant, préparez la compilation de GCC:</para>

<para><screen><userinput>../gcc-&gcc-version;/configure --prefix=/tools \
&nbsp;&nbsp;&nbsp;&nbsp;--with-local-prefix=/tools \
&nbsp;&nbsp;&nbsp;&nbsp;--enable-clocale=gnu --enable-shared \
&nbsp;&nbsp;&nbsp;&nbsp;--enable-threads=posix --enable-__cxa_atexit \
&nbsp;&nbsp;&nbsp;&nbsp;--enable-languages=c,c++</userinput></screen></para>

<para>Compilez le package:</para>

<para><screen><userinput>make</userinput></screen></para>

<para>Il n'y a pas besoin d'utiliser la cible <userinput>bootstrap</userinput>
maintenant car le compilateur que nous utilisons pour compiler ce GCC a été
construit avec les mêmes sources exactement.</para>

<para>Testez ce qui en résulte:</para>

<para><screen><userinput>make -k check</userinput></screen></para>

<para>L'option <userinput>-k</userinput> est utilisé pour lancer la suite de
tests de façon complète et de ne pas s'arrêter au premier échec. La suite de
tests de GCC est très importante et il est pratiquement garanti qu'elle génèrera
quelques échecs. Pour obtenir un résumé des résultats de la suite de tests,
lancez ceci:</para>
 
<para><screen><userinput>../gcc-&gcc-version;/contrib/test_summary | less</userinput></screen></para>

<para>Vous pouvez comparé vos résultats à ceux postés sur la liste de diffusion
gcc-testresults pour les configurations similaires à la vôtre. Pour
un exemple de la version actuelle GCC-3.3.1 sur i686-pc-linux-gnu, voir
<ulink url="http://gcc.gnu.org/ml/gcc-testresults/2003-08/msg01612.html"/>.</para>

<para>Notez que les résultats contiennent:</para>

<screen>* 1 XPASS (unexpected pass) for g++
* 1 FAIL for g++
* 2 FAIL for gcc
* 26 XPASS's for libstdc++</screen>
 
<para>La réussite inattendue pour g++ est dûe à l'utilisation de
<userinput>--enable-__cxa_atexit</userinput>. Apparemment, toutes les
plateformes supportées par GCC n'ont pas le support de "__cxa_atexit" dans
leurs bibliothèques C, donc personne n'attend que ce test réussie partout.
</para>

<para>Les 26 réussites inattendues pour libstdc++ sont dûes à l'utilisation de
<userinput>--enable-clocale=gnu</userinput>, qui est le bon choix sur les
systèmes à base de Glibc, version 2.2.5 et ultérieure. Le support de locale
sous-jacent dans la bibliothèque GNU C est supérieur au modèle "generic"
autrement sélectionné (qui peut être applicable si vous utilisiez Newlibc,
Sun-libc ou toute autre libc). La suite de tests libstd++ attend apparemment le
modèle "generic", mais ces tests ne sont pas non plus censés réussir en
permanence.</para>

<para>Et finalement, installez le package:</para>

<para><screen><userinput>make install</userinput></screen></para>

</sect2>

