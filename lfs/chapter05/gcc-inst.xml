<sect2><title>&nbsp;</title><para>&nbsp;</para></sect2>

<sect2>
<title>Installation de GCC</title>

<para>Nous n'aurons pas besoin d'un compilateur C++ jusqu'au chapitre 6. Donc,
seule l'archive tar gcc-core a besoin d'être déballée en ce moment.</para>

<para>Ce package est connu pour mal se comporter si ses options d'optimisation
par défaut ont été changées (incluant les options -march et -mcpu). Donc, si
vous avez défini des variables d'environnement qui supplémentent les
optimisations par défaut, telles que CFLAGS et CXXFLAGS, nous vous recommendons
de les supprimer ou de les modifier lors de la construction de GCC.</para>

<para>Il est recommendé par la documentation d'installation de GCC pour
construire GCC en dehors du répertoire source dans un répertoire dédié:</para>

<para><screen><userinput>mkdir ../gcc-build
cd ../gcc-build</userinput></screen></para>

<para>Préparez la compilation de GCC:</para>

<para><screen><userinput>../gcc-&gcc-version;/configure --prefix=/static \
&nbsp;&nbsp;&nbsp;--disable-nls --disable-shared \
&nbsp;&nbsp;&nbsp;--with-as=$LFS/static/bin/as \
&nbsp;&nbsp;&nbsp;--with-ld=$LFS/static/bin/ld</userinput></screen></para>

<para>La signification des options de configure sont:</para>

<itemizedlist>
<listitem><para><userinput>--prefix=/static</userinput>: Ceci n'est PAS une
erreur. GCC contient en dur quelques chemins lors de la compilation et donc nous
avons besoin de donner le préfixe <filename class="directory">/static</filename>
lors du stage configure. Nous passerons le vrai préfixe d'installation
(<filename class="directory">$LFS/static</filename>) lors de l'étape
d'installation plus tard.</para></listitem>

<listitem><para><userinput>--disable-shared</userinput>: Ceci empêche la
construction des bibliothèques dynamiques. Elles nous sont inutiles pour
l'instant. Nous les créerons lors de la réinstallation de GCC du chapitre 6.
</para></listitem>

<listitem><para><userinput>--with-as=$LFS/static/bin/as and
--with-ld=$LFS/static/bin/ld</userinput>: GCC peut être mal compilé si le
package Binutils de votre distribution hôte est assez ancien. Nous avons besoin
d'un GCC statique bien fonctionnel jusqu'à notre réinstallation de GCC plus tard
dans le chapitre 6. Donc, en utilisant <filename>as</filename> et
<filename>ld</filename> à partir du package Binutils que nous avons compilé
plus tôt dans ce chapitre, nous nous assurons que GCC fonctionnera correctement.
</para></listitem>
</itemizedlist>

<para>Continuez avec la compilation du package:</para>

<para><screen><userinput>make BOOT_LDFLAGS="-static" bootstrap</userinput></screen></para>

<para>La signification des options de make sont:</para>

<itemizedlist>
<listitem><para><userinput>BOOT_LDFLAGS="-static"</userinput>: Ceci est
l'équivalent GCC de make LDFLAGS="-static" que nous utilisons pour d'autres
packages compilés statiquement.</para></listitem>

<listitem><para><userinput>bootstrap</userinput>: La cible
<emphasis>bootstrap</emphasis> ne compile pas simplement GCC, mais il le compile
une deuxième fois. Il utilise les premiers programmes compilés pour se compiler
une deuxième et une troisième fois pour s'assurer que le compilateur a été
compilé proprement et peut se compiler lui-même proprement.</para></listitem>
</itemizedlist>

<para>Et finissez l'installation du package:</para>

<para><screen><userinput>make prefix=$LFS/static install-no-fixedincludes</userinput></screen></para>

<para>La signification des options de make sont:</para>

<itemizedlist>
<listitem><para><userinput>install-no-fixedincludes</userinput>: Ceci empêche le
script fixincludes d'être executé. L'empêcher est nécessaire. L'installation de
GCC lance normalement le script fixincludes, qui cherchera sur votre système
les fichiers d'entête qui ont besoin d'être corrigé. Il peut penser que les
fichiers d'entête de Glibc de votre système hôte doivent être corrigés. Si
c'est le cas, il les corrigera et les placera dans
<filename>$LFS/static/lib/gcc-lib/i686-pc-linux-gnu/3.2</filename>. Plus tard
dans le chapitre 6, vous installerez Glibc qui placera ses fichiers d'entête
dans <filename>/usr/include</filename>. Ensuite, vous installerez d'autres
programmes qui utilisent les entêtes de Glibc et GCC cherchera dans
<filename>/static/lib/gcc-lib</filename> avant de rechercher dans
<filename>/usr/include</filename>, avec le résultat de recherche et utilisation
des fichiers d'entête corrigés de glibc à partir de votre distribution hôte, qui
sont probablement incompatibles avec la version de Glibc actuellement utilisée
sur le système LFS.</para></listitem>
</itemizedlist>

<para>Pour la touche finale, nous créerons le lien symbolique <filename
class="symlink">$LFS/static/bin/cc</filename>. Beaucoup de programmes ou de
scripts essaient de lancer <userinput>cc</userinput> au lieu de
<userinput>gcc</userinput>. Ceci permet de garder des programmes génériques et
utilisables sur tout type de système Unix. Tout le monde ne dispose pas de GNU
CC. Utiliser <userinput>cc</userinput> (le compilateur C) laisse l'utilisateur
libre de décider quel compilateur C installer. Le lien symbolique pointera vers
le compilateur par défaut du système.</para>

<para><screen><userinput>ln -s gcc $LFS/static/bin/cc</userinput></screen></para>

</sect2>

