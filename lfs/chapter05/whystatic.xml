<sect1 id="ch05-whystatic">
<title>Pourquoi utiliser une édition de lien statique ?</title> 
<?dbhtml filename="whystatic.html" dir="chapter05"?> 
 
<para>La plupart des programmes réalisent, en dehors de leur fonctions
spécifiques, un certain nombre d'opérations communes et triviales, telles que
allouer de la mémoire, rechercher des répertoires, ouvrir et fermer des
fichiers, les lire et les écrire, gérer des mots, chercher des modèles, calculer
et ainsi de suite. Au lieu d'obliger chaque programme à réinventer la roue, le
système GNU apporte toutes les fonctions de base dans des bibliothèques. La
bibliothèque principale est <filename>glibc</filename>. Pour avoir une idée de
ce qu'elle contient, jetez un oeil sur <filename>glibc/index.html</filename>
quelque part sur votre système hôte.</para>

<para>
Il existe deux manières d'attacher les fonctions des librairies aux programmes
qui les utilisent : statiquement ou dynamiquement.
Quand un programme est lié statiquement, le code des fonctions utilisées est
inclus dans l'exécutable, le résultat est un programme assez volumineux.
Quand un programme est lié dynamiquement, il n'inclus qu'une référence pour le
programme d'attachement, le nom de la bibliothèque etcelui de la fonction,
ceci produit un exécutable beaucoup plus petit. Cet exécutable a l'inconvénient
d'être quelques peus plus lent qu'un programme lié statiquement car l'attachement au moment de l'exécution prend un peu de temps.
</para>

<para>
En contrepartie de ce léger inconvénient, l'attachement dynamique a deux 
avantages majeurs par rapport à l'attachement statique. Premièrement vous
n'avez besoin qued'une seule copie du code de la bibliothèque sur votre disque,
plutôt que d'avoir de multiples copies du même code incluses dans un grand
nombre de programmes -- ce qui préserve l'espace disque. Deuxièmement, 
lorsque plusieurs programmes utilisent la même fonction de bibliothèque en même temps, une seule copie du code de cette fonction sera nécéssaire en mémoire 
-- ce qui préserve l'espace mémoire.
</para>

<para>
De nos jours, sauver quelques mégabytes d'espace ne semble pas grand chose, 
mais, il y a bien des lunes, lorsque les disques étaient mesurés en
mégabytes et la mémoire en kilobytes, une telle sauvagarde était primordiale.
Il s'agissait d'être capable de conserver plusieurs programmes en mémoire en 
même temps et de faire tenir un système Unix complet sur peu de volume 
disques.
</para>

<para>
Une troisième avantage, mineur celui là, de l'attachement dynamique est que 
lorsqu'une bibliothèque voit un bogue réparer ou est améliorée, vous devez
seulement recompiler la bibliothèque elle même, sans avoir à recompiler tous
les programmes qui utilisent la fonction améliorée.
</para>
 
<para>
En résumé, nous pouvons dire que l'attachement dynamique troc de la vitesse
d'éxécution contre de l'espace mémoire et disque ainsi que du temps de 
re-compilation.
</para>

<para>
Mais alors, si l'attachement dynamique gagne autant d'espace, pourquoi allons
nous attacher statiquement tous les programmes de ce chapitre ?
La raison est que nous ne voulons  pas compiler une <filename>glibc</filename>
temporaire ici. Et nous faisons cela juste pour gagner un peu de temps
-- environ 14 SBUs. Une autre raison est que la version de la Glibc du
système LFS pourrait ne pas être compatible avec celle de notre système hôte.
Les applicationc compilées avec la Glibs de notre système hôte risqueraient
de ne pas fonctionner proprement (ou même pas du tout) sur le système LFS
</para>

<para>
Cela signifie que les outils compilés dans ce chapitre devront être autonomes,
car quand, plus tard, nous chagerons de racine pour notre partition LFS la
bibliothèque GNU de notre système hôte ne sera plus accessible. C'est la raison
pour laquelle nous utilisons les flags <userinput>-static</userinput>, 
<userinput>--enable-static-link</userinput>, et <userinput>--disable-shared
</userinput> tout au long de ce chapitre, pour s'assurer que tous les 
éxécutables seront liés statiquement. Lorsque nous arriverons au chapitre
suivant, une des premières choses que nous ferons sera de construire la 
<filename>glibc</filename>, la plus importante des bibliothèques du système.
Une fois cela fait, nous pourrons lier tous les autres programmes dynamiquement
(y compris ceux installé statiquement dans ce chapitre) et retrouver l'avantage
du gain de place apporté.
</para>

</sect1>

