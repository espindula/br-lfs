<sect1 id="ch05-whystatic">
<title>Pourquoi utiliser une édition de lien statique ?</title> 
<?dbhtml filename="whystatic.html" dir="chapter05"?> 
 
<para>(Merci à Plasmatic d'avoir posté, dans une des listes de diffusion, le  
texte sur lequel cette partie est principalement fondée.)</para> 

<para>Lors de la création (compilation) d'un programme, plutôt que
d'avoir à réécrire toutes les fonctions pour accéder au noyau, au
matériel, aux fichiers, etc., à chaque fois que vous écrivez un nouveau
programme, toutes ces fonctions de base sont conservées dans des
bibliothèques. Glibc, que l'on installera plus tard, est une
des principales bibliothèques, qui contient le code pour toutes les
fonctions de base nécessaires aux programmes, telles que l'ouverture de
fichiers, l'affichage d'informations à l'écran, et la récupération des
saisies faites par les utilisateurs. A la compilation du programme,
ces bibliothèques sont liées au nouveau programme, de façon à ce
qu'il puisse utiliser toutes les fonctions contenues dans les
bibliothèques.</para>
 
<para>Cependant, ces bibliothèques peuvent être assez volumineuses (par  
exemple, libc.a approche souvent les 2,5Mo), vous ne voudrez sans doute
pas dupliquer chaque bibliothèque liée à votre programme. Imaginez que vous
ayez une commande simple comme ls liée avec une bibliothèque de 2,5Mo! Au lieu 
de fusionner la bibliothèque et le programme, ce qui correspond à une édition
de liens statique, mieux vaut la laisser dans un fichier indépendant et ne la  
charger qu'en cas de besoin. C'est cette édition de liens dynamiques qui permet 
de charger et décharger dynamiquement une bibliothèque selon les besoins du  
programme.</para> 

<para>Comme ces libraires peuvent être très grosses (par exemple,
libc.a approche souvent 2.5 Mo), alors vous ne voudriez pas qu'une
copie séparée de chaque librairie soit attachée au progamme.
Imaginez simplement, que si vous avec une simple commande comme ls,
un supplément de 2.5 Mo lui est attachée. Au lieu de faire de la
librairie une partie intégrante du programme, c'est à dire une liaison
statique, la librairie est stockée dans un fichier séparé, qui n'est
chargé seulement qu'au moment où le programme en a besoin. C'est ce
qui s'appelle une liaison dynamique, puisque la librairie est chargée
et déchargée dynamiquement, en fonction des besoins du programme. </para>

<para>Nous avons maintenant un fichier de 1Ko et un de 2.5Mo, mais somme toute
nous n'avons pas économisé d'espace mémoire (excepté peut-être en mémoire vive
jusqu'au moment où la librarie est chargée). L'avantage
<emphasis>réel</emphasis> de l'édition de liens dynamique est que nous
n'avons besoin que d'une seule copie de cette bibliothèque.
Si <filename>ls</filename> et <filename>rm</filename> utilisent tous deux la
même librairie, nous n'avons pas besoin de deux copies de cette librarie,
puisqu'ils peuvent tous les deux obtenir le code à partir du même fichier.
Même en mémoire, les deux programmes se partagent le même code, plutôt que de
le dupliquer en mémoire. Du coup, nous n'économisons pas seulement l'espace
disque, mais aussi la mémoire vive si précieuse.</para> 
 
<para>Si la liaison dynamique a tous ces avantages, pourquoi utiliser
alors exclusivement la liaison statique ? Et bien, c'est parce que
lorsque vous passerez via chroot dans votre environnement LFS flambant
neuf (mais plutôt incomplet), ces bibliothèques dynamiques ne seront pas
disponibles car elles se situeront à un endroit de votre ancienne
arborescence de répertoires (<filename>/usr/lib</filename> par exemple)
qui ne sera pas accessible depuis votre racine LFS
(<filename>$LFS</filename>).</para>
 
<para>Ainsi, pour que vos nouveaux programmes fonctionnent dans
l'environnement chroot, vous devrez vous assurer que les bibliothèques
soient liées statiquement lorsque vous les compilerez ; ce qui explique
les options <userinput>--enable-static-link</userinput>,
<userinput>--disable-shared</userinput>, et <userinput>-static</userinput>
utilisées tout au long du chapitre 5.
Au chapitre 6, la première chose que nous ferons sera de créer la
principale bibliothèque du système, glibc. Cela fait, nous commencerons à
reconstruire tous les programmes étudiés au chapitre 5, mais en les liant
dynamiquement cette fois, de façon à profiter du gain d'espace proposé par 
cette méthode.</para> 
 
<para>Et maintenant vous savez pourquoi utiliser cette mystérieuse option  
<userinput>-static</userinput>.  Si vous essayez de ne pas l'utiliser, 
vous verrez très rapidement ce qui arrivera lors de l'exécution du chroot  
dans votre nouveau et imparfait système LFS.</para> 
 
<para>Si vous voulez en savoir plus sur les librairies à liaison dynamique,
consultez un ouvrage ou un site web sur la programmation, plus spécialement 
consacré à Linux.</para> 
 
</sect1> 
