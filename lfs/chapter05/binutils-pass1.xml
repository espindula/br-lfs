<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-tools-binutils-pass1" role="wrap">
<title>Binutils-&binutils-version; - Passe 1</title>
<?dbhtml filename="binutils-pass1.html"?>

<indexterm zone="ch-tools-binutils-pass1">
<primary sortas="a-Binutils">Binutils</primary>
<secondary>outils, passe 1</secondary></indexterm>

<sect2 role="package"><title/>
<xi:include xmlns:xi="http://www.w3.org/2003/XInclude" href="../chapter06/binutils.xml" xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

<segmentedlist>
<segtitle>&buildtime;</segtitle>
<segtitle>&diskspace;</segtitle>
<seglistitem><seg>1,0&nbsp;SBU</seg><seg>179&nbsp;Mo</seg></seglistitem>
</segmentedlist>

<xi:include xmlns:xi="http://www.w3.org/2003/XInclude" href="../chapter06/binutils.xml" xpointer="xpointer(/sect1/sect2[1]/segmentedlist[2])"/>

</sect2>

<sect2 role="installation">
<title>Installation de Binutils</title>

<para>Il est important que Binutils soit le premier paquet compilé parce
que Glibc comme GCC réalisent différents tests portant sur l'éditeur de liens et
l'assembleur disponibles pour déterminer les fonctionnalités qu'ils doivent activer.
</para>

<para>Ce paquet est connu pour avoir des soucis quand les options d'optimisation
par défaut (dont les options <parameter>-march</parameter> et
<parameter>-mcpu</parameter>) sont modifiées. Donc, si des variables d'environnement
qui surchargent les optimisations par défaut on été définies, telles que <envar>CFLAGS</envar>
et <envar>CXXFLAGS</envar>, supprimez les avant de lancer 
la construction de Binutils.</para>

<para>Si vous construisez à partir d'un hôte utilisant Gcc-4 ou ultérieur, il
est nécessaire de modifier légèrement Binutils lors de cette première passe
pour qu'il puisse être compilé par le système hôte.</para>

<screen><userinput>patch -Np1 -i ../&binutils-gcc4-patch;</userinput></screen>

<para>La documentation de Binutils recommande de construire Binutils en dehors
du répertoire des sources, c'est-à-dire dans un répertoire de construction
dédié&nbsp;:</para>

<screen><userinput>mkdir -v ../binutils-build
cd ../binutils-build</userinput></screen>

<note><para>Pour que les valeurs SBU listées dans le reste du livre vous soient
utiles, mesurez le temps pris pour construire ce paquet, de la configuration
jusqu'à la première installation. Pour cela, englobez les trois commandes
dans une commande <command>time</command> de cette façon&nbsp;:
<userinput>time { ./configure ... &amp;&amp; make &amp;&amp; make
install; }</userinput>.</para></note>

<para>Maintenant, préparez la compilation de Binutils&nbsp;:</para>

<screen><userinput>../binutils-&binutils-version;/configure --prefix=/tools --disable-nls</userinput></screen>

<para>Voici la signification des options de configure&nbsp;:</para>

<variablelist>
<varlistentry>
<term><parameter>--prefix=/tools</parameter></term>
<listitem><para>Cette option indique au script configure de se préparer à installer les
programmes Binutils dans le répertoire <filename
class="directory">/tools</filename>.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>--disable-nls</parameter></term>
<listitem><para>Ceci désactive l'internationalisation car ce n'est pas
nécessaire pour des outils temporaires.</para></listitem>
</varlistentry>
</variablelist>

<beginpage/>

<para>Continuez en compilant le paquet&nbsp;:</para>

<screen><userinput>make</userinput></screen>

<para>La compilation est maintenant terminée. Normalement, c'est là que la suite de tests
devrait être lancé mais, à ce moment, la structure permettant l'exécution des suites de tests (Tcl,
Expect et DejaGnu) n'est pas encore en place. De plus, l'intérêt de lancer les tests
maintenant serait minime car les programmes de la première passe seront
bientôt remplacés par ceux de la seconde.</para>

<para>Installez le paquet&nbsp;:</para>

<screen><userinput>make install</userinput></screen>

<para>Ensuite, préparez l'éditeur de liens pour la phase
d'<quote>ajustement</quote> un peu plus tard&nbsp;:</para>

<screen><userinput>make -C ld clean
make -C ld LIB_PATH=/tools/lib</userinput></screen>

<para>Voici la signification des paramètres de make&nbsp;:</para>

<variablelist>
<varlistentry>
<term><parameter>-C ld clean</parameter></term>
<listitem><para>Ceci indique au programme make de supprimer tous les fichiers
compilés du sous-répertoire <filename class="directory">ld</filename>.
</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>-C ld LDFLAGS="-all-static"
LIB_PATH=/tools/lib</parameter></term>
<listitem><para>Cette option reconstruit tout ce qui se trouve dans le
sous-répertoire <filename class="directory">ld</filename>. Spécifier la
variable makefile <envar>LIB_PATH</envar> dans la ligne de commande nous
permet d'écraser la valeur par défaut et à la faire pointer sur l'
emplacement des outils temporaires. Cette variable définit le
chemin de recherche des bibliothèques par défaut pour l'éditeur de liens.
Cette préparation est utilisée plus tard dans le chapitre.</para></listitem>
</varlistentry>
</variablelist>

<warning><para><emphasis>Ne supprimez pas encore</emphasis> les répertoires de
construction et des sources de Binutils, vous en aurez encore besoin dans leur état actuel
un peu plus tard dans ce chapitre.</para></warning>

</sect2>

<sect2 role="content"><title/>
<para>Les détails sur ce paquet sont disponibles dans <xref
linkend="contents-binutils" role="." /></para>
</sect2>

</sect1>

