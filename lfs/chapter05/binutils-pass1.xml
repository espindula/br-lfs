<sect1 id="ch05-binutils-pass1">
<title>Installer Binutils-&binutils-version; - Pass 1</title>
<?dbhtml filename="binutils-pass1.html" dir="chapter05"?>

<screen>Estimation du temps de construction&nbsp;:   &binutils-time-tools-pass1;
Estimation de l'espace disque requis&nbsp;:  &binutils-compsize-tools-pass1;</screen>

&aa-binutils-shortdesc;
&aa-binutils-dep;

<sect2><title>&nbsp;</title><para>&nbsp;</para></sect2>

<sect2>
<title>Installation de Binutils</title>

<para>Il est important que Binutils soit le premier package à être compilé parce
que à la fois Glibc et GCC réalisent différents tests sur l'éditeur de liens et
l'assembleur disponibles pour déterminer leur propres fonctionnalités à activer.
</para>

<note><para>Même si Binutils est un package important de l'ensemble des outils,
nous n'allons pas lancer la suite de tests aussi tôt. Tout d'abord, les éléments
de la suite de tests ne sont pas encore en place. Ensuite, les programmes de la
première passe seront bientôt écrasés par ceux de la seconde passe.
</para></note>

<para>Ce package est connu pour mal se comporter si vous changez les options
d'optimisation par défaut (en incluant les options -march et -mcpu). Donc, si
vous avez défini des variables d'environnement qui surchargent les optimisations
pas défaut, telles que CFLAGS et CXXFLAGS, nous vous recommandons de supprimer
cette initialisation lors de la construction de Binutils.</para>

<para>La documentation de Binutils recommande de construire Binutils en dehors
du répertoire des sources, c'est-à-dire dans un répertoire de construction
dédié&nbsp;:</para>

<screen><userinput>mkdir ../binutils-build
cd ../binutils-build</userinput></screen>

<note><para>Si vous voulez que les valeurs SBU listées dans le reste du livre
vous soient utiles, vous devez mesurer le temps pris pour construire ce package.
Pour cela, vous pouvez faire quelque chose comme ça&nbsp;:
achieve this easily, you could do something like:
<userinput>time { ./configure ... &amp;&amp; ... &amp;&amp; ... &amp;&amp; make install; }</userinput>.</para></note>

<para>Maintenant, préparez la compilation de Binutils&nbsp;:</para>

<screen><userinput>../binutils-&binutils-version;/configure \
&nbsp;&nbsp;&nbsp;&nbsp;--prefix=/tools --disable-nls</userinput></screen>

<para>La signification des options de configure est&nbsp;:</para>

<itemizedlist>
<listitem><para><userinput>--prefix=/tools</userinput>: Ceci indique au script
configure de se préparer à installer les programmes Binutils dans le répertoire
<filename>/tools</filename>.</para></listitem>

<listitem><para><userinput>--disable-nls</userinput>: Ceci désactive
l'internationalisation (un mot généralement abrégé en i18n). Nous n'en avons pas
besoin pour nos programmes statiques et <emphasis>nls</emphasis> cause souvent
des problèmes lors d'une édition des liens en statique.</para></listitem>
</itemizedlist>

<para>Continuez avec la compilation du package&nbsp;:</para>

<screen><userinput>make configure-host
make LDFLAGS="-all-static"</userinput></screen>

<para>La signification des paramètres de make est&nbsp;:</para>

<itemizedlist>
<listitem><para><userinput>configure-host</userinput>: Ceci force tous les
sous-répertoires à être immédiatement configurés. Une construction statique
échouera sans ça. Nous utilisond donc cette option pour contourner le
problème.</para></listitem>

<listitem><para><userinput>LDFLAGS="-all-static"</userinput>: Ceci indique à
l'éditeur de liens que tous les programmes Binutils devraient être liés
statiquement. Néanmoins, en étant strict, <userinput>"-all-static"</userinput>
est tout d'abord passé au programme <emphasis>libtool</emphasis> qui passe
ensuite <userinput>"-static"</userinput> à l'éditeur de liens.</para></listitem>
</itemizedlist>

<para>Enfin, installez le package&nbsp;:</para>

<screen><userinput>make install</userinput></screen>

<para>Maintenant, préparez l'éditeur de liens pour le "verrouillage" de Glibc un
peu plus tard&nbsp;:</para>

<screen><userinput>make -C ld clean
make -C ld LDFLAGS="-all-static" LIB_PATH=/tools/lib</userinput></screen>

<para>La signification des paramètres de make est&nbsp;:</para>

<itemizedlist>
<listitem><para><userinput>-C ld clean</userinput>: Ceci indique au programme
make de supprimer tous les fichiers compilés mais seulement dans le répertoire
<filename>ld</filename>.</para></listitem>

<listitem><para><userinput>-C ld LDFLAGS="-all-static" LIB_PATH=/tools/lib</userinput>:
Cette option reconstruit tout ce qui se trouve dans le sous-répertoire
<filename>ld</filename>. Spécifier la variable makefile LIB_PATH en ligne de
commande nous autorise à écraser la valeur par défaut et à la faire pointer vers
notre emplacement temporaire des outils. La valeur de cette variable spécifie le
chemin de recherche des bibliothèques par défaut pour l'éditeur de liens. Vous
verrez comment cette préparation est ensuite utilisée dans le chapitre.
</para></listitem>
</itemizedlist>

<!-- HACK - Force some whitespace to appease tidy -->
<literallayout></literallayout>

<warning><para>Ne supprimez pas encore les répertoires de construction et des
sources dont nous aurons encore besoin dans leur état actuel un peu plus tard
dans ce chapitre.</para></warning>

<!-- HACK - Force some whitespace to appease tidy -->
<literallayout></literallayout>

</sect2>

</sect1>

