<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-tools-binutils-pass1">
<title>Binutils-&binutils-version; - Passe 1</title>
<?dbhtml filename="binutils-pass1.html"?>

<indexterm zone="ch-tools-binutils-pass1">
<primary sortas="a-Binutils">Binutils</primary>
<secondary>outils, passe 1</secondary></indexterm>

<xi:include xmlns:xi="http://www.w3.org/2003/XInclude"
href="../chapter06/binutils.xml" xpointer="xpointer(/sect1/para[1])"/>

<screen>&buildtime; 1,0&nbsp;SBU
&diskspace; 170&nbsp;Mo</screen>

<xi:include xmlns:xi="http://www.w3.org/2003/XInclude"
href="../chapter06/binutils.xml" xpointer="xpointer(/sect1/para[2])"/>

<sect2>
<title>Installation de Binutils</title>

<para>Il est important que Binutils soit le premier paquet à être compilé parce
que à la fois Glibc et GCC réalisent différents tests sur l'éditeur de liens et
l'assembleur disponibles pour déterminer leur propres fonctionnalités à activer.
</para>

<para>Ce paquet est connu pour mal se comporter si vous changez les options
d'optimisation par défaut (en incluant les options <emphasis>-march</emphasis>
et <emphasis>-mcpu</emphasis>). Donc, si vous avez défini des variables
d'environnement qui surchargent les optimisations par défaut, telles que CFLAGS
et CXXFLAGS, nous vous recommandons de supprimer cette initialisation lors de la
construction de Binutils.</para>

<para>La documentation de Binutils recommande de construire Binutils en dehors
du répertoire des sources, c'est-à-dire dans un répertoire de construction
dédié&nbsp;:</para>

<screen><userinput>mkdir ../binutils-build
cd ../binutils-build</userinput></screen>

<note><para>Si vous voulez que les valeurs SBU listées dans le reste du livre
vous soient utiles, vous devez mesurer le temps pris pour construire ce
paquet, de la configuration jusqu'à la première installation. Pour cela, vous
pouvez englober les quatres commandes dans une commande <command>time</command>
de cette façon&nbsp;:
<userinput>time { ./configure ... &amp;&amp; ... &amp;&amp; ... &amp;&amp; make
install; }</userinput>.</para></note>

<para>Maintenant, préparez la compilation de Binutils&nbsp;:</para>

<screen><userinput>../binutils-&binutils-version;/configure --prefix=/tools
--disable-nls</userinput></screen>

<para>Voici la signification des options de configure&nbsp;:</para>

<itemizedlist>
<listitem><para><userinput>--prefix=/tools</userinput>&nbsp;: ceci indique au
script configure de se préparer à installer les programmes Binutils dans le
répertoire <filename>/tools</filename>.</para></listitem>

<listitem><para><userinput>--disable-nls</userinput>&nbsp;: ceci désactive
l'internationalisation (un mot généralement abrégé en i18n). Nous n'en avons pas
besoin pour nos programmes statiques. De plus, <emphasis>nls</emphasis> cause
souvent des problèmes lors d'une édition des liens en
statique.</para></listitem>
</itemizedlist>

<para>Continuez avec la compilation du paquet&nbsp;:</para>

<screen><userinput>make configure-host
make LDFLAGS="-all-static"</userinput></screen>

<para>Voici la signification des paramètres de make&nbsp;:</para>

<itemizedlist>
<listitem><para><userinput>configure-host</userinput>&nbsp;: ceci force tous les
sous-répertoires à être immédiatement configurés. Une construction statique
échouera sans ça. Nous utilisons donc cette option pour contourner le
problème.</para></listitem>

<listitem><para><userinput>LDFLAGS="-all-static"</userinput>&nbsp;: ceci indique
à
l'éditeur de liens que tous les programmes Binutils devraient être liés
statiquement. Néanmoins, en étant strict, <emphasis>"-all-static"</emphasis>
est tout d'abord passé au programme <command>libtool</command> qui passe
ensuite <emphasis>"-static"</emphasis> à l'éditeur de liens.</para></listitem>
</itemizedlist>

<para>La compilation est terminée. Normalement, nous devrions lancer la suite 
de tests mais, à ce moment, l'ensemble de travail de la suite de tests (Tcl,
Expect and DejaGnu) n'est pas encore en place. Et il y aurait de toute façon
peu d'intérêt à lancer les tests car les programmes de la première passe seront
bientôt remplacés par ceux de la seconde.</para>

<para>Maintenant, installez le paquet&nbsp;:</para>

<screen><userinput>make install</userinput></screen>

<para>Préparez l'éditeur de liens pour la phase
d'<quote>ajustement</quote> un peu plus tard&nbsp;:</para>

<screen><userinput>make -C ld clean
make -C ld LDFLAGS="-all-static" LIB_PATH=/tools/lib</userinput></screen>

<para>Voici la signification des paramètres de make&nbsp;:</para>

<itemizedlist>
<listitem><para><userinput>-C ld clean</userinput>&nbsp;: ceci indique au
programme make de supprimer tous les fichiers compilés mais seulement dans le
répertoire <filename class="directory">ld</filename>.</para></listitem>

<listitem><para><userinput>-C ld LDFLAGS="-all-static"
LIB_PATH=/tools/lib</userinput>&nbsp;:
cette option reconstruit tout ce qui se trouve dans le sous-répertoire
<filename class="directory">ld</filename>. Spécifier la variable makefile
LIB_PATH en ligne de commande nous autorise à écraser la valeur par défaut et à
la faire pointer vers notre emplacement temporaire des outils. La valeur de
cette variable spécifie le chemin de recherche des bibliothèques par défaut pour
l'éditeur de liens. Vous verrez comment cette préparation est ensuite utilisée
dans le chapitre.</para></listitem>
</itemizedlist>

<literallayout></literallayout>

<warning><para><emphasis>Ne supprimez pas encore</emphasis> les répertoires de
construction et des sources dont vous aurez encore besoin dans leur état actuel
un peu plus tard dans ce chapitre.</para></warning>

<literallayout></literallayout>

</sect2>

<sect2><title> </title><para> </para>
<para>Les détails sur ce paquet sont disponibles dans <xref
linkend="contents-binutils"/>.</para>
<para> </para></sect2>

</sect1>

