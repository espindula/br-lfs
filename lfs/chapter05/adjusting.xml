<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-tools-adjusting">
<title>Ajuster l'atelier des outils</title>
<?dbhtml filename="adjusting.html"?>

<para>Maintenant que les bibliothèques C temporaires ont été installées, tous
les outils compilés dans le reste de ce chapitre doivent-y être liés. 
Pour cela, installons le nouvel éditeur de liens et ajustons le fichier specs du
compilateur.</para>

<para>L'éditeur de liens (déjà ajusté à la fin de la première passe de Binutils)
est installé en lançant la commande suivante depuis le répertoire <filename
class="directory">binutils-build</filename>&nbsp;:</para>

<screen><userinput>make -C ld install</userinput></screen>

<para>À partir de ce moment, tout sera lié uniquement aux bibliothèques 
présentes dans <filename class="directory">/tools/lib</filename>.</para>

<note><para>Si vous n'avez pas tenu compte de l'avertissement indiquant de conserver les répertoires source
et de compilation de Binutils après la première passe,
ignorez simplement la commande ci-dessus. Il est alors possible que certains 
programmes de tests se lient avec les bibliothèques de l'hôte. Bien que ce ne soit pas idéal, 
ce n'est pas un problème majeur, et la situation sera corrigée plus tard lors de
l'installation de la deuxième passe de Binutils.</para></note>

<para>Maintenant que l'éditeur de liens ajusté est en place, les répertoires
source et de construction de Binutils peuvent être supprimés.</para>

<para>La prochaine tâche est de modifier le fichier specs de GCC pour qu'il
pointe vers le nouvel éditeur de liens. Un script sed simple se chargera de 
ceci&nbsp;:</para>

<!-- Ampersands are needed to allow copy and paste -->

<screen><userinput>SPECFILE=`gcc --print-file specs` &amp;&amp;
sed 's@ /lib/ld-linux.so.2@ /tools/lib/ld-linux.so.2@g' \
    $SPECFILE &gt; tempspecfile &amp;&amp;
mv -f tempspecfile $SPECFILE &amp;&amp;
unset SPECFILE</userinput></screen>

<para><phrase condition="html">Il est recommandé de copier/coller la commande ci-dessus 
pour assurer son exactitude.</phrase>
Autrement, vous pouvez éditer le fichier specs à la main en
remplaçant chaque occurrence de <quote>/lib/ld-linux.so.2</quote> par
<quote>/tools/lib/ld-linux.so.2</quote>.</para>
 
<para>Assurez-vous d'inspecter visuellement le fichier specs pour vérifier que
la modification attendue a bien été réalisée.</para>

<important><para>Au cas où le nom de l'éditeur de liens de la plateforme de
travail est autre que <filename>ld-linux.so.2</filename>, remplacez
<filename>ld-linux.so.2</filename> avec le nom de l'éditeur de liens de votre
plateforme dans les commandes ci-dessus. Référez-vous à <xref
linkend="ch-tools-toolchaintechnotes" role=","/> si
nécessaire.</para></important>

<para>Enfin, il existe un risque que certains fichiers include du système hôte
aient été copiés dans le répertoire include privé de GCC 
par le processus <quote>fixincludes</quote>, qui est exécuté lors 
de la construction de GCC. Ceci est expliqué plus en détail plus tard
dans ce chapitre. Lancez les commandes suivantes pour éliminer cette
possibilité&nbsp;:</para>

<screen><userinput>rm -vf /tools/lib/gcc/*/*/include/{pthread.h,bits/sigthread.h}</userinput></screen>

<beginpage/>

<caution><para>Il est impératif à ce moment de s'arrêter et de s'assurer que les
fonctions basiques (compilation et édition des liens) du nouvel ensemble d'outils
fonctionnent comme attendu. Pour réaliser un test rapide, entrez ces commandes&nbsp;:</para>

<screen><userinput>echo 'main(){}' &gt; dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

<para>Si tout fonctionne correctement, il ne devrait pas y avoir d'erreurs et
la sortie de la dernière commande sera de la forme&nbsp;:</para>

<screen><computeroutput>[Requesting program interpreter: 
    /tools/lib/ld-linux.so.2]</computeroutput></screen>

<para>Notez que <filename class="directory">/tools/lib</filename> apparaît comme
préfixe du chargeur dynamique.</para>

<para>Si la sortie diffère ou s'il n'y a aucune sortie, quelque chose
s'est mal passé. Investiguez et retracez vos étapes pour trouver où se
cache le problème et comment le corriger. Ce problème doit absolument être corrigé avant
de continuer. Tout d'abord, recommencez le test en utilisant
<command>gcc</command> au lieu de <command>cc</command>. Si cela fonctionne,
le lien symbolique <filename class="symlink">/tools/bin/cc</filename> est
manquant. Revisitez <xref linkend="ch-tools-gcc-pass1" role=","/> et installez
le lien symbolique. Ensuite, assurez-vous que le <envar>PATH</envar> est
correct en lançant <userinput>echo $PATH</userinput> et en
vérifiant que <filename class="directory">/tools/bin</filename> est en tête de
liste. Si le <envar>PATH</envar> est mauvais, cela pourrait signifier que
vous n'êtes pas connecté en tant qu'utilisateur <emphasis>lfs</emphasis> ou que
quelque chose s'est mal passé dans <xref linkend="ch-tools-settingenviron"
role="."/> Une autre possibilité est que 
la correction du fichier specs ci-dessus ne soit pas déroulée correctement. Dans ce cas, refaites la
modification de ce fichier<phrase condition="html"> en vous assurant de bien 
copier/coller les lignes.</phrase>.</para>

<para>Une fois satisfait, supprimez les fichiers de test&nbsp;:</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

<para>Construire TCL dans la prochaine section sera une vérification
supplémentaire de la bonne mise en place de l'outil de construction. Si TCL
échoue à la construction, c'est une indication d'un problème dans l'installation
de Binutils, GCC ou Glibc, mais pas avec TCL lui-même.</para>
</caution>


</sect1>
