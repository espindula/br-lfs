<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-tools-adjusting">
<title>Ajuster l'atelier des outils</title>
<?dbhtml filename="adjusting.html"?>

<para>Maintenant que les bibliothèques C temporaires ont été installées, tous
les outils compilés dans le reste de ce chapitre doivent être liés avec ces
bibliothèques. Pour accomplir cela, l'éditeur de liens et le fichier specs du
compilateur doivent être ajustés.</para>

<para>L'éditeur de liens ajusté (à la fin de la première passe de Binutils)
est installé en lançant la commande suivante à partir du répertoire <filename
class="directory">binutils-build</filename>&nbsp;:</para>

<screen><userinput>make -C ld install</userinput></screen>

<para>À partir de ce moment, tout sera lié uniquement avec les bibliothèques
comprises dans <filename class="directory">/tools/lib</filename>.</para>

<note><para>Si l'avertissement précédent de différencier les répertoires source
et de conversion de Binutils à partir de la première passe n'a pas été suivi,
ignorez simplement la commande ci-dessus. Le résultat en est une petite chance
de programmes de tests toujours liés avec les bibliothèques de l'hôte. Ce n'est
pas idéal mais ce n'est pas un problème majeur. La situation est corrigée à
l'installation de la deuxième passe de Binutils un peu plus tard.</para></note>

<para>Maintenant que l'éditeur de liens ajusté est installé, les répertoires
source et de construction de Binutils doivent être supprimés.</para>

<para>La prochaine tâche est de modifier le fichier specs de GCC pour qu'il
pointe vers le nouvel éditeur de liens. Un simple script sed devrait y
parvenir&nbsp;:</para>

<!-- Ampersands are needed to allow copy and paste -->

<screen><userinput>SPECFILE=`gcc --print-file specs` &amp;&amp;
sed 's@ /lib/ld-linux.so.2@ /tools/lib/ld-linux.so.2@g' \
    $SPECFILE &gt; tempspecfile &amp;&amp;
mv -f tempspecfile $SPECFILE &amp;&amp;
unset SPECFILE</userinput></screen>

<para><phrase condition="html">Il est recommandé que la commande ci-dessus soit
copiée/collée pour assurer la précision de la commande.</phrase>
<beginpage/>
Autrement, le fichier specs est éditable manuellement. Ceci est fait en
remplaçant chaque occurrence de <quote>/lib/ld-linux.so.2</quote> par
<quote>/tools/lib/ld-linux.so.2</quote>.</para>
 
<para>Assurez-vous d'inspecter visuellement le fichier specs pour vérifier que
la modification attendue a été réellement réalisée.</para>

<important><para>Au cas où le nom de l'éditeur de liens de la plateforme de
travail est autre que <filename>ld-linux.so.2</filename>, remplacez
<filename>ld-linux.so.2</filename> avec le nom de l'éditeur de liens de votre
plateforme dans les commandes ci-dessus. Référez-vous à <xref
linkend="ch-tools-toolchaintechnotes" role=","/> si
nécessaire.</para></important>

<para>Enfin, il existe un risque que certains fichiers include du système hôte
aient trouvé leur chemin vers le répertoire include privé de GCC. Ceci peut 
arriver à cause du processus <quote>fixincludes</quote> de GCC fonctionnant en
tant que partie de la construction GCC. Ceci est expliquer un peu plus tard
dans ce chapitre. Lancez les commandes suivantes pour éliminer cette
possibilité&nbsp;:</para>

<screen><userinput>rm -f
/tools/lib/gcc/*/*/include/{pthread.h,bits/sigthread.h}</userinput></screen>

<beginpage/>

<caution><para>Il est impératif à ce moment de s'arrêter et de s'assurer que les
fonctions basiques (compilation et édition des liens) du nouvel atelier d'outils
fonctionnent comme attendu. Pour réaliser une vérification de santé, lancez les
commandes suivantes&nbsp;:</para>

<screen><userinput>echo 'main(){}' &gt; dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

<para>Si tout fonctionne correctement, il ne devrait pas y avoir d'erreurs et
la sortie de la dernière commande sera de la forme&nbsp;:</para>

<screen><computeroutput>[Requesting program interpreter: 
    /tools/lib/ld-linux.so.2]</computeroutput></screen>

<para>Notez que <filename class="directory">/tools/lib</filename> apparaît comme
préfixe du chargeur dynamique.</para>

<para>Si l'affichage diffère ou s'il n'y a aucun affichage, alors quelque chose
ne se passe pas bien. Investiguez et retracez vos étapes pour trouver où se
cache le problème et comment le corriger. Ce problème doit être corrigé avant
de continuer. Tout d'abord, relancez la vérification en utilisant
<command>gcc</command> au lieu de <command>cc</command>. Si cela fonctionne,
le lien symbolique <filename class="symlink">/tools/bin/cc</filename> est
manquant. Revisitez <xref linkend="ch-tools-gcc-pass1" role=","/> et installez
le lien symbolique. Ensuite, assurez-vous que le <envar>PATH</envar> est
correct. Ceci se vérifie en lançant <userinput>echo $PATH</userinput> et en
vérifiant que <filename class="directory">/tools/bin</filename> est en tête de
la liste. Si le <envar>PATH</envar> est mauvais, cela pourrait signifier que
vous n'êtes pas connecté en tant qu'utilisateur <emphasis>lfs</emphasis> ou que
quelque chose s'est mal passé dans <xref linkend="ch-tools-settingenviron"
role="."/> Une autre possibilité est que quelque chose a pu mal se passer
avec la correction du fichier specs ci-dessus. Dans ce cas, refaites la
modification de ce fichier<phrase condition="html"> en vous assurant de
copier/coller les lignes comme cela était recommandé</phrase>.</para>

<para>Une fois satisfait, nettoyez les fichiers de test&nbsp;:</para>

<screen><userinput>rm dummy.c a.out</userinput></screen>
</caution>


</sect1>
