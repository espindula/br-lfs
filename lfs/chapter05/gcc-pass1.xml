<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-tools-gcc-pass1">
<title>GCC-&gcc-version; - Passe 1</title>
<?dbhtml filename="gcc-pass1.html"?>

<indexterm zone="ch-tools-gcc-pass1">
<primary sortas="a-GCC">GCC</primary>
<secondary>outils, passe 1</secondary></indexterm>

<xi:include xmlns:xi="http://www.w3.org/2003/XInclude"
href="../chapter06/gcc.xml" xpointer="xpointer(/sect1/para[1])"/>

<screen>&buildtime; 4,4&nbsp;SBU
&diskspace; 411,7&nbsp;Mo</screen>

<xi:include xmlns:xi="http://www.w3.org/2003/XInclude"
href="../chapter06/gcc.xml" xpointer="xpointer(/sect1/para[2])"/>

<sect2>
<title>Installation de GCC</title>

<para>Déballez seulement l'archive tar GCC-core, car nous n'allons pas avoir
besoin du compilateur C++ et de la suite de tests pour l'instant.</para>

<para>Ce package est connu pour mal se comporter si vous changez les options
d'optimisation par défaut (en incluant les options <emphasis>-march</emphasis>
et <emphasis>-mcpu</emphasis>). Donc, si vous avez défini des variables
d'environnement qui surchargent les optimisations pas défaut, telles que CFLAGS
et CXXFLAGS, nous vous recommandons de supprimer cette initialisation lors de la
construction de GCC.</para>

<para>La documentation de GCC recommande de ne pas construire GCC dans le
répertoire des sources mais dans un répertoire de construction dédié&nbsp;:
</para>

<screen><userinput>mkdir ../gcc-build
cd ../gcc-build</userinput></screen>

<para>Préparez la compilation de GCC&nbsp;:</para>

<screen><userinput>../gcc-&gcc-version;/configure --prefix=/tools \
    --with-local-prefix=/tools \
    --disable-nls --enable-shared \
    --enable-languages=c</userinput></screen>

<para>Voici la signification des options de configure&nbsp;:</para>

<itemizedlist>
<listitem><para><userinput>--with-local-prefix=/tools</userinput>&nbsp;: le but
de cette option est de supprimer <filename>/usr/local/include</filename> du
chemin de recherche des fichiers include de <command>gcc</command>. Ce n'est pas
absolument essentiel&nbsp;; néanmoins, vous voulons minimiser l'influence du
système hôte et ceci nous semble un point intéressant dans ce but.
</para></listitem>

<listitem><para><userinput>--enable-shared</userinput>&nbsp;: cette option peut
ne pas sembler intuitive au début. Mais en l'utilisant, elle permet la
construction de <filename>libgcc_s.so.1</filename> et
<filename>libgcc_eh.a</filename>, et disposer de
<filename>libgcc_eh.a</filename> nous assure que le script configure de Glibc
(le prochain package à compiler) produira de bons résultats. Notez que les
binaires <command>gcc</command> seront toujours liés statiquement, car ceci est
contrôlé par la valeur <emphasis>-static</emphasis> de BOOT_LDFLAGS lors de la
prochaine étape.</para></listitem>

<listitem><para><userinput>--enable-languages=c</userinput>&nbsp;: cette option
nous assure que seul le compilateur C sera construit. Cette option n'est
nécessaire que si vous avez téléchargé et déballé l'archive tar GCC complète.
</para></listitem>
</itemizedlist>

<para>Continuez avec la compilation du package&nbsp;:</para>

<screen><userinput>make BOOT_LDFLAGS="-static" bootstrap</userinput></screen>

<para>Voici la signification des paramètres de make&nbsp;:</para>

<itemizedlist>
<listitem><para><userinput>BOOT_LDFLAGS="-static"</userinput>&nbsp;: ceci
indique à GCC de lier ses programmes statiquement.</para></listitem>

<listitem><para><userinput>bootstrap</userinput>&nbsp;: cette cible ne compile
pas GCC une seule fois mais plusieurs fois. Il utilise les programmes compilés
dans le premier tour pour se compiler une deuxième fois, puis une troisième
fois. Il compare alors les deuxième et troisième compilation pour s'assurer
qu'il arrive à se reproduire lui-même sans fautes, ce qui semble vouloir dire
qu'il a été compilé correctement.</para></listitem>
</itemizedlist>

<para>La compilation est maintenant terminée et, à ce point, nous devrions
lancer la suite de tests. Mais, comme nous l'avons dit plus tôt, l'ensemble de
travail de la suite de tests n'est pas encore en place. De toute façon, il y
aurait peu d'intérêt à lancer les tests car les programmes de la première passe
seront bientôt remplacés.</para>

<para>Maintenant, installez le package&nbsp;:</para>

<screen><userinput>make install</userinput></screen>

<para>En touche finale, nous créons un lien symbolique. Beaucoup de programmes
et de scripts lancent <command>cc</command> au lieu de <command>gcc</command>,
ceci pour conserver des programmes génériques et donc utilisables sur tout type
de système Unix. Tout le monde n'a pas le compilateur GNU C installé. En lançant
Utiliser <command>cc</command> permet de libérer l'administrateur système dans
son choix du compilateur C à installer, tant qu'un lien symbolique est
créé&nbsp;:</para>

<screen><userinput>ln -s gcc /tools/bin/cc</userinput></screen>

</sect2>

<sect2><title> </title><para> </para>
<para>Les détails sur ce package sont disponibles dans <xref
linkend="contents-gcc"/>.</para>
<para> </para></sect2>

</sect1>

