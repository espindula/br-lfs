<<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-tools-gcc-pass1" role="wrap">
<title>GCC-&gcc-version; - Passe 1</title>
<?dbhtml filename="gcc-pass1.html"?>

<indexterm zone="ch-tools-gcc-pass1">
<primary sortas="a-GCC">GCC</primary>
<secondary>outils, passe 1</secondary></indexterm>

<sect2 role="package"><title/>
<xi:include xmlns:xi="http://www.w3.org/2003/XInclude" href="../chapter06/gcc.xml" xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

<segmentedlist>
<segtitle>&buildtime;</segtitle>
<segtitle>&diskspace;</segtitle>
<seglistitem><seg>4,4&nbsp;SBU</seg><seg>300&nbsp;Mo</seg></seglistitem>
</segmentedlist>

<xi:include xmlns:xi="http://www.w3.org/2003/XInclude" href="../chapter06/gcc.xml" xpointer="xpointer(/sect1/sect2[1]/segmentedlist[2])"/>

</sect2>

<sect2 role="installation">
<title>Installation de GCC</title>

<para>Déballez seulement l'archive tar gcc-core car ni le compilateur C++ ni la
suite de tests ne sont nécessaires pour l'instant.</para>

<para>Ce paquet est connu pour avoir des soucis quand les options d'optimisation
par défaut (en incluant les options <parameter>-march</parameter> et
<parameter>-mcpu</parameter>) sont modifiées. Donc, si des variables d'environnement
qui surchargent les optimisations par défaut, telles que <envar>CFLAGS</envar>
et <envar>CXXFLAGS</envar>, ont été définies, supprimez cette initialisation
pour la construction de GCC.</para>

<para>La documentation de GCC recommande de ne pas construire GCC dans le
répertoire des sources mais dans un répertoire de construction dédié&nbsp;:
</para>

<screen><userinput>mkdir ../gcc-build
cd ../gcc-build</userinput></screen>

<para>Préparez la compilation de GCC&nbsp;:</para>

<screen><userinput>../gcc-&gcc-version;/configure --prefix=/tools \
    --libexecdir=/tools/lib --with-local-prefix=/tools \
    --disable-nls --enable-shared --enable-languages=c</userinput></screen>

<para>Voici la signification des options de configure&nbsp;:</para>

<variablelist>
<varlistentry>
<term><parameter>--with-local-prefix=/tools</parameter></term>
<listitem><para>Le but de cette option est de supprimer <filename
class="directory">/usr/local/include</filename> du chemin de recherche des
fichiers include de <command>gcc</command>. Ce n'est pas absolument
essentiel&nbsp;; néanmoins, c'est une aide pour minimiser l'influence du
système hôte.</para>
<beginpage/>
</listitem>
</varlistentry>

<varlistentry>
<term><parameter>--enable-shared</parameter></term>
<listitem><para>Cette option peut ne pas sembler intuitive au début. Néanmoins,
en l'utilisant, elle permet la construction de <filename
class="libraryfile">libgcc_s.so.1</filename> et <filename
class="libraryfile">libgcc_eh.a</filename>, et disposer de <filename
class="libraryfile">libgcc_eh.a</filename> nous assure que le script configure
de Glibc (le prochain paquet à compiler) produira de bons résultats. Notez que
les binaires GCC seront toujours liés statiquement car ceci est contrôlé par la
valeur <parameter>-static</parameter> de <envar>BOOT_LDFLAGS</envar> lors de la
prochaine étape.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>--enable-languages=c</parameter></term>
<listitem><para>Cette option nous assure que seul le compilateur C sera
construit. Cette option n'est nécessaire que si vous avez téléchargé et déballé
l'archive tar GCC complète au lieu de la simple archive gcc-core.</para></listitem>
</varlistentry>
</variablelist>

<para>Continuez avec la compilation du paquet&nbsp;:</para>

<screen><userinput>make BOOT_LDFLAGS="-static" bootstrap</userinput></screen>

<para>Voici la signification des paramètres de make&nbsp;:</para>

<variablelist>
<varlistentry>
<term><parameter>BOOT_LDFLAGS="-static"</parameter></term>
<listitem><para>Ceci indique à GCC de lier ses programmes statiquement.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>bootstrap</parameter></term>
<listitem><para>Cette cible ne compile pas GCC une seule fois mais plusieurs
fois. Il utilise les programmes compilés dans le premier tour pour se compiler
une deuxième fois, puis une troisième fois. Il compare alors les deuxième et
troisième compilations pour s'assurer qu'il arrive à se reproduire lui-même
sans fautes, ce qui semble vouloir dire qu'il a été compilé correctement.
</para></listitem>
</varlistentry>
</variablelist>

<para>La compilation est maintenant terminée. À ce point, la suite de tests
devrait être lancée. Mais, comme nous l'avons dit plus tôt, l'ensemble de
travail de la suite de tests n'est pas encore en place. Les bénéfices à lancer
les tests maintenant seraient minimes car les programmes de la première passe
seront bientôt remplacés.</para>

<para>Installez le paquet&nbsp;:</para>

<screen><userinput>make install</userinput></screen>

<beginpage/>
<para>En touche finale, créez un lien symbolique. Beaucoup de programmes
et de scripts lancent <command>cc</command> au lieu de <command>gcc</command>,
ceci pour conserver des programmes génériques et donc utilisables sur tout type
de système Unix où le compilateur GNU C n'est pas toujours installé. Utiliser
<command>cc</command> permet de libérer l'administrateur système dans son choix
du compilateur C à installer.</para>

<screen><userinput>ln -s gcc /tools/bin/cc</userinput></screen>

</sect2>

<sect2 role="content"><title/>
<para>Les détails sur ce paquet sont disponibles dans <xref
linkend="contents-gcc" role="."/></para>
</sect2>

</sect1>
