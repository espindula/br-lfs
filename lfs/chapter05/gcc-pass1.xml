<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-gcc-pass1" role="wrap">
  <?dbhtml filename="gcc-pass1.html"?>

  <sect1info condition="script">
    <productname>gcc</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version; - Passe 1</title>

  <indexterm zone="ch-tools-gcc-pass1">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>outils, passe 1</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch5p1-sbu;</seg>
        <seg>&gcc-ch5p1-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Installation de GCC croisé</title>

    <para>GCC exige maintenant les paquets GMP, MPFR et MPC. Comme il se peut que
    ces paquets ne soient pas inclus dans votre distribution hôte, ils vont
    être compilés avec GCC. Déballez chaque paquet dans le répertoire du source
    de GCC et renommez les répertoires ainsi créés pour que les procédures de 
    construction de GCC les utilisent automatiquement&nbsp;:</para>

    <note><para>Beaucoup d'incompréhensions existent concernant ce chapitre. Les
    procédures sont les mêmes que celles des autres chapitres, comme expliqué plus haut (<xref
    linkend='buildinstr'/>). Extrayez d'abord l'archive tar de
    gcc du répertoire des sources puis rendez-vous dans le répertoire créé.
    C'est seulement là que vous devriez suivre les instructions ci-dessous.</para></note>

<screen><userinput remap="pre">tar -xf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar -xf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-extracted-version; gmp
tar -xf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para>La commande suivante modifiera l'emplacement de l'éditeur de liens
    dynamique par défaut de GCC pour utiliser celui installé dans <filename
    class="directory">/tools</filename>. Elle supprime aussi <filename
    class="directory">/usr/include</filename> du chemin de recherche include de GCC.
    Lancez&nbsp;:</para>

<screen><userinput remap="pre">for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file
  touch $file.orig
done</userinput></screen>

    <para>Au cas où ce qui précède vous semble compliqué à suivre, décortiquons-le un
    peu. On cherche tout d'abord tous les fichiers sous le répertoire <filename
    class="directory">gcc/config</filename> nommés soit 
    <filename>linux.h</filename>, <filename>linux64.h</filename> ou
    <filename>sysv4.h</filename>.  Pour chaque fichier trouvé, on le copie dans
    un fichier du même nom, mais avec en plus le suffixe <quote>.orig</quote>. 
    Puis la première expression sed envoie <quote>/tools</quote> dans toutes les 
    occurrences <quote>/lib/ld</quote>, <quote>/lib64/ld</quote> ou
    <quote>/lib32/ld</quote>, tandis que la deuxième remplace les lignes
    <quote>/usr</quote> codées en dur. Ensuite, nous ajoutons nos instructions
    define qui modifient le préfixe des startfiles par défaut à la fin du fichier.
    Notez que le suffixe <quote>/</quote> dans <quote>/tools/lib/</quote> est
    requis. Enfin, nous utilisons <command>touch</command> pour mettre à jour
    l'horodatage des fichiers copiés. Utilisé avec <command>cp -u</command>, 
    ceci empêche des modifications non prévues des fichiers originaux au cas où
    les commandes sont lancées deux fois par erreur.  </para>

    <para>GCC ne détecte pas bien la pile de protection, ce qui pose problème
    pour la construction de Glibc-&glibc-version;, corrigez donc cela en lançant
    la commande suivante&nbsp;:</para>

<screen><userinput remap="pre">sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure</userinput></screen>

    <para>La documentation de GCC recommande de ne pas construire GCC dans le
    répertoire des sources mais dans un répertoire de construction dédié&nbsp;:</para>

<screen><userinput remap="pre">mkdir -v ../gcc-build
cd ../gcc-build</userinput></screen>

    <para>Préparez la compilation de GCC&nbsp;:</para>

<screen><userinput remap="configure">../gcc-&gcc-version;/configure                               \
    --target=$LFS_TGT                                \
    --prefix=/tools                                  \
    --with-sysroot=$LFS                              \
    --with-newlib                                    \
    --without-headers                                \
    --with-local-prefix=/tools                       \
    --with-native-system-header-dir=/tools/include   \
    --disable-nls                                    \
    --disable-shared                                 \
    --disable-multilib                               \
    --disable-decimal-float                          \
    --disable-threads                                \
    --disable-libatomic                              \
    --disable-libgomp                                \
    --disable-libitm                                 \
    --disable-libquadmath                            \
    --disable-libsanitizer                           \
    --disable-libssp                                 \
    --disable-libvtv                                 \
    --disable-libcilkrts                             \
    --disable-libstdc++-v3                           \
    --enable-languages=c,c++</userinput></screen>

    <variablelist>
      <title>Voici la signification des options de configure&nbsp;:</title>

      <varlistentry>
        <term><parameter>--with-newlib</parameter></term>
        <listitem>
          <para>Vu qu'aucune bibliothèque C fonctionnelle n'est encore disponible,
          ceci garantit que la constante inhibit_libc soit définie lors de la 
          construction de libgcc. Cela empêche la compilation d'un code exigeant le support libc.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--without-headers</parameter></term>
        <listitem>
          <para>Lors de la compilation d'un compilateur croisé complet, GCC 
          exige des en-têtes standards compatibles avec le système cible. Pour
          nos objectifs, ces en-têtes ne seront pas nécessaires. Ce paramètre
          empêche GCC de les chercher.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-local-prefix=/tools</parameter></term>
        <listitem>
          <para>Le préfixe local est l'emplacement du système où GCC cherchera
          les fichiers include installés en local. Par défaut, c'est <filename>/usr/local</filename>.
          Définir ceci sur <filename>/tools</filename> aide à garder l'emplacement de l'hôte 
          <filename>/usr/local</filename> en-dehors du chemin de recherche de GCC.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-native-system-header-dir=/tools/include</parameter></term>
        <listitem>
          <para>Par défaut, GCC cherche les en-têtes du système dans
          <filename>/usr/include</filename>. Associé au paramètre sysroot, ceci
          ne serait pas traduit en <filename>$LFS/usr/include</filename>. Cependant,
          les en-têtes qui seront installées aux deux prochaines sections iront
          dans <filename>$LFS/tools/include</filename>. Ce paramètre garantit que
          gcc les trouvera correctement. Dans la deuxième passe de GCC, ce même
          paramètre garantira qu'aucune en-tête du système hôte ne soit trouvée.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>Ce paramètre oblige GCC à lier ses bibliothèques internes de
          manière statique. On procède ainsi pour éviter les problèmes avec
          le système hôte.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-decimal-float, --disable-threads,
        --disable-libatomic, --disable-libgomp, --disable-libitm,
        --disable-libmudflap, --disable-libquadmath, --disable-libsanitizer,
        --disable-libssp, --disable-libstdc++-v3</parameter></term>
        <listitem>
          <para>Ces paramètres désactivent le support de l'extension des virgules
          flottantes décimales, de threading, libatomic, libgomp, libitm, libmudflap,
          libquadmath, libsanitizer, libssp et la bibliothèque standard C++.
          Ces fonctionnalités ne parviendront pas à se compiler lors de la construction d'un
          compilateur croisé et elles ne sont pas nécessaires pour la tâche de
          compilation croisée de la libc temporaire.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-multilib</parameter></term>
        <listitem>
          <para>Sur du x86_64, LFS ne supporte pas encore une configuration
          multilib (plusieurs bibliothèques). Ce paramètre n'a pas
          d'importance pour x86.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c,c++</parameter></term>
        <listitem>
          <para>Cette option nous assure que seul les compilateurs C et C++ seront
          construits. Ce sont les seuls langages actuellement nécessaires.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Compilez GCC en lançant&nbsp;:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>La compilation est maintenant terminée. À ce point, la suite de tests
    devrait être lancée. Mais, comme nous l'avons dit plus tôt, l'ensemble de
    travail de la suite de tests n'est pas encore en place. Les bénéfices à lancer
    les tests maintenant seraient minimes car les programmes de la première passe
    seront bientôt remplacés.</para>

    <para>Installez le paquet&nbsp;:</para>

<screen><userinput remap="install">make install</userinput></screen>

<!--    <para>L'utilisation de <parameter>- -disable-shared</parameter> signifie
    que le fichier <filename>libgcc_eh.a</filename> n'est pas créé et installé.
    Le paquet Glibc dépend de cette bibliothèque puisqu'il utilise
    <parameter>-lgcc_eh</parameter> à l'intérieur de son système de construction.
    On peut satisfaire cette dépendance en créant un lien symbolique vers
    <filename>libgcc.a</filename>, puisque ce fichier va finir par contenir les
    objets normalement contenus dans
    <filename>libgcc_eh.a</filename>:</para>

<screen><userinput remap="install">ln -sv libgcc.a `$LFS_TGT-gcc -print-libgcc-file-name | sed 's/libgcc/&amp;_eh/'`</userinput></screen>
-->
  </sect2>

  <sect2 role="content">
    <title/>

    <para>Les détails sur ce paquet sont disponibles dans
    <xref linkend="contents-gcc" role="."/></para>

  </sect2>

</sect1>
