<sect1 id="ch06-binutils">
<title>Installer Binutils-&binutils-version;</title>
<?dbhtml filename="binutils.html" dir="chapter06"?>

<screen>Estimation du temps de compilation :           &binutils-time;
Estimation de l'espace disque requis :  &binutils-compsize;</screen>

&aa-binutils-shortdesc;
&aa-binutils-dep;

<sect2><title>&nbsp;</title><para>&nbsp;</para></sect2>

<sect2><title>Installation de Binutils</title>

<para>C'est le bon moment pour vérifier que vos pseudo-terminaux (PTY)
fonctionnent correctement dans l'environnement chroot. Nous allons encore
rapidement vérifier que tout est bien configuré en réalisant un simple
test&nbsp;:</para>

<screen><userinput>expect -c "spawn ls"</userinput></screen>

<para>Si vous recevez le message&nbsp;:</para>

<blockquote><screen>The system has no more ptys.  Ask your system administrator to create more.</screen></blockquote>

<para>Votre environnement chroot n'est pas correctement configuré pour les PTY.
Dans ce cas, il n'y a aucune raison pour lancer les suites de tests pour
Binutils et GCC jusqu'à la résolution de ce problème. Merci de vous référer à
<xref linkend="ch06-proc"/> et <xref linkend="ch06-makedev"/>, et de réaliser
les étapes recommandées pour corriger le problème.</para>

<note><para>La suite de tests pour Binutils dans cette section est considérée
<emphasis>critique</emphasis>. Notre conseil est de faire à tout prix ces tests.
</para> </note>

<para>Ce package est connu pour mal se comporter si vous changez les options
d'optimisation par défaut (en incluant les options -march et -mcpu). Donc, si
vous avez défini des variables d'environnement qui surchargent les optimisations
pas défaut, telles que CFLAGS et CXXFLAGS, nous vous recommandons de supprimer
cette initialisation lors de la construction de Binutils.</para>

<para>La documentation de Binutils recommande de construire Binutils en dehors
du répertoire des sources, c'est-à-dire dans un répertoire de construction
dédié&nbsp;:</para>

<screen><userinput>mkdir ../binutils-build
cd ../binutils-build</userinput></screen>

<para>Maintenant, préparez la compilation de Binutils&nbsp;:</para>

<screen><userinput>../binutils-&binutils-version;/configure \
&nbsp;&nbsp;&nbsp;&nbsp;--prefix=/usr --enable-shared</userinput></screen>

<para>Compilez le package&nbsp;:</para>

<screen><userinput>make tooldir=/usr</userinput></screen>

<para>Normalement, <emphasis>tooldir</emphasis> (le répertoire où se trouveront
les exécutables) est initialisé à $(exec_prefix)/$(target_alias), ce qui sera
compris comme, par exemple, <filename>/usr/i686-pc-linux-gnu</filename>. Comme
nous ne construisons que notre propre système, nous n'avons pas besoin d'un
répertoire spécifique à une cible dans <filename>/usr</filename>. Cette
configuration serait utilisée si le système était utilisé pour faire de la
cross-compilation (par exemple pour compiler un package sur une machine Intel en
générant du code exécutable sur des machines à base de PowerPC).</para>

<para>Testez le resultat&nbsp;:</para>

<screen><userinput>make check</userinput></screen>

<para>Les notes de la suite de tests données lors du
<xref linkend="ch05-binutils-pass2"/> sont toujours appropriées ici.
Assurez-vous de vous y référer si vous avez un quelconque doute.</para>

<para>Installez le package&nbsp;:</para>

<screen><userinput>make tooldir=/usr install</userinput></screen>

<para>Installez le fichier d'en-tête <emphasis>libiberty</emphasis> nécessaire à
certains packages:</para>

<screen><userinput>cp ../binutils-&binutils-version;/include/libiberty.h /usr/include</userinput></screen>

</sect2>

</sect1>
