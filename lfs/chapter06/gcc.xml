<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-system-gcc" xreflabel="GCC">
<title>GCC-&gcc-version;</title>
<?dbhtml filename="gcc.html"?>

<indexterm zone="ch-system-gcc"><primary sortas="a-GCC">GCC</primary></indexterm>

<para>The GCC package contains the GNU compiler collection, which includes
the C and C++ compilers.</para>

<screen>&buildtime; 11.7 SBU
&diskspace; 294 MB</screen>

<para>GCC installation depends on: Bash, Binutils, Coreutils, Diffutils, Findutils,
Gawk, Gettext, Glibc, Grep, Make, Perl, Sed, Texinfo.</para>



<sect2>
<title>Installation of GCC</title>

<para>This package is known to behave badly when you have changed its
default optimization flags (including the -march and -mcpu options).
Therefore, if you have defined any environment variables that override
default optimizations, such as CFLAGS and CXXFLAGS, we recommend un-setting
or modifying them when building GCC.</para>

<para>Unpack the GCC-core <emphasis>and</emphasis> the GCC-g++ tarball -- they
will unfold into the same directory. You should likewise extract the
GCC-testsuite package. The full GCC package contains even more
compilers. Instructions for building these can be found at
<ulink url="&blfs-root;view/stable/general/gcc.html"/>.</para>

<para>First apply only the No-Fixincludes patch (and <emphasis>not</emphasis>
the Specs patch) also used in the previous chapter:</para>

<screen><userinput>patch -Np1 -i ../gcc-&gcc-version;-no_fixincludes-1.patch</userinput></screen>

<para>Now apply a sed substitution that will suppress the installation of
<filename>libiberty.a</filename>. We want to use the version of
<filename>libiberty.a</filename> provided by Binutils:</para>

<screen><userinput>sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in</userinput></screen>

<para>The GCC documentation recommends building GCC outside of the source
directory in a dedicated build directory:</para>

<screen><userinput>mkdir ../gcc-build
cd ../gcc-build</userinput></screen>

<para>Now prepare GCC for compilation:</para>

<screen><userinput>../gcc-&gcc-version;/configure --prefix=/usr \
    --enable-shared --enable-threads=posix \
    --enable-__cxa_atexit --enable-clocale=gnu \
    --enable-languages=c,c++</userinput></screen>

<para>Compile the package:</para>

<screen><userinput>make</userinput></screen>

<important><para>The test suite for GCC in this section is considered
<emphasis>critical</emphasis>. Our advice is to not skip it under any
circumstance.</para></important>

<para>Test the results, but don't stop at errors (you'll remember the few
known ones):</para>

<screen><userinput>make -k check</userinput></screen>

<para>The test suite notes from <xref linkend="ch-tools-gcc-pass2"/> are still very
much appropriate here. Be sure to refer back there should you have any
doubts.</para>

<para>Now install the package:</para>

<screen><userinput>make install</userinput></screen>

<para>Some packages expect the C PreProcessor to be installed in the
<filename>/lib</filename> directory.
To support those packages, create this symlink:</para>

<screen><userinput>ln -s ../usr/bin/cpp /lib</userinput></screen>

<para>Many packages use the name <command>cc</command> to call the C
compiler. To satisfy those packages, create a symlink:</para>

<screen><userinput>ln -s gcc /usr/bin/cc</userinput></screen>

<note><para>At this point it is strongly recommended to repeat the sanity check
we performed earlier in this chapter. Refer back to
<xref linkend="ch-system-readjusting"/> and repeat the check. If the results
are wrong, then most likely you erroneously applied the GCC Specs patch from
<xref linkend="chapter-temporary-tools"/>.</para></note>

</sect2>


<sect2 id="contents-gcc"><title>Contents of GCC</title>

<para><emphasis>Installed programs</emphasis>: c++, cc (link to gcc),
cc1, cc1plus, collect2, cpp, g++, gcc, gccbug, and gcov</para>

<para><emphasis>Installed libraries</emphasis>: libgcc.a, libgcc_eh.a,
libgcc_s.so, libstdc++.[a,so] and libsupc++.a</para>

</sect2>


<sect2><title>Short descriptions</title>

<indexterm zone="ch-system-gcc cpp"><primary sortas="b-cpp">cpp</primary></indexterm>
<para id="cpp"><command>cpp</command> is the C preprocessor. It is used by the
compiler to have the #include and #define and such statements expanded in
the source files.</para>

<indexterm zone="ch-system-gcc g"><primary sortas="b-g++">g++</primary></indexterm>
<para id="g"><command>g++</command> is the C++ compiler.</para>

<indexterm zone="ch-system-gcc gcc"><primary sortas="b-gcc">gcc</primary></indexterm>
<para id="gcc"><command>gcc</command> is the C compiler. It is used to translate
the source code of a program into assembly code.</para>

<indexterm zone="ch-system-gcc gccbug"><primary sortas="b-gccbug">gccbug</primary></indexterm>
<para id="gccbug"><command>gccbug</command> is a shell script used to help create
good bug reports.</para>

<indexterm zone="ch-system-gcc gcov"><primary sortas="b-gcov">gcov</primary></indexterm>
<para id="gcov"><command>gcov</command> is a coverage testing tool. It is used to
analyze programs to find out where optimizations will have the most effect.</para>

<indexterm zone="ch-system-gcc libgcc"><primary sortas="c-libgcc*">libgcc*</primary></indexterm>
<para id="libgcc"><command>libgcc*</command> contains run-time support for gcc.</para>

<indexterm zone="ch-system-gcc libstdc"><primary sortas="c-libstdc++">libstdc++</primary></indexterm>
<para id="libstdc"><command>libstdc++</command> is the standard C++ library. It contains
many frequently-used functions.</para>

<indexterm zone="ch-system-gcc libsupc"><primary sortas="c-libsupc++">libsupc++</primary></indexterm>
<para id="libsupc"><command>libsupc++</command> provides supporting routines
for the c++ programming language.</para>

</sect2>



</sect1>
