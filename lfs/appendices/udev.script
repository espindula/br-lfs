#!/bin/sh
########################################################################
# Begin $rc_base/init.d/udev
#
# Description : Udev cold-plugging script
#
# Authors     : Zack Winkles, Alexander E. Patrakov
#
# Version     : 00.02
#
# Notes       :
#
########################################################################

. /etc/sysconfig/rc
. ${rc_functions}

case &quot;${1}&quot; in
    start)
        boot_mesg &quot;Populating /dev with device nodes...&quot;
        if ! grep -q &apos;[[:space:]]sysfs&apos; /proc/mounts; then
            echo_failure
            boot_mesg -n &quot;FAILURE:\n\nUnable to create&quot; ${FAILURE}
            boot_mesg -n &quot; devices without a SysFS filesystem&quot;
            boot_mesg -n &quot;\n\nAfter you press Enter, this system&quot;
            boot_mesg -n &quot; will be halted and powered off.&quot;
            boot_mesg -n &quot;\n\nPress Enter to continue...&quot; ${INFO}
            boot_mesg &quot;&quot; ${NORMAL}
            read ENTER
            /etc/rc.d/init.d/halt stop
        fi

        # Mount a temporary file system over /dev, so that any devices
        # made or removed during this boot don&apos;t affect the next one.
        # The reason we don&apos;t write to mtab is because we don&apos;t ever
        # want /dev to be unavailable (such as by `umount -a&apos;).
        mount -n -t tmpfs tmpfs /dev -o mode=755
        if [ ${?} != 0 ]; then
            echo_failure
            boot_mesg -n &quot;FAILURE:\n\nCannot mount a tmpfs&quot; ${FAILURE}
            boot_mesg -n &quot; onto /dev, this system will be halted.&quot;
            boot_mesg -n &quot;\n\nAfter you press Enter, this system&quot;
            boot_mesg -n &quot; will be halted and powered off.&quot;
            boot_mesg -n &quot;\n\nPress Enter to continue...&quot; ${INFO}
            boot_mesg &quot;&quot; ${NORMAL}
            read ENTER
            /etc/rc.d/init.d/halt stop
        fi

        # Udev handles uevents itself, so we don&apos;t need to have
        # the kernel call out to any binary in response to them
        echo &gt; /proc/sys/kernel/hotplug

        # Copy static device nodes to /dev
        cp -a /lib/udev/devices/* /dev

        # Start the udev daemon to continually watch for, and act on,
        # uevents
        /sbin/udevd --daemon

        # Now traverse /sys in order to &quot;coldplug&quot; devices that have
        # already been discovered
        /sbin/udevadm trigger

        # Now wait for udevd to process the uevents we triggered
        /sbin/udevadm settle
        evaluate_retval

        ;;

    *)
        echo &quot;Usage ${0} {start}&quot;
        exit 1
        ;;
esac

# End $rc_base/init.d/udev
