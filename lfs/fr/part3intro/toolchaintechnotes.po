msgid ""
msgstr ""
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-22 21:07+0100\n"
"PO-Revision-Date: 2023-01-30 16:52+0100\n"
"Last-Translator: roptat <julien@lepiller.eu>\n"
"Language-Team: \n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Generator: Poedit 3.2.2\n"
"X-Pootle-Path: /fr/lfs/part3intro/toolchaintechnotes.po\n"
"X-Pootle-Revision: 9443\n"
"X-POOTLE-MTIME: 1671002980.141522\n"

#. type: Content of: <sect1><title>
#: lfs-en/part3intro/toolchaintechnotes.xml:8 lfs-en/part3intro/toolchaintechnotes.xml:11
msgid "Toolchain Technical Notes"
msgstr "Remarques techniques sur la chaîne de compilation"

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:13
msgid ""
"This section explains some of the rationale and technical details behind the overall "
"build method. Don't try to immediately understand everything in this section. Most of "
"this information will be clearer after performing an actual build. Come back and re-"
"read this chapter at any time during the build process."
msgstr ""
"Cette section explique certains détails logiques et techniques de la méthode de "
"construction. Il n'est pas essentiel de tout comprendre immédiatement. La plupart de "
"ces informations seront plus claires une fois votre première construction complète "
"terminée. Cette section peut servir de référence à tout moment lors du processus de "
"construction."

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:19
msgid ""
"The overall goal of <xref linkend=\"chapter-cross-tools\"/> and <xref linkend=\"chapter-"
"temporary-tools\"/> is to produce a temporary area containing a set of tools that are "
"known to be good, and that are isolated from the host system.  By using the "
"<command>chroot</command> command, the compilations in the remaining chapters will be "
"isolated within that environment, ensuring a clean, trouble-free build of the target "
"LFS system. The build process has been designed to minimize the risks for new readers, "
"and to provide the most educational value at the same time."
msgstr ""
"Le but global du <xref linkend=\"chapter-cross-tools\"/> et du <xref linkend=\"chapter-"
"temporary-tools\"/> est de générer un espace temporaire comportant un ensemble d'outils "
"connus et approuvés, qui sont isolés du système hôte. En utilisant la commande "
"<command>chroot</command>, les compilations réalisées dans le reste des chapitres se "
"cantonneront à cet environnement, en assurant une construction du système LFS cible "
"propre et sans faille. Le processus de construction a été conçu pour minimiser les "
"risques auprès des nouveaux lecteurs et pour fournir une valeur éducative maximale."

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:28
msgid ""
"This build process is based on <emphasis>cross-compilation</emphasis>. Cross-"
"compilation is normally used to build a compiler and its associated toolchain for a "
"machine different from the one that is used for the build. This is not strictly "
"necessary for LFS, since the machine where the new system will run is the same as the "
"one used for the build. But cross-compilation has one great advantage: anything that is "
"cross-compiled cannot depend on the host environment."
msgstr ""
"Le processus de construction se base sur la <emphasis>compilation croisée</emphasis>. "
"La compilation croisée est normalement utilisée pour construire un compilateur ainsi "
"que sa chaîne de compilation sur une machine différente de celle utilisée pour la "
"construction. Ce n’est pas nécessaire pour LFS, puisque la machine sur laquelle le "
"nouveau système est construit est la même que celle utilisée pour la construction. Mais "
"le grand avantage de la compilation croisée, c’est que tout ce qui est compilé est "
"indépendant de l'environnement hôte."

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml:36 lfs-en/part3intro/toolchaintechnotes.xml:38
msgid "About Cross-Compilation"
msgstr "À propos de la compilation croisée"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:42
#| msgid ""
#| "The LFS book is not (and does not contain) a general tutorial to build a cross (or "
#| "native) toolchain. Don't use the commands in the book for a cross toolchain for some "
#| "purpose other than building LFS, unless you really understand what you are doing."
msgid ""
"The LFS book is not (and does not contain) a general tutorial to build a cross- (or "
"native) toolchain. Don't use the commands in the book for a cross-toolchain for some "
"purpose other than building LFS, unless you really understand what you are doing."
msgstr ""
"Le livre LFS n'est pas (et ne contient pas) un tutoriel générique sur la construction "
"d'une chaîne de compilation croisée (ou native). N'utilisez pas les commandes de ce "
"livre pour construire une chaîne de compilation croisée autre que celle utilisée pour "
"LFS, à moins de vraiment comprendre ce que vous faites."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:49
msgid ""
"Cross-compilation involves some concepts that deserve a section of their own. Although "
"this section may be omitted on a first reading, coming back to it later will help you "
"gain a fuller understanding of the process."
msgstr ""
"La compilation croisée utilise certains concepts qui mériteraient une section à part. "
"Même si vous pouvez passer cette section lors de votre première lecture, nous vous "
"recommandons fortement d'y revenir plus tard pour bien comprendre le processus de "
"construction."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:54
msgid "Let us first define some terms used in this context."
msgstr "Définissons d'abord certains termes utilisés dans ce contexte&nbsp;:"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml:57
msgid "The build"
msgstr "La construction (build)"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:58
msgid ""
"is the machine where we build programs. Note that this machine is also referred to as "
"the <quote>host</quote>."
msgstr ""
"est la machine où nous construisons les programmes. Cette machine est appelée "
"<quote>hôte</quote> dans les autres sections."

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml:62
msgid "The host"
msgstr "L’hôte (host)"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:63
msgid ""
"is the machine/system where the built programs will run. Note that this use of "
"<quote>host</quote> is not the same as in other sections."
msgstr ""
"est la machine ou le système où les programmes seront lancés. Le terme <quote>hôte</"
"quote> n’a pas la même définition dans les autres sections."

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml:68
msgid "The target"
msgstr "La cible (target)"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:69
msgid ""
"is only used for compilers. It is the machine the compiler produces code for. It may be "
"different from both the build and the host."
msgstr ""
"est seulement utilisée pour les compilateurs. C'est la machine pour laquelle le "
"compilateur produit du code. Elle peut être différente de l’hôte et de la construction."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:76
#| msgid ""
#| "As an example, let us imagine the following scenario (sometimes referred to as "
#| "<quote>Canadian Cross</quote>): we have a compiler on a slow machine only, let's "
#| "call it machine A, and the compiler ccA. We also have a fast machine (B), but no "
#| "compiler for (B), and we want to produce code for a third, slow machine (C). We will "
#| "build a compiler for machine C in three stages."
msgid ""
"As an example, let us imagine the following scenario (sometimes referred to as "
"<quote>Canadian Cross</quote>). We have a compiler on a slow machine only, let's call "
"it machine A, and the compiler ccA. We also have a fast machine (B), but no compiler "
"for (B), and we want to produce code for a third, slow machine (C). We will build a "
"compiler for machine C in three stages."
msgstr ""
"Par exemple, imaginons le scénario suivant (parfois appelé <quote>Canadian Cross</"
"quote>)&nbsp;: nous avons un compilateur sur une machine lente, que nous appellerons A, "
"et le compilateur ccA. Nous avons également une machine rapide (B), mais aucun "
"compilateur pour (B). Nous voulons produire du code pour une troisième machine, lente "
"cette fois (C). Il y a trois étapes à suivre pour construire un compilateur destiné à "
"la machine C&nbsp;:"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:91
#: lfs-en/part3intro/toolchaintechnotes.xml:125
#: lfs-en/part3intro/toolchaintechnotes.xml:217
msgid "Stage"
msgstr "Étape"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:91
#: lfs-en/part3intro/toolchaintechnotes.xml:125
#: lfs-en/part3intro/toolchaintechnotes.xml:217
msgid "Build"
msgstr "Construction"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:91
#: lfs-en/part3intro/toolchaintechnotes.xml:125
#: lfs-en/part3intro/toolchaintechnotes.xml:217
msgid "Host"
msgstr "Hôte"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:92
#: lfs-en/part3intro/toolchaintechnotes.xml:126
#: lfs-en/part3intro/toolchaintechnotes.xml:218
msgid "Target"
msgstr "Cible"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:92
#: lfs-en/part3intro/toolchaintechnotes.xml:126
#: lfs-en/part3intro/toolchaintechnotes.xml:218
msgid "Action"
msgstr "Action"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:96
#: lfs-en/part3intro/toolchaintechnotes.xml:222
msgid "1"
msgstr "1"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:96
#: lfs-en/part3intro/toolchaintechnotes.xml:100
msgid "A"
msgstr "A"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:96
#: lfs-en/part3intro/toolchaintechnotes.xml:100
#: lfs-en/part3intro/toolchaintechnotes.xml:104
msgid "B"
msgstr "B"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:97
msgid "Build cross-compiler cc1 using ccA on machine A."
msgstr "Construire un compilateur croisé cc1 avec ccA sur la machine A."

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:100
#: lfs-en/part3intro/toolchaintechnotes.xml:226
msgid "2"
msgstr "2"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:100
#: lfs-en/part3intro/toolchaintechnotes.xml:104
#: lfs-en/part3intro/toolchaintechnotes.xml:130
msgid "C"
msgstr "C"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:101
msgid "Build cross-compiler cc2 using cc1 on machine A."
msgstr "Construire un compilateur croisé cc2 avec cc1 sur la machine A."

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:104
#: lfs-en/part3intro/toolchaintechnotes.xml:230
msgid "3"
msgstr "3"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:105
msgid "Build compiler ccC using cc2 on machine B."
msgstr "Construire le compilateur ccC avec cc2 sur la machine B."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:111
msgid ""
"Then, all the programs needed by machine C can be compiled using cc2 on the fast "
"machine B. Note that unless B can run programs produced for C, there is no way to test "
"the newly built programs until machine C itself is running. For example, to run a test "
"suite on ccC, we may want to add a fourth stage:"
msgstr ""
"Ensuite, tous les programmes requis par la machine C peuvent être compilés avec cc2 sur "
"la machine rapide B. À moins que B ne puisse lancer les programmes produits pour C, il "
"n'existe aucun moyen de tester les nouveaux programmes construits avant de les lancer "
"sur la machine C. Par exemple, pour tester ccC, nous pouvons ajouter une quatrième "
"étape&nbsp;:"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:130
msgid "4"
msgstr "4"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:131
msgid "Rebuild and test ccC using ccC on machine C."
msgstr "Reconstruire et tester ccC avec lui-même sur la machine C."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:137
msgid ""
"In the example above, only cc1 and cc2 are cross-compilers, that is, they produce code "
"for a machine different from the one they are run on.  The other compilers ccA and ccC "
"produce code for the machine they are run on. Such compilers are called "
"<emphasis>native</emphasis> compilers."
msgstr ""
"Dans l'exemple ci-dessus, seuls cc1 et cc2 sont des compilateurs croisés, c'est-à-dire "
"qu'ils produisent du code pour une machine différente de celle sur laquelle ils "
"tournent. Les autres compilateurs ccA et ccC produisent du code pour la machine sur "
"laquelle ils tournent. Ces compilateurs sont appelés compilateurs <emphasis>natifs</"
"emphasis>."

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml:145
msgid "Implementation of Cross-Compilation for LFS"
msgstr "Implémentation de la compilation croisée dans LFS"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:148
msgid ""
"All the cross-compiled packages in this book use an autoconf-based building system.  "
"The autoconf-based building system accepts system types in the form cpu-vendor-kernel-"
"os, referred to as the system triplet.  Since the vendor field is often irrelevant, "
"autoconf lets you omit it."
msgstr ""
"Tous les paquets compilés de manière croisée dans ce livre utilisent un système de "
"construction basé sur autoconf. Le système de construction basé sur autoconf accepte "
"des types de systèmes de la forme cpu-fabriquant-noyau-os, nommés triplets systèmes. "
"Comme le champ fabriquant est souvent inutile, autoconf vous autorise à ne pas le "
"renseigner."

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:154
msgid ""
"An astute reader may wonder why a <quote>triplet</quote> refers to a four component "
"name. The kernel field and the os field began as a single <quote>system</quote> field.  "
"Such a three-field form is still valid today for some systems, for example, "
"<literal>x86_64-unknown-freebsd</literal>.  But two systems can share the same kernel "
"and still be too different to use the same triplet to describe them.  For example, "
"Android running on a mobile phone is completely different from Ubuntu running on an "
"ARM64 server, even though they are both running on the same type of CPU (ARM64) and "
"using the same kernel (Linux)."
msgstr ""
"Le lecteur attentif se demandera pourquoi un <quote>triplet</quote> désigne un nom à "
"quatre composantes. Le champ du noyau et de l'os ont d'abord commencé comme un seul "
"champ <quote>système</quote>. Cette forme à trois champs est toujours valide de nos "
"jours pour certains systèmes, par exemple <literal>x86_64-unknown-freebsd</literal>. "
"Mais deux systèmes peuvent partager le même noyau et être trop différents pour utiliser "
"le même triplet pour les désigner. Par exemple Android qui tourne sur les téléphones "
"est complètement différent d'Ubuntu sur un serveur ARM64, même s'ils utilisent tous les "
"deux le même type de CPU (ARM64) et utilisent le même noyau (Linux)."

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:166
msgid ""
"Without an emulation layer, you cannot run an executable for a server on a mobile phone "
"or vice versa.  So the <quote>system</quote> field has been divided into kernel and os "
"fields, to designate these systems unambiguously.  In our example, the Android system "
"is designated <literal>aarch64-unknown-linux-android</literal>, and the Ubuntu system "
"is designated <literal>aarch64-unknown-linux-gnu</literal>."
msgstr ""
"Sans une couche d'émulation, vous ne pouvez pas lancer un exécutable pour un serveur "
"sur un téléphone portable et vice-versa. Donc le champ <quote>système</quote> a été "
"divisé en les champs noyau et os, pour désigner trois systèmes sans ambiguïté. Dans "
"notre exemple, le système Android est appelé <literal>aarch64-unknown-linux-android</"
"literal> et le système Ubuntu est appelé <literal>aarch64-unknown-linux-gnu</literal>."

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:174
msgid ""
"The word <quote>triplet</quote> remains embedded in the lexicon. A simple way to "
"determine your system triplet is to run the <command>config.guess</command> script that "
"comes with the source for many packages. Unpack the binutils sources, run the script "
"<userinput>./config.guess</userinput>, and note the output. For example, for a 32-bit "
"Intel processor the output will be <emphasis>i686-pc-linux-gnu</emphasis>. On a 64-bit "
"system it will be <emphasis>x86_64-pc-linux-gnu</emphasis>. On most Linux systems the "
"even simpler <command>gcc -dumpmachine</command> command will give you similar "
"information."
msgstr ""
"Le mot <quote>triplet</quote> reste ancré dans le vocabulaire informatique. Pour "
"déterminer simplement votre triplet système, vous pouvez lancer le script "
"<command>config.guess</command> fournit avec les sources de nombreux paquets. "
"Désarchivez les sources de binutils, lancez le script <userinput>./config.guess</"
"userinput>, et notez la sortie. Par exemple pour un processeur Intel 32&nbsp;bits la "
"sortie sera <emphasis>i686-pc-linux-gnu</emphasis>. Sur un système 64&nbsp;bits elle "
"sera <emphasis>x86_64-pc-linux-gnu</emphasis>. Sur la plupart des systèmes Linux la "
"commande encore plus simple <command>gcc -dumpmachine</command> vous donner cette "
"information."

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:184
msgid ""
"You should also be aware of the name of the platform's dynamic linker, often referred "
"to as the dynamic loader (not to be confused with the standard linker <command>ld</"
"command> that is part of binutils). The dynamic linker provided by package glibc finds "
"and loads the shared libraries needed by a program, prepares the program to run, and "
"then runs it. The name of the dynamic linker for a 32-bit Intel machine is <filename "
"class=\"libraryfile\">ld-linux.so.2</filename>; it's <filename class=\"libraryfile\">ld-"
"linux-x86-64.so.2</filename> on 64-bit systems. A sure-fire way to determine the name "
"of the dynamic linker is to inspect a random binary from the host system by running: "
"<userinput>readelf -l &lt;name of binary&gt; | grep interpreter</userinput> and noting "
"the output. The authoritative reference covering all platforms is in the "
"<filename>shlib-versions</filename> file in the root of the glibc source tree."
msgstr ""
"Faites également attention au nom de l'éditeur de liens dynamiques de la plateforme, "
"souvent appelé chargeur dynamique (à ne pas confondre avec l'éditeur de liens standard "
"<command>ld</command> qui fait partie de binutils).Le chargeur dynamique fourni par "
"glibc trouve et charge les bibliothèques partagées nécessaires à l’exécution d’un "
"programme, prépare le programme, puis l'exécute.Le nom du chargeur dynamique pour une "
"machine Intel 32&nbsp;bits sera <filename class=\"libraryfile\">ld-linux.so.2</"
"filename> (<filename class=\"libraryfile\">ld-linux-x86-64.so.2</filename> pour les "
"systèmes 64&nbsp;bits).Pour déterminer le nom du chargeur dynamique, inspectez un "
"binaire au hasard sur le système hôte en exécutant&nbsp;: <userinput>readelf -l &lt;nom "
"du binaire&gt; | grep interpreter</userinput> et récupérez le résultat.La référence "
"officielle qui couvre toutes les plateformes se trouve dans le fichier <filename>shlib-"
"versions</filename>, à la racine de l’arborescence des sources de glibc."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:200
#| msgid ""
#| "In order to fake a cross compilation in LFS, the name of the host triplet is "
#| "slightly adjusted by changing the &quot;vendor&quot; field in the <envar>LFS_TGT</"
#| "envar> variable so it says &quot;lfs&quot;. We also use the <parameter>--with-"
#| "sysroot</parameter> option when building the cross linker and cross compiler to tell "
#| "them where to find the needed host files. This ensures that none of the other "
#| "programs built in <xref linkend=\"chapter-temporary-tools\"/> can link to libraries "
#| "on the build machine. Only two stages are mandatory, plus one more for tests."
msgid ""
"In order to fake a cross-compilation in LFS, the name of the host triplet is slightly "
"adjusted by changing the &quot;vendor&quot; field in the <envar>LFS_TGT</envar> "
"variable so it says &quot;lfs&quot;. We also use the <parameter>--with-sysroot</"
"parameter> option when building the cross-linker and cross-compiler, to tell them where "
"to find the needed host files. This ensures that none of the other programs built in "
"<xref linkend=\"chapter-temporary-tools\"/> can link to libraries on the build machine. "
"Only two stages are mandatory, plus one more for tests."
msgstr ""
"Pour simuler une compilation croisée dans LFS, le nom du triplet hôte est légèrement "
"modifié en changeant le champ «&nbsp;fabriquant&nbsp;» dans la variable d’environnement "
"<envar>LFS_TGT</envar> pour qu’il indique «&nbsp;lfs&nbsp;. Nous utilisons également "
"l'option <parameter>--with-sysroot</parameter> lors de la construction de l'éditeur de "
"liens et du compilateur croisés pour leur indiquer l’emplacement des fichiers hôte "
"requis. Cette option permet de s’assurer qu'aucun autre programme construit dans le "
"<xref linkend=\"chapter-temporary-tools\"/> ne peut s’associer aux bibliothèques sur la "
"machine de construction.Seules deux étapes sont obligatoires, en plus d’une étape "
"supplémentaire destinée aux tests&nbsp;:"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:222
#: lfs-en/part3intro/toolchaintechnotes.xml:226
msgid "pc"
msgstr "pc"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:222
#: lfs-en/part3intro/toolchaintechnotes.xml:226
#: lfs-en/part3intro/toolchaintechnotes.xml:230
msgid "lfs"
msgstr "lfs"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:223
msgid "Build cross-compiler cc1 using cc-pc on pc."
msgstr "Construire un compilateur croisé cc1 avec cc-pc sur pc."

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:227
msgid "Build compiler cc-lfs using cc1 on pc."
msgstr "Construire un compilateur cc-lfs avec cc1 sur pc."

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:231
msgid "Rebuild and test cc-lfs using cc-lfs on lfs."
msgstr "Reconstruire et tester cc-lfs avec lui-même sur lfs."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:237
msgid ""
"In the preceding table, <quote>on pc</quote> means the commands are run on a machine "
"using the already installed distribution. <quote>On lfs</quote> means the commands are "
"run in a chrooted environment."
msgstr ""
"Dans le tableau précédent, <quote>sur pc</quote> signifie que les commandes sont "
"exécutées sur une machine qui utilise la distribution déjà installée.<quote>Sur lfs</"
"quote> signifie que les commandes sont exécutées dans un environnement chroot."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:241
#| msgid ""
#| "Now, there is more about cross-compiling: the C language is not just a compiler, but "
#| "also defines a standard library. In this book, the GNU C library, named glibc, is "
#| "used (there is an alternative, &quot;musl&quot;). This library must be compiled for "
#| "the LFS machine; that is, using the cross compiler cc1.  But the compiler itself "
#| "uses an internal library implementing complex subroutines for functions not "
#| "available in the assembler instruction set. This internal library is named libgcc, "
#| "and it must be linked to the glibc library to be fully functional! Furthermore, the "
#| "standard library for C++ (libstdc++) must also be linked with glibc. The solution to "
#| "this chicken and egg problem is first to build a degraded cc1-based libgcc, lacking "
#| "some functionalities such as threads and exception handling, and then to build glibc "
#| "using this degraded compiler (glibc itself is not degraded), and also to build "
#| "libstdc++. This last library will lack some of the functionality of libgcc."
msgid ""
"This is not yet the end of the story. The C language is not merely a compiler; it also "
"defines a standard library. In this book, the GNU C library, named glibc, is used "
"(there is an alternative, &quot;musl&quot;). This library must be compiled for the LFS "
"machine; that is, using the cross-compiler cc1.  But the compiler itself uses an "
"internal library providing complex subroutines for functions not available in the "
"assembler instruction set. This internal library is named libgcc, and it must be linked "
"to the glibc library to be fully functional. Furthermore, the standard library for C++ "
"(libstdc++) must also be linked with glibc. The solution to this chicken and egg "
"problem is first to build a degraded cc1-based libgcc, lacking some functionalities "
"such as threads and exception handling, and then to build glibc using this degraded "
"compiler (glibc itself is not degraded), and also to build libstdc++. This last library "
"will lack some of the functionality of libgcc."
msgstr ""
"Ce n'est pas la fin de l'histoire. Le langage C n'est pas seulement un compilateur, "
"mais il définit aussi une bibliothèque standard. Dans ce livre, nous utilisons la "
"bibliothèque C de GNU, appelée glibc (son alternative étant «&nbsp;musl&nbsp;»). Cette "
"bibliothèque doit être compilée pour la machine LFS, c'est-à-dire à l’aide du "
"compilateur croisé cc1. Mais le compilateur lui-même utilise une bibliothèque interne "
"qui exécute des instructions complexes indisponibles dans le jeu d'instructions de "
"l'assembleur. Cette bibliothèque interne, libgcc, doit être liée à la bibliothèque "
"glibc pour fonctionner correctement&nbsp;! De plus, la bibliothèque standard C++ "
"(libstdc++) a aussi besoin d'être associée à glibc. La solution à ce problème consiste "
"d'abord à construire une libgcc inférieure basée sur cc1, qui ne dispose pas de "
"fonctionnalités avancées comme les threads et le traitement des exceptions, puis de "
"construire glibc avec ce compilateur inférieur (glibc elle-même n'étant pas "
"inférieure), puis de construire libstdc++. Cette bibliothèque ne dispose pas des "
"fonctionnalités avancées de libgcc."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:256
msgid ""
"The upshot of the preceding paragraph is that cc1 is unable to build a fully functional "
"libstdc++ with the degraded libgcc, but cc1 is the only compiler available for building "
"the C/C++ libraries during stage 2. There are two reasons we don't immediately use the "
"compiler built in stage 2, cc-lfs, to build those libraries."
msgstr ""
"La conséquence du paragraphe précédent est que cc1 est incapable de construire une "
"libstdc++ complètement fonctionnelle avec la libgcc dégradée, mais cc1 est le seul "
"compilateur disponible pour construire les bibliothèques C/C++ à la deuxième étape. Il "
"y a deux raisons pour lesquelles nous n'utilisons pas immédiatement le compilateur "
"construit à l'étape 2, cc-lfs, pour construire ces bibliothèques."

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:265
msgid ""
"Generally speaking, cc-lfs cannot run on pc (the host system).  Even though the "
"triplets for pc and lfs are compatible with each other, an executable for lfs must "
"depend on glibc-&glibc-version;; the host distro may utilize either a different "
"implementation of libc (for example, musl), or a previous release of glibc (for "
"example, glibc-2.13)."
msgstr ""
"En général, cc-lfs ne peut pas se lancer sur pc (le système hôte). Même si les triplets "
"pour pc et lfs sont compatibles l'un avec l'autre, un exécutable pour lfs doit dépendre "
"de glibc-&glibc-version;. La distribution hôte peut utiliser une implémentation "
"différent de la libc (par exemple, musl) ou une version précédente de glibc (par "
"exemple glibc-2.13)."

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:274
msgid ""
"Even if cc-lfs can run on pc, using it on pc would create a risk of linking to the pc "
"libraries, since cc-lfs is a native compiler."
msgstr ""
"Même si cc-lfs peut s'exécuter sur pc, l'utiliser sur pc induirait le risque de se lier "
"aux bibliothèques de pc, comme cc-lfs est un compilateur natif."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:281
msgid ""
"So when we build gcc stage 2, we instruct the building system to rebuild libgcc and "
"libstdc++ with cc1, but we link libstdc++ to the newly rebuilt libgcc instead of the "
"old, degraded build.  This makes the rebuilt libstdc++ fully functional."
msgstr ""
"Ainsi, lorsque nous construisons l’étape 2 du gcc, nous demandons au système de "
"construction de reconstruire libgcc et libstdc++ avec cc1, mais nous lions libstdc++ au "
"nouveau libgcc reconstruit plutôt qu’à l'ancienne construction dégradée, pour faire en "
"sorte que le libstdc++ reconstruit soit entièrement opérationnel."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:286
msgid ""
"In &ch-final; (or <quote>stage 3</quote>), all the packages needed for the LFS system "
"are built. Even if a package has already been installed into the LFS system in a "
"previous chapter, we still rebuild the package.  The main reason for rebuilding these "
"packages is to make them stable: if we reinstall an LFS package on a completed LFS "
"system, the reinstalled content of the package should be the same as the content of the "
"same package when first installed in &ch-final;.  The temporary packages installed in "
"&ch-tmp-cross; or &ch-tmp-chroot; cannot satisfy this requirement, because some of them "
"are built without optional dependencies, and autoconf cannot perform some feature "
"checks in &ch-tmp-cross; because of cross-compilation, causing the temporary packages "
"to lack optional features, or use suboptimal code routines. Additionally, a minor "
"reason for rebuilding the packages is to run the test suites."
msgstr ""
"Dans &ch-final;, (ou <quote>l’étape 3</quote>), tous les paquets nécessaires au système "
"LFS sont construits.Même si vous avez déjà installé un paquet sur le système LFS dans "
"un chapitre précédent, vous devrez reconstruire le paquet, à moins d’être certain qu’il "
"n’est pas nécessaire. La stabilisation de ces paquets est la raison principale de leur "
"reconstruction&nbsp;: si vous réinstallez un paquet LFS sur un système complet LFS, le "
"contenu du paquet installé devrait être identique au contenu de ce paquet installé "
"dans&ch-final;. Les paquets temporaires installés dans&ch-tmp-cross; ou&ch-tmp-chroot; "
"ne sont pas concernés, car certains d’entre eux sont construits sans dépendance "
"optionnelle, et autoconf ne peut pas exécuter certaines vérifications dans &ch-tmp-"
"cross; à cause de la compilation croisée. Les paquets temporaires ne disposent donc pas "
"de certaines fonctionnalités optionnelles ou utilisent des routines sous-optimales. De "
"plus, en reconstruisant les paquets, vous permettez l’exécution de la suite de tests."

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml:304
msgid "Other Procedural Details"
msgstr "Détails supplémentaires de procédure"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:306
msgid ""
"The cross-compiler will be installed in a separate <filename class=\"directory\">$LFS/"
"tools</filename> directory, since it will not be part of the final system."
msgstr ""
"Le compilateur croisé sera installé dans un répertoire <filename "
"class=\"directory\">$LFS/tools</filename> séparé, puisqu’il ne fera pas partie du "
"système final."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:310
msgid ""
"Binutils is installed first because the <command>configure</command> runs of both gcc "
"and glibc perform various feature tests on the assembler and linker to determine which "
"software features to enable or disable. This is more important than one might realize "
"at first. An incorrectly configured gcc or glibc can result in a subtly broken "
"toolchain, where the impact of such breakage might not show up until near the end of "
"the build of an entire distribution. A test suite failure will usually highlight this "
"error before too much additional work is performed."
msgstr ""
"Binutils est installé en premier parce que la commande <command>configure</command>de "
"gcc et glibc effectuent des tests de fonctionnalités sur l'assembleur et l'éditeur de "
"liens pour déterminer quelles fonctionnalités logicielles activer ou désactiver.Cette "
"installation est plus importante que ce que vous pouvez penser.Un gcc ou une glibc mal "
"configurés peuvent casser la chaîne de compilation, et l'impact d’une telle "
"configuration ne se verrait qu’à la fin de la construction de la distribution complète."
"La suite de tests indiquera généralement cette erreur avant que vous n’ayez trop avancé."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:319
msgid ""
"Binutils installs its assembler and linker in two locations, <filename "
"class=\"directory\">$LFS/tools/bin</filename> and <filename class=\"directory\">$LFS/"
"tools/$LFS_TGT/bin</filename>. The tools in one location are hard linked to the other. "
"An important facet of the linker is its library search order. Detailed information can "
"be obtained from <command>ld</command> by passing it the <parameter>--verbose</"
"parameter> flag. For example, <command>$LFS_TGT-ld --verbose | grep SEARCH</command> "
"will illustrate the current search paths and their order. (Note that this example can "
"be run as shown only while logged in as user <systemitem class=\"username\">lfs</"
"systemitem>. If you come back to this page later, replace <command>$LFS_TGT-ld</"
"command> with <command>ld</command>)."
msgstr ""
"Binutils installe son assembleur et son éditeur de liens à deux emplacements, <filename "
"class=\"directory\">$LFS/tools/bin</filename> et <filename class=\"directory\">$LFS/"
"tools/$LFS_TGT/bin</filename>. Les outils situés à un emplacement sont liés à l’autre "
"par un lien dur. L’ordre de recherche des bibliothèques est un aspect important de "
"l’éditeur de liens. Vous pouvez obtenir des informations détaillées à partir de la "
"commande <command>ld</command> en lui passant l’option <parameter>--verbose</"
"parameter>. Par exemple, la commande <command>ld --verbose | grep SEARCH</command> "
"affichera les chemins de recherche actuels et leur ordre. Cet exemple peut être exécuté "
"en mode lecture par l’utilisateur <systemitem class=\"username\">lfs</systemitem>.Si "
"vous revenez plus tard sur cette page, remplacez la commande <command>$LFS_TGT-ld</"
"command> par <command>ld</command>."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:332
msgid ""
"The next package installed is gcc. An example of what can be seen during its run of "
"<command>configure</command> is:"
msgstr ""
"Le prochain paquet installé est gcc. Voici un exemple de ce qui peut s’afficher pendant "
"l'exécution de la commande <command>configure</command>&nbsp;:"

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/part3intro/toolchaintechnotes.xml:335
#, no-wrap
msgid ""
"<computeroutput>checking what assembler to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/as\n"
"checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput>"
msgstr ""
"<computeroutput>checking what assembler to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/as\n"
"checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:338
msgid ""
"This is important for the reasons mentioned above. It also demonstrates that gcc's "
"configure script does not search the PATH directories to find which tools to use. "
"However, during the actual operation of <command>gcc</command> itself, the same search "
"paths are not necessarily used. To find out which standard linker <command>gcc</"
"command> will use, run: <command>$LFS_TGT-gcc -print-prog-name=ld</command>. (Again, "
"remove the <command>$LFS_TGT-</command> prefix if coming back to this later.)"
msgstr ""
"Il s’agit d’un paquet important pour les raisons mentionnées plus haut. C’est également "
"la preuve que le script configure de gcc ne parcourt pas les répertoires du PATH pour "
"trouver quels outils utiliser. Cependant, lors de l’exécution normale de la commande "
"<command>gcc</command>, les mêmes chemins de recherche ne sont pas forcément utilisés. "
"Pour trouver quel éditeur de liens standard <command>gcc</command> utilise, exécutez la "
"commande <command>$LFS_TGT-gcc -print-prog-name=ld</command>. À nouveau, retirez la "
"commande <command>$LFS_TGT-</command> si vous revenez ici plus tard."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:347
msgid ""
"Detailed information can be obtained from <command>gcc</command> by passing it the "
"<parameter>-v</parameter> command line option while compiling a program. For example, "
"<command>$LFS_TGT-gcc -v <replaceable>example.c</replaceable></command> (or without "
"<command> $LFS_TGT-</command> if coming back later) will show detailed information "
"about the preprocessor, compilation, and assembly stages, including <command>gcc</"
"command>'s search paths for included headers and their order."
msgstr ""
"Vous pouvez obtenir des informations détaillées grâce à la commande <command>gcc</"
"command> en lui passant l’option <parameter>-v</parameter> lors de la compilation d'un "
"programme. Par exemple, la commande <command>$LFS_TGT-gcc -v <replaceable>example.c</"
"replaceable></command> (sans <command> $LFS_TGT-</command> si vous revenez plus tard) "
"affichera des informations détaillées sur les phases de préprocesseur, de compilation "
"et d’assemblage, ainsi que les chemins de recherche de <command>gcc</command> pour les "
"headers inclus et leur ordre."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:356
msgid ""
"Next up: sanitized Linux API headers. These allow the standard C library (glibc) to "
"interface with features that the Linux kernel will provide."
msgstr ""
"L’installation suivante concerne les headers nettoyés de l’API de Linux. Ils permettent "
"à la bibliothèque standard C (glibc) d’interagir avec les fonctionnalités fournies par "
"le noyau Linux."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:360
msgid ""
"Next comes glibc. The most important considerations for building glibc are the "
"compiler, binary tools, and kernel headers. The compiler is generally not an issue "
"since glibc will always use the compiler relating to the <parameter>--host</parameter> "
"parameter passed to its configure script; e.g., in our case, the compiler will be "
"<command>$LFS_TGT-gcc</command>. The binary tools and kernel headers can be a bit more "
"complicated. Therefore, we take no risks and use the available configure switches to "
"enforce the correct selections. After the run of <command>configure</command>, check "
"the contents of the <filename>config.make</filename> file in the <filename "
"class=\"directory\">build</filename> directory for all important details.  Note the use "
"of <parameter>CC=\"$LFS_TGT-gcc\"</parameter> (with <envar>$LFS_TGT</envar> expanded) "
"to control which binary tools are used and the use of the <parameter>-nostdinc</"
"parameter> and <parameter>-isystem</parameter> flags to control the compiler's include "
"search path. These items highlight an important aspect of the glibc package&mdash;it is "
"very self-sufficient in terms of its build machinery, and generally does not rely on "
"toolchain defaults."
msgstr ""
"glibc est le paquet suivant à installer. Le compilateur, les outils binaires et les "
"headers du noyau sont les éléments les plus importants à prendre en considération pour "
"construire glibc. Le compilateur ne pose généralement pas de problème car glibc utilise "
"toujours le compilateur lié à l’option <parameter>--host</parameter> passée à son "
"script configure. Par exemple, dans notre cas, le compilateur sera <command>$LFS_TGT-"
"gcc</command>. Les outils binaires et les headers du noyau s’avèrent un peu plus "
"compliqués. Ne prenez donc pas de risque et utilisez les options de configure "
"disponibles pour exécuter les bonnes sélections. Après l'exécution de "
"<command>configure</command>, vérifiez le contenu et les détails importants du fichier "
"<filename>config.make</filename> dans le répertoire <filename class=\"directory\">glibc-"
"build</filename>. Pour sélectionner les outils binaires à utiliser, servez-vous du "
"paramètre <parameter>CC=\"$LFS_TGT-gcc\"</parameter> (avec la variable étendue "
"<envar>$LFS_TGT</envar>). Pour sélectionner le chemin de recherche des headers du "
"compilateur, utilisez les options <parameter>-nostdinc</parameter> et <parameter>-"
"isystem</parameter>. Ces éléments mettent en avant un aspect important du paquet "
"glibc&nbsp;: il est auto-suffisant en termes de construction et ne repose généralement "
"pas sur la chaîne de compilation par défaut."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:379
msgid ""
"As mentioned above, the standard C++ library is compiled next, followed in <xref "
"linkend=\"chapter-temporary-tools\"/> by other programs that must be cross-compiled to "
"break circular dependencies at build time.  The install step of all those packages uses "
"the <envar>DESTDIR</envar> variable to force installation in the LFS filesystem."
msgstr ""
"Comme indiqué précédemment, la bibliothèque standard C++ est ensuite compilée, suivie "
"dans le <xref linkend=\"chapter-temporary-tools\"/> par les autres programmes qui "
"nécessitent une compilation croisée en raison des dépendances circulaires qu’ils "
"cassent lors de la construction. L’installation forcée de tous ces paquets sur le "
"système de fichiers LFS nécessite la variable <envar>DESTDIR</envar>."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:386
msgid ""
"At the end of <xref linkend=\"chapter-temporary-tools\"/> the native LFS compiler is "
"installed. First binutils-pass2 is built, in the same <envar>DESTDIR</envar> directory "
"as the other programs, then the second pass of gcc is constructed, omitting some non-"
"critical libraries.  Due to some weird logic in gcc's configure script, "
"<envar>CC_FOR_TARGET</envar> ends up as <command>cc</command> when the host is the same "
"as the target, but different from the build system. This is why "
"<parameter>CC_FOR_TARGET=$LFS_TGT-gcc</parameter> is declared explicitly as one of the "
"configuration options."
msgstr ""
"À la fin du <xref linkend=\"chapter-temporary-tools\"/>, le compilateur LFS natif est "
"installé.binutils-pass2 est construit en premier, avec le même répertoire "
"d’installation <envar>DESTDIR</envar> que les autres programmes, puis la deuxième passe "
"de gcc est construite sans les bibliothèques inutiles.En raison d’un comportement "
"illogique dans le script configure de gcc, <envar>CC_FOR_TARGET</envar> devient "
"<command>cc</command> lorsque l'hôte est identique à la cible, mais différent du "
"système de construction.C'est pourquoi le paramètre <parameter>CC_FOR_TARGET=$LFS_TGT-"
"gcc</parameter> est déclaré de façon explicite dans les options de configure."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:397
msgid ""
"Upon entering the chroot environment in <xref linkend=\"chapter-chroot-temporary-"
"tools\"/>, the temporary installations of programs needed for the proper operation of "
"the toolchain are performed. From this point onwards, the core toolchain is self-"
"contained and self-hosted. In <xref linkend=\"chapter-building-system\"/>, final "
"versions of all the packages needed for a fully functional system are built, tested, "
"and installed."
msgstr ""
"À l’entrée de l'environnement chroot dans le <xref linkend=\"chapter-chroot-temporary-"
"tools\"/>, les programmes nécessaires au bon fonctionnement de la chaîne de compilation "
"sont installés de manière temporaire. À partir de là, la chaîne de construction de base "
"est auto-suffisante et auto-hébergée. Dans le <xref linkend=\"chapter-building-system\"/"
">, vous construirez, testerez et installerez les versions finales de tous les paquets "
"nécessaires au bon fonctionnement du système complet."

#~ msgid ""
#~ "All packages involved with cross compilation in the book use an autoconf-based "
#~ "building system.  The autoconf-based building system accepts system types in the "
#~ "form cpu-vendor-kernel-os, referred to as the system triplet.  Since the vendor "
#~ "field is mostly irrelevant, autoconf allows to omit it. An astute reader may wonder "
#~ "why a <quote>triplet</quote> refers to a four component name. The reason is the "
#~ "kernel field and the os field originated from one <quote>system</quote> field.  Such "
#~ "a three-field form is still valid today for some systems, for example "
#~ "<literal>x86_64-unknown-freebsd</literal>.  But for other systems, two systems can "
#~ "share the same kernel but still be too different to use a same triplet for them.  "
#~ "For example, an Android running on a mobile phone is completely different from "
#~ "Ubuntu running on an ARM64 server, despite they are running on the same type of CPU "
#~ "(ARM64) and using the same kernel (Linux).  Without an emulation layer, you cannot "
#~ "run an executable for the server on the mobile phone or vice versa.  So the "
#~ "<quote>system</quote> field is separated into kernel and os fields to designate "
#~ "these systems unambiguously.  For our example, the Android system is designated "
#~ "<literal>aarch64-unknown-linux-android</literal>, and the Ubuntu system is "
#~ "designated <literal>aarch64-unknown-linux-gnu</literal>.  The word <quote>triplet</"
#~ "quote> remained. A simple way to determine your system triplet is to run the "
#~ "<command>config.guess</command> script that comes with the source for many packages. "
#~ "Unpack the binutils sources and run the script: <userinput>./config.guess</"
#~ "userinput> and note the output. For example, for a 32-bit Intel processor the output "
#~ "will be <emphasis>i686-pc-linux-gnu</emphasis>. On a 64-bit system it will be "
#~ "<emphasis>x86_64-pc-linux-gnu</emphasis>. On most Linux systems the even simpler "
#~ "<command>gcc -dumpmachine</command> command will give you similar information."
#~ msgstr ""
#~ "Dans ce livre, tous les paquets concernés par la compilation croisée utilisent un "
#~ "système de construction basé sur autoconf.Le système de construction basé sur "
#~ "autoconf accepte les systèmes au format cpu-fabricant-noyau-os, qu’on appelle "
#~ "<quote>system triplet</quote>.Puisque le champ fabricant est hors de propos la "
#~ "majorité du temps, autoconf ne le prend pas compte.Un lecteur avisé se demanderait "
#~ "pourquoi un <quote>triplet</quote> fait référence à quatre&nbsp;éléments.La "
#~ "raison&nbsp;? Le noyau et l’os étaient à l’origine un seul champ <quote>système</"
#~ "quote>.Ce format à trois champs est toujours valide pour certains systèmes, par "
#~ "exemple <literal>x86_64-unknown-freebsd</literal>.Dans d’autres cas, deux systèmes "
#~ "peuvent partager le même noyau, mais être trop différents pour utiliser le même "
#~ "triplet.Par exemple, un système Android exécuté sur un téléphone portable est "
#~ "totalement différent d’un système Ubuntu déployé sur un serveur ARM64, malgré le "
#~ "fait qu’ils sont tous les deux exécutés sur le même type de CPU (ARM64) et qu’ils "
#~ "utilisent le même noyau (Linux).Sans une couche d’émulation, on ne peut pas lancer "
#~ "un exécutable pour le serveur sur le téléphone portable, et inversement.Le champ "
#~ "<quote>système</quote> est donc séparé en deux champs, le noyau et le système "
#~ "d’exploitation, ce qui permet de désigner ces systèmes sans ambiguïté.Dans notre "
#~ "exemple, le système Android est désigné sous le nom <literal>aarch64-unknown-linux-"
#~ "android</literal>, tandis que le système Ubuntu est désigné sous le nom "
#~ "<literal>aarch64-unknown-linux-gnu</literal>.Le mot <quote>triplet</quote> est resté."
#~ "Pour déterminer facilement le triplet de votre système, exécutez le script "
#~ "<command>config.guess</command> associé à la source de nombreux paquets.Décompressez "
#~ "les sources de binutils, exécutez le script <userinput>./config.guess</userinput> et "
#~ "récupérez le résultat.Par exemple, pour un processeur Intel 32&nbsp;bits, le "
#~ "résultat sera <emphasis>i686-pc-linux-gnu</emphasis>.Sur un système 64&nbsp;bits, ce "
#~ "sera <emphasis>x86_64-pc-linux-gnu</emphasis>.Sur la majorité des systèmes Linux, il "
#~ "existe une commande encore plus simple qui vous donnera des informations "
#~ "similaires&nbsp;: <command>gcc -dumpmachine</command>."

#~ msgid ""
#~ "This is not the end of the story: the upshot of the preceding paragraph is that cc1 "
#~ "is unable to build a fully functional libstdc++, but this is the only compiler "
#~ "available for building the C/C++ libraries during stage 2! Of course, the compiler "
#~ "built during stage 2, cc-lfs, would be able to build those libraries, but (1) the "
#~ "build system of gcc does not know that it is usable on pc, and (2) using it on pc "
#~ "would create a risk of linking to the pc libraries, since cc-lfs is a native "
#~ "compiler. So we have to re-build libstdc++ later as a part of gcc stage 2."
#~ msgstr ""
#~ "Ce n'est pas encore fini&nbsp;: ce que l’on retient du paragraphe précédent, c’est "
#~ "que cc1 est incapable de construire une libstdc++ entièrement fonctionnelle, mais "
#~ "qu’il s’agit du seul compilateur disponible pour construire les bibliothèques C/C++ "
#~ "dans la deuxième étape&nbsp;!Évidemment, le compilateur construit à l'étape 2, cc-"
#~ "lfs, serait capable de construire ces bibliothèques, mais le système de construction "
#~ "de gcc ne sait pas qu'il est utilisable sur pc, et l'utiliser sur pc risquerait de "
#~ "le lier à des bibliothèques pc, puisque cc-lfs est un compilateur natif.Nous devons "
#~ "donc reconstruire libstdc++ plus tard, lors de la deuxième étape de gcc."
