# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-10-31 16:18+0000\n"
"PO-Revision-Date: 2022-02-23 09:55+0000\n"
"Last-Translator: roptat <roptat@lepiller.eu>\n"
"Language-Team: \n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Generator: Pootle 2.8\n"
"X-POOTLE-MTIME: 1645610150.764909\n"

#. type: Content of: <sect1><title>
#: lfs-en/part3intro/toolchaintechnotes.xml:8
#: lfs-en/part3intro/toolchaintechnotes.xml:11
msgid "Toolchain Technical Notes"
msgstr "Notes techniques sur la chaîne d'outils"

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:13
#, fuzzy
#| msgid ""
#| "This section explains some of the rationale and technical details behind "
#| "the overall build method. It is not essential to immediately understand "
#| "everything in this section. Most of this information will be clearer "
#| "after performing an actual build. This section can be referred to at any "
#| "time during the process."
msgid ""
"This section explains some of the rationale and technical details behind the "
"overall build method. Don't try to immediately understand everything in this "
"section. Most of this information will be clearer after performing an actual "
"build. Come back and re-read this chapter at any time during the build "
"process."
msgstr ""
"Cette section explique certains détails rationnels et techniques derrière la "
"méthode de construction. Il n'est pas essentiel de comprendre immédiatement "
"tout ce qui se trouve dans cette section. La plupart des informations seront "
"plus claires après avoir réalisé réellement une construction complète. Cette "
"section peut servir de référence à tout moment lors du processus de "
"construction."

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:19
#, fuzzy
#| msgid ""
#| "The overall goal of <xref linkend=\"chapter-cross-tools\"/> and <xref "
#| "linkend=\"chapter-temporary-tools\"/> is to produce a temporary area that "
#| "contains a known-good set of tools that can be isolated from the host "
#| "system.  By using <command>chroot</command>, the commands in the "
#| "remaining chapters will be contained within that environment, ensuring a "
#| "clean, trouble-free build of the target LFS system. The build process has "
#| "been designed to minimize the risks for new readers and to provide the "
#| "most educational value at the same time."
msgid ""
"The overall goal of <xref linkend=\"chapter-cross-tools\"/> and <xref "
"linkend=\"chapter-temporary-tools\"/> is to produce a temporary area "
"containing a set of tools that are known to be good, and that are isolated "
"from the host system.  By using the <command>chroot</command> command, the "
"compilations in the remaining chapters will be isolated within that "
"environment, ensuring a clean, trouble-free build of the target LFS system. "
"The build process has been designed to minimize the risks for new readers, "
"and to provide the most educational value at the same time."
msgstr ""
"Le but global des chapitres <xref linkend=\"chapter-cross-tools\"/> et <xref "
"linkend=\"chapter-temporary-tools\"/> est de fournir une zone temporaire qui "
"contient un ensemble d'outils connus qui peuvent être isolés du système "
"hôte. En utilisant <command>chroot</command>, les commandes dans le reste "
"des chapitres se cantonneront à cet environnement, en assurant une "
"construction du système LFS cible propre, sans soucis. Le processus de "
"construction a été conçu pour minimiser les risques pour les nouveaux "
"lecteurs et pour fournir une valeur éducative maximale en même temps."

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:28
#, fuzzy
#| msgid ""
#| "The build process is based on the process of <emphasis>cross-compilation</"
#| "emphasis>. Cross-compilation is normally used for building a compiler and "
#| "its toolchain for a machine different from the one that is used for the "
#| "build. This is not strictly needed for LFS, since the machine where the "
#| "new system will run is the same as the one used for the build. But cross-"
#| "compilation has the great advantage that anything that is cross-compiled "
#| "cannot depend on the host environment."
msgid ""
"This build process is based on <emphasis>cross-compilation</emphasis>. Cross-"
"compilation is normally used to build a compiler and its associated "
"toolchain for a machine different from the one that is used for the build. "
"This is not strictly necessary for LFS, since the machine where the new "
"system will run is the same as the one used for the build. But cross-"
"compilation has one great advantage: anything that is cross-compiled cannot "
"depend on the host environment."
msgstr ""
"Le processus de construction se base sur de la <emphasis>compilation "
"croisée</emphasis>. La compilation croisée s'utilise normalement pour "
"construire un compilateur et sa chaîne de construction pour une machine "
"différente de celle utilisée pour la construction. Cela n'est pas "
"strictement requis pour LFS, comme la machine où le nouveau système est "
"construit est la même que celle utilisée pour la construction. Mais la "
"compilation croisée a le grand avantage que tout ce qui est compilé ne peut "
"pas dépendre de l'environnement hôte."

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml:36
#: lfs-en/part3intro/toolchaintechnotes.xml:38
msgid "About Cross-Compilation"
msgstr "À propos de la compilation croisée"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:42
#, fuzzy
#| msgid ""
#| "The LFS book is not, and does not contain a general tutorial to build a "
#| "cross (or native) toolchain. Don't use the command in the book for a "
#| "cross toolchain which will be used for some purpose other than building "
#| "LFS, unless you really understand what you are doing."
msgid ""
"The LFS book is not (and does not contain) a general tutorial to build a "
"cross- (or native) toolchain. Don't use the commands in the book for a cross-"
"toolchain for some purpose other than building LFS, unless you really "
"understand what you are doing."
msgstr ""
"Le livre LFS n'est pas, et ne contient pas, un tutoriel générique sur la "
"construction d'une chaine d'outils croisée (ou native). N'utilisez pas les "
"commandes de ce livre pour une chaine d'outils croisée autrement que pour "
"construire LFS, à moins que vous ne compreniez vraiment ce que vous faites."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:49
#, fuzzy
#| msgid ""
#| "Cross-compilation involves some concepts that deserve a section on their "
#| "own. Although this section may be omitted in a first reading, coming back "
#| "to it later will be beneficial to your full understanding of the process."
msgid ""
"Cross-compilation involves some concepts that deserve a section of their "
"own. Although this section may be omitted on a first reading, coming back to "
"it later will help you gain a fuller understanding of the process."
msgstr ""
"La compilation croisée utilise certains concepts qui méritent une section à "
"part. Bien que vous puissiez passer cette section lors de votre première "
"lecture, nous vous recommandons fortement d'y revenir plus tard pour bien "
"comprendre le processus de construction."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:54
#, fuzzy
#| msgid "Let us first define some terms used in this context:"
msgid "Let us first define some terms used in this context."
msgstr "Définissons d'abord certains termes utilisés dans ce contexte&nbsp;:"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml:57
#, fuzzy
#| msgid "build"
msgid "The build"
msgstr "build (construction)"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:58
#, fuzzy
#| msgid ""
#| "is the machine where we build programs. Note that this machine is "
#| "referred to as the <quote>host</quote> in other sections."
msgid ""
"is the machine where we build programs. Note that this machine is also "
"referred to as the <quote>host</quote>."
msgstr ""
"est la machine où nous construisons les programmes. Remarquez que cette "
"machine sera appelée <quote>hôte</quote> dans les autres sections."

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml:62
#, fuzzy
#| msgid "host"
msgid "The host"
msgstr "host (hôte)"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:63
msgid ""
"is the machine/system where the built programs will run. Note that this use "
"of <quote>host</quote> is not the same as in other sections."
msgstr ""
"est la machine ou le système où les programmes seront lancés. Remarquez que "
"nous n'utilisons pas le terme <quote>hôte</quote> de la même manière ici que "
"dans les autres sections."

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml:68
#, fuzzy
#| msgid "target"
msgid "The target"
msgstr "target (cible)"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:69
#, fuzzy
#| msgid ""
#| "is only used for compilers. It is the machine the compiler produces code "
#| "for. It may be different from both build and host."
msgid ""
"is only used for compilers. It is the machine the compiler produces code "
"for. It may be different from both the build and the host."
msgstr ""
"est seulement utilisé pour les compilateurs. C'est la machine pour laquelle "
"le compilateur produit du code. Elle peut être différente de la machine hôte "
"ou de construction."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:76
#, fuzzy
#| msgid ""
#| "As an example, let us imagine the following scenario (sometimes referred "
#| "to as <quote>Canadian Cross</quote>): we may have a compiler on a slow "
#| "machine only, let's call it machine A, and the compiler ccA. We may have "
#| "also a fast machine (B), but with no compiler, and we may want to produce "
#| "code for another slow machine (C). To build a compiler for machine C, we "
#| "would have three stages:"
msgid ""
"As an example, let us imagine the following scenario (sometimes referred to "
"as <quote>Canadian Cross</quote>). We have a compiler on a slow machine "
"only, let's call it machine A, and the compiler ccA. We also have a fast "
"machine (B), but no compiler for (B), and we want to produce code for a "
"third, slow machine (C). We will build a compiler for machine C in three "
"stages."
msgstr ""
"Par exemple, imaginons le scénario suivant (parfois appelé <quote>Canadian "
"Cross</quote>)&nbsp;: on peut avoir un compilateur sur une machine lente, "
"appelons-la A, et le compilateur ccA. On peut aussi avoir une machine rapide "
"(B) sans compilateur, et on veut produire du code pour une autre machine "
"lente (C). Pour construire un compilateur pour une machine C, on "
"effectuerait trois étapes&nbsp;:"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:91
#: lfs-en/part3intro/toolchaintechnotes.xml:125
#: lfs-en/part3intro/toolchaintechnotes.xml:217
msgid "Stage"
msgstr "Étape"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:91
#: lfs-en/part3intro/toolchaintechnotes.xml:125
#: lfs-en/part3intro/toolchaintechnotes.xml:217
msgid "Build"
msgstr "Construction"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:91
#: lfs-en/part3intro/toolchaintechnotes.xml:125
#: lfs-en/part3intro/toolchaintechnotes.xml:217
msgid "Host"
msgstr "Hôte"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:92
#: lfs-en/part3intro/toolchaintechnotes.xml:126
#: lfs-en/part3intro/toolchaintechnotes.xml:218
msgid "Target"
msgstr "Cible"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:92
#: lfs-en/part3intro/toolchaintechnotes.xml:126
#: lfs-en/part3intro/toolchaintechnotes.xml:218
msgid "Action"
msgstr "Action"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:96
#: lfs-en/part3intro/toolchaintechnotes.xml:222
msgid "1"
msgstr "1"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:96
#: lfs-en/part3intro/toolchaintechnotes.xml:100
msgid "A"
msgstr "A"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:96
#: lfs-en/part3intro/toolchaintechnotes.xml:100
#: lfs-en/part3intro/toolchaintechnotes.xml:104
msgid "B"
msgstr "B"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:97
#, fuzzy
#| msgid "build cross-compiler cc1 using ccA on machine A"
msgid "Build cross-compiler cc1 using ccA on machine A."
msgstr "construire un compilateur croisé cc1 avec ccA sur la machine A"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:100
#: lfs-en/part3intro/toolchaintechnotes.xml:226
msgid "2"
msgstr "2"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:100
#: lfs-en/part3intro/toolchaintechnotes.xml:104
#: lfs-en/part3intro/toolchaintechnotes.xml:130
msgid "C"
msgstr "C"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:101
#, fuzzy
#| msgid "build cross-compiler cc2 using cc1 on machine A"
msgid "Build cross-compiler cc2 using cc1 on machine A."
msgstr "construire un compilateur croisé cc2 avec cc1 sur la machine A"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:104
#: lfs-en/part3intro/toolchaintechnotes.xml:230
msgid "3"
msgstr "3"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:105
#, fuzzy
#| msgid "build compiler ccC using cc2 on machine B"
msgid "Build compiler ccC using cc2 on machine B."
msgstr "construire le compilateur ccC avec cc2 sur la machine B"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:111
#, fuzzy
#| msgid ""
#| "Then, all the other programs needed by machine C can be compiled using "
#| "cc2 on the fast machine B. Note that unless B can run programs produced "
#| "for C, there is no way to test the built programs until machine C itself "
#| "is running. For example, for testing ccC, we may want to add a fourth "
#| "stage:"
msgid ""
"Then, all the programs needed by machine C can be compiled using cc2 on the "
"fast machine B. Note that unless B can run programs produced for C, there is "
"no way to test the newly built programs until machine C itself is running. "
"For example, to run a test suite on ccC, we may want to add a fourth stage:"
msgstr ""
"Ensuite, tous les autres programmes requis par la machine C peuvent être "
"compilés avec cc2 sur la machine rapide B. Remarquez qu'à moins que B ne "
"puisse lancer les programmes produits pour C, il n'y a aucun moyen de tester "
"les programmes construits avant de les lancer sur la machine C. Par exemple, "
"pour tester ccC, on peut ajouter une quatrième étape&nbsp;:"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:130
msgid "4"
msgstr "4"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:131
#, fuzzy
#| msgid "rebuild and test ccC using itself on machine C"
msgid "Rebuild and test ccC using ccC on machine C."
msgstr "reconstruire et tester ccC avec lui-même sur la machine C"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:137
msgid ""
"In the example above, only cc1 and cc2 are cross-compilers, that is, they "
"produce code for a machine different from the one they are run on.  The "
"other compilers ccA and ccC produce code for the machine they are run on. "
"Such compilers are called <emphasis>native</emphasis> compilers."
msgstr ""
"Dans l'exemple au dessus, seuls cc1 et cc2 sont des compilateurs croisés, "
"c'est à dire qu'ils produisent du code pour une machine différente de celle "
"sur laquelle ils tournent. Les autres compilateurs ccA et ccC produisent du "
"code pour la machine sur laquelle ils tournent. Ces compilateurs sont "
"appelés des compilateurs <emphasis>natifs</emphasis>."

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml:145
msgid "Implementation of Cross-Compilation for LFS"
msgstr "Implémentation de la compilation croisée dans LFS"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:148
msgid ""
"All the cross-compiled packages in this book use an autoconf-based building "
"system.  The autoconf-based building system accepts system types in the form "
"cpu-vendor-kernel-os, referred to as the system triplet.  Since the vendor "
"field is often irrelevant, autoconf lets you omit it."
msgstr ""

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:154
msgid ""
"An astute reader may wonder why a <quote>triplet</quote> refers to a four "
"component name. The kernel field and the os field began as a single "
"<quote>system</quote> field.  Such a three-field form is still valid today "
"for some systems, for example, <literal>x86_64-unknown-freebsd</literal>.  "
"But two systems can share the same kernel and still be too different to use "
"the same triplet to describe them.  For example, Android running on a mobile "
"phone is completely different from Ubuntu running on an ARM64 server, even "
"though they are both running on the same type of CPU (ARM64) and using the "
"same kernel (Linux)."
msgstr ""

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:166
msgid ""
"Without an emulation layer, you cannot run an executable for a server on a "
"mobile phone or vice versa.  So the <quote>system</quote> field has been "
"divided into kernel and os fields, to designate these systems "
"unambiguously.  In our example, the Android system is designated "
"<literal>aarch64-unknown-linux-android</literal>, and the Ubuntu system is "
"designated <literal>aarch64-unknown-linux-gnu</literal>."
msgstr ""

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:174
msgid ""
"The word <quote>triplet</quote> remains embedded in the lexicon. A simple "
"way to determine your system triplet is to run the <command>config.guess</"
"command> script that comes with the source for many packages. Unpack the "
"binutils sources, run the script <userinput>./config.guess</userinput>, and "
"note the output. For example, for a 32-bit Intel processor the output will "
"be <emphasis>i686-pc-linux-gnu</emphasis>. On a 64-bit system it will be "
"<emphasis>x86_64-pc-linux-gnu</emphasis>. On most Linux systems the even "
"simpler <command>gcc -dumpmachine</command> command will give you similar "
"information."
msgstr ""

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:184
#, fuzzy
#| msgid ""
#| "Also be aware of the name of the platform's dynamic linker, often "
#| "referred to as the dynamic loader (not to be confused with the standard "
#| "linker <command>ld</command> that is part of binutils). The dynamic "
#| "linker provided by Glibc finds and loads the shared libraries needed by a "
#| "program, prepares the program to run, and then runs it. The name of the "
#| "dynamic linker for a 32-bit Intel machine is <filename "
#| "class=\"libraryfile\">ld-linux.so.2</filename> and is <filename "
#| "class=\"libraryfile\">ld-linux-x86-64.so.2</filename> for 64-bit systems. "
#| "A sure-fire way to determine the name of the dynamic linker is to inspect "
#| "a random binary from the host system by running: <userinput>readelf -l "
#| "&lt;name of binary&gt; | grep interpreter</userinput> and noting the "
#| "output. The authoritative reference covering all platforms is in the "
#| "<filename>shlib-versions</filename> file in the root of the Glibc source "
#| "tree."
msgid ""
"You should also be aware of the name of the platform's dynamic linker, often "
"referred to as the dynamic loader (not to be confused with the standard "
"linker <command>ld</command> that is part of binutils). The dynamic linker "
"provided by package glibc finds and loads the shared libraries needed by a "
"program, prepares the program to run, and then runs it. The name of the "
"dynamic linker for a 32-bit Intel machine is <filename "
"class=\"libraryfile\">ld-linux.so.2</filename>; it's <filename "
"class=\"libraryfile\">ld-linux-x86-64.so.2</filename> on 64-bit systems. A "
"sure-fire way to determine the name of the dynamic linker is to inspect a "
"random binary from the host system by running: <userinput>readelf -l &lt;"
"name of binary&gt; | grep interpreter</userinput> and noting the output. The "
"authoritative reference covering all platforms is in the <filename>shlib-"
"versions</filename> file in the root of the glibc source tree."
msgstr ""
"Faites également attention au nom de l'éditeur de liens de la plateforme, "
"souvent appelé le chargeur dynamique (à ne pas confondre avec l'éditeur de "
"liens standard <command>ld</command> q partie de Binutils). Le chargeur "
"dynamique fourni par Glibc trouve et charge les bibliothèques partagées "
"nécessaires à un programme pour s'exécuter, puis l'exécute. Le nom de "
"l'éditeur dynamique pour une machine Intel 32 bits sera <filename "
"class=\"libraryfile\">ld-linux.so.2</filename> (<filename "
"class=\"libraryfile\">ld-linux-x86-64.so.2</filename> pour les systèmes 64 "
"bits). Une façon sûre de déterminer le nom de l'éditeur de liens dynamiques "
"est d'inspecter un binaire au hasard du système hôte en exécutant&nbsp;: "
"<userinput>readelf -l &lt;nom du binaire&gt; | grep interpreter</userinput> "
"et de noter le résultat. La référence faisant autorité couvrant toutes les "
"plateformes est dans le fichier <filename>shlib-versions</filename> à la "
"racine du répertoire des sources de Glibc."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:200
#, fuzzy
#| msgid ""
#| "In order to fake a cross compilation in LFS, the name of the host triplet "
#| "is slightly adjusted by changing the &quot;vendor&quot; field in the "
#| "<envar>LFS_TGT</envar> variable. We also use the <parameter>--with-"
#| "sysroot</parameter> option when building the cross linker and cross "
#| "compiler to tell them where to find the needed host files. This ensures "
#| "that none of the other programs built in <xref linkend=\"chapter-"
#| "temporary-tools\"/> can link to libraries on the build machine. Only two "
#| "stages are mandatory, and one more for tests:"
msgid ""
"In order to fake a cross-compilation in LFS, the name of the host triplet is "
"slightly adjusted by changing the &quot;vendor&quot; field in the "
"<envar>LFS_TGT</envar> variable so it says &quot;lfs&quot;. We also use the "
"<parameter>--with-sysroot</parameter> option when building the cross-linker "
"and cross-compiler to tell them where to find the needed host files. This "
"ensures that none of the other programs built in <xref linkend=\"chapter-"
"temporary-tools\"/> can link to libraries on the build machine. Only two "
"stages are mandatory, plus one more for tests."
msgstr ""
"Pour simuler une compilation croisée, dans LFS, le nom du triplet hôte est "
"légèrement ajusté en changeant la partie «&nbsp;fabriquant&nbsp;» dans la "
"variable <envar>LFS_TGT</envar>. Nous utilisons aussi l'option <parameter>--"
"with-sysroot</parameter> lors de la construction de l'éditeur des liens et "
"du compilateur croisés pour leur dire où trouver les fichiers hôtes requis. "
"Cela s'assure qu'aucun autre programme construit dans le <xref "
"linkend=\"chapter-temporary-tools\"/> ne peut se lier aux bibliothèques sur "
"la machine de construction. Seules deux étapes sont requises, et une autre "
"pour les tests&nbsp;:"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:222
#: lfs-en/part3intro/toolchaintechnotes.xml:226
msgid "pc"
msgstr "pc"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:222
#: lfs-en/part3intro/toolchaintechnotes.xml:226
#: lfs-en/part3intro/toolchaintechnotes.xml:230
msgid "lfs"
msgstr "lfs"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:223
#, fuzzy
#| msgid "build cross-compiler cc1 using cc-pc on pc"
msgid "Build cross-compiler cc1 using cc-pc on pc."
msgstr "construire un compilateur croisé cc1 avec cc-pc sur pc"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:227
#, fuzzy
#| msgid "build compiler cc-lfs using cc1 on pc"
msgid "Build compiler cc-lfs using cc1 on pc."
msgstr "construire un compilateur cc-lfs avec cc1 sur pc"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml:231
#, fuzzy
#| msgid "rebuild and test cc-lfs using itself on lfs"
msgid "Rebuild and test cc-lfs using cc-lfs on lfs."
msgstr "reconstruire et tester cc-lfs avec lui-même sur lfs"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:237
#, fuzzy
#| msgid ""
#| "In the above table, <quote>on pc</quote> means the commands are run on a "
#| "machine using the already installed distribution. <quote>On lfs</quote> "
#| "means the commands are run in a chrooted environment."
msgid ""
"In the preceding table, <quote>on pc</quote> means the commands are run on a "
"machine using the already installed distribution. <quote>On lfs</quote> "
"means the commands are run in a chrooted environment."
msgstr ""
"Dans le tableau plus haut, <quote>sur pc</quote> signifie que les commandes "
"sont lancées sur une machine qui utilise la distribution déjà installée. "
"<quote>Sur lfs</quote> signifie que les commandes sont lancées dans un "
"environnement chroot."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:241
#, fuzzy
#| msgid ""
#| "Now, there is more about cross-compiling: the C language is not just a "
#| "compiler, but also defines a standard library. In this book, the GNU C "
#| "library, named glibc, is used. This library must be compiled for the lfs "
#| "machine, that is, using the cross compiler cc1.  But the compiler itself "
#| "uses an internal library implementing complex instructions not available "
#| "in the assembler instruction set. This internal library is named libgcc, "
#| "and must be linked to the glibc library to be fully functional! "
#| "Furthermore, the standard library for C++ (libstdc++) also needs being "
#| "linked to glibc. The solution to this chicken and egg problem is to first "
#| "build a degraded cc1 based libgcc, lacking some functionalities such as "
#| "threads and exception handling, then build glibc using this degraded "
#| "compiler (glibc itself is not degraded), then build libstdc++. But this "
#| "last library will lack the same functionalities as libgcc."
msgid ""
"Now, there is more about cross-compiling: the C language is not just a "
"compiler, but also defines a standard library. In this book, the GNU C "
"library, named glibc, is used (there is an alternative, &quot;musl&quot;). "
"This library must be compiled for the LFS machine; that is, using the cross-"
"compiler cc1.  But the compiler itself uses an internal library providing "
"complex subroutines for functions not available in the assembler instruction "
"set. This internal library is named libgcc, and it must be linked to the "
"glibc library to be fully functional. Furthermore, the standard library for "
"C++ (libstdc++) must also be linked with glibc. The solution to this chicken "
"and egg problem is first to build a degraded cc1-based libgcc, lacking some "
"functionalities such as threads and exception handling, and then to build "
"glibc using this degraded compiler (glibc itself is not degraded), and also "
"to build libstdc++. This last library will lack some of the functionality of "
"libgcc."
msgstr ""
"n fait, il y a plus à savoir sur la compilation croisée&nbsp;: le langage C "
"n'est pas seulement un compilateur, mais définie aussi une bibliothèque "
"standard. Dans ce livre, on utilise la bibliothèque C de GNU, glibc. Cette "
"bibliothèque doit être compilée pour la machine lfs, c'est-à-dire, avec le "
"compilateur croisé cc1. Mais le compilateur lui-même utilise une "
"bibliothèque interne implémentant des instructions complexes qui ne sont pas "
"disponibles dans l'ensemble d'instructions de l'assembleur. Cette "
"bibliothèque interne, libgcc, doit être liée à la bibliothèque glibc pour "
"fonctionner correctement&nbsp;! En plus, la bibliothèque standard du C++ "
"(libstdc++) a aussi besoin d'être liée à la glibc. La solution pour ce "
"problème de poule et d'œuf est de d'abord construire une libgcc dégradée "
"basée sur cc1, qui n'a pas de fonctionnalité avancée comme les threads et le "
"traitement des exceptions, puis de construire glibc avec ce compilateur "
"dégradé (glibc elle-même n'est pas dégradée), puis de construire libstdc++. "
"Mais cette dernière n'aura pas les fonctionnalités que libgcc n'a pas non "
"plus."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:256
#, fuzzy
#| msgid ""
#| "This is not the end of the story: the conclusion of the preceding "
#| "paragraph is that cc1 is unable to build a fully functional libstdc++, "
#| "but this is the only compiler available for building the C/C++ libraries "
#| "during stage 2! Of course, the compiler built during stage 2, cc-lfs, "
#| "would be able to build those libraries, but (1) the build system of GCC "
#| "does not know that it is usable on pc, and (2) using it on pc would be at "
#| "risk of linking to the pc libraries, since cc-lfs is a native compiler. "
#| "So we have to build libstdc++ later, in chroot."
msgid ""
"The upshot of the preceding paragraph is that cc1 is unable to build a fully "
"functional libstdc++ with the degraded libgcc, but cc1 is the only compiler "
"available for building the C/C++ libraries during stage 2. Of course, the "
"compiler built by stage 2, cc-lfs, would be able to build those libraries, "
"but:"
msgstr ""
"Ce n'est pas la fin de l'histoire&nbsp;: la conclusion du paragraphe "
"précédent est que cc1 est incapable de trouver une libstdc++ complètement "
"fonctionnelle, mais c'est le seul compilateur disponible pour construire les "
"bibliothèques C/C++ lors de la deuxième étape&nbsp;! Évidemment, le "
"compilateur construit à l'étape 2, cc-lfs, serait capable de construire ces "
"bibliothèques, mais (1) le système de construction de GCC ne sait pas qu'il "
"est utilisable sur pc, et (2) l'utiliser sur pc risquerait de le lier à des "
"bibliothèques de pc, comme cc-lfs est un compilateur natif. Donc nous devons "
"compiler libstdc++ plus tard, dans le chroot."

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:265
msgid ""
"Generally cc-lfs cannot run on pc (the host distro).  Despite the triplets "
"of pc and lfs are compatible to each other, an executable for lfs will "
"depend on glibc-&glibc-version; while the host distro may utilize a "
"different libc implementation (for example, musl) or a previous release of "
"glibc (for example, glibc-2.13)."
msgstr ""

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:274
msgid ""
"Even if cc-lfs happens to run on pc, using it on pc would create a risk of "
"linking to the pc libraries, since cc-lfs is a native compiler."
msgstr ""

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:281
msgid ""
"So when we build gcc stage 2, we instruct the building system to rebuild "
"libgcc and libstdc++ with cc1, but link libstdc++ to the newly rebuilt "
"libgcc instead of the degraded build.  Then the rebuilt libstdc++ will be "
"fully functional."
msgstr ""

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:286
msgid ""
"In &ch-final; (or <quote>stage 3</quote>), all the packages needed for the "
"LFS system are built. Even if a package has already been installed into the "
"LFS system in a previous chapter, we still rebuild the package.  The main "
"reason for rebuilding these packages is to make them stable: if we reinstall "
"a LFS package on a complete LFS system, the installed content of the package "
"should be the same as the content of the same package when installed in &ch-"
"final;.  The temporary packages installed in &ch-tmp-cross; or &ch-tmp-"
"chroot; cannot satisfy this requirement, because some of them are built "
"without optional dependencies, and autoconf cannot perform some feature "
"checks in &ch-tmp-cross; because of cross-compilation, causing the temporary "
"packages to lack optional features, or use suboptimal code routines. "
"Additionally, a minor reason for rebuilding the packages is to run the test "
"suites."
msgstr ""

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml:304
#, fuzzy
#| msgid "Other procedural details"
msgid "Other Procedural Details"
msgstr "Autres détails sur la procédure"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:306
msgid ""
"The cross-compiler will be installed in a separate <filename "
"class=\"directory\">$LFS/tools</filename> directory, since it will not be "
"part of the final system."
msgstr ""
"Le compilateur croisé sera installé dans un répertoire <filename "
"class=\"directory\">$LFS/tools</filename> séparé, comme il ne fera pas "
"partie du système final."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:310
#, fuzzy
#| msgid ""
#| "Binutils is installed first because the <command>configure</command> runs "
#| "of both GCC and Glibc perform various feature tests on the assembler and "
#| "linker to determine which software features to enable or disable. This is "
#| "more important than one might first realize. An incorrectly configured "
#| "GCC or Glibc can result in a subtly broken toolchain, where the impact of "
#| "such breakage might not show up until near the end of the build of an "
#| "entire distribution. A test suite failure will usually highlight this "
#| "error before too much additional work is performed."
msgid ""
"Binutils is installed first because the <command>configure</command> runs of "
"both gcc and glibc perform various feature tests on the assembler and linker "
"to determine which software features to enable or disable. This is more "
"important than one might realize at first. An incorrectly configured gcc or "
"glibc can result in a subtly broken toolchain, where the impact of such "
"breakage might not show up until near the end of the build of an entire "
"distribution. A test suite failure will usually highlight this error before "
"too much additional work is performed."
msgstr ""
"Binutils est tout d'abord installé parce que les exécutions de Glibc et GCC "
"par <command>configure</command> réalisent quelques tests de fonctionnalités "
"sur l'assembleur et l'éditeur de liens pour déterminer quelle fonctionnalité "
"logicielle activer ou désactiver. Ceci est plus important que ce que vous "
"pouvez imaginer. Un GCC ou une Glibc mal configuré peut aboutir à une chaîne "
"d'outils subtilement cassée, et l'impact d'une telle cassure ne se verrait "
"pas avant la fin de la construction de la distribution complète. Un échec "
"dans la suite de tests surlignera habituellement cette erreur avant que trop "
"de travail supplémentaire n'ait été réalisé."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:319
#, fuzzy
#| msgid ""
#| "Binutils installs its assembler and linker in two locations, <filename "
#| "class=\"directory\">$LFS/tools/bin</filename> and <filename "
#| "class=\"directory\">$LFS/tools/$LFS_TGT/bin</filename>. The tools in one "
#| "location are hard linked to the other. An important facet of the linker "
#| "is its library search order. Detailed information can be obtained from "
#| "<command>ld</command> by passing it the <parameter>--verbose</parameter> "
#| "flag. For example, <command>$LFS_TGT-ld --verbose | grep SEARCH</command> "
#| "will illustrate the current search paths and their order. It shows which "
#| "files are linked by <command>ld</command> by compiling a dummy program "
#| "and passing the <parameter>--verbose</parameter> switch to the linker. "
#| "For example, <command>$LFS_TGT-gcc dummy.c -Wl,--verbose 2&gt;&amp;1 | "
#| "grep succeeded</command> will show all the files successfully opened "
#| "during the linking."
msgid ""
"Binutils installs its assembler and linker in two locations, <filename "
"class=\"directory\">$LFS/tools/bin</filename> and <filename "
"class=\"directory\">$LFS/tools/$LFS_TGT/bin</filename>. The tools in one "
"location are hard linked to the other. An important facet of the linker is "
"its library search order. Detailed information can be obtained from "
"<command>ld</command> by passing it the <parameter>--verbose</parameter> "
"flag. For example, <command>$LFS_TGT-ld --verbose | grep SEARCH</command> "
"will illustrate the current search paths and their order. (Note that this "
"example can be run as shown only while logged in as user <systemitem "
"class=\"username\">lfs</systemitem>. If you come back to this page later, "
"replace <command>$LFS_TGT-ld</command> with <command>ld</command>)."
msgstr ""
"Binutils installe son assembleur et son éditeur de liens à deux endroits, "
"<filename class=\"directory\">$LFS/tools/bin</filename> et <filename "
"class=\"directory\">$LFS/tools/$LFS_TGT/bin</filename>. Les outils dans un "
"emplacement sont liés en dur à l'autre. Un aspect important de l'éditeur de "
"liens est son ordre de recherche des bibliothèques. Vous pouvez obtenir des "
"informations détaillées à partir de <command>ld</command> en lui passant le "
"paramètre <parameter>--verbose</parameter>. Par exemple, un <command>ld --"
"verbose | grep SEARCH</command> illustrera les chemins de recherche réels et "
"leur ordre. Il montre quels fichiers sont liés par <command>ld</command> en "
"compilant un programme de test et en passant le paramètre <parameter>--"
"verbose</parameter> à l'éditeur de liens. Par exemple, <command>$LFS_TGT-gcc "
"dummy.c -Wl,--verbose 2&gt;&amp;1 | grep succeeded</command> affichera tous "
"les fichiers ouverts avec succès lors de l'édition des liens."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:332
#, fuzzy
#| msgid ""
#| "The next package installed is GCC. An example of what can be seen during "
#| "its run of <command>configure</command> is:"
msgid ""
"The next package installed is gcc. An example of what can be seen during its "
"run of <command>configure</command> is:"
msgstr ""
"Le prochain paquet installé est GCC. Voici un exemple de ce qui peut être vu "
"pendant l'exécution de son script <command>configure</command>&nbsp;:"

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/part3intro/toolchaintechnotes.xml:335
#, no-wrap
msgid ""
"<computeroutput>checking what assembler to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/as\n"
"checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput>"
msgstr ""
"<computeroutput>checking what assembler to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/as\n"
"checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:338
#, fuzzy
#| msgid ""
#| "This is important for the reasons mentioned above. It also demonstrates "
#| "that GCC's configure script does not search the PATH directories to find "
#| "which tools to use. However, during the actual operation of <command>gcc</"
#| "command> itself, the same search paths are not necessarily used. To find "
#| "out which standard linker <command>gcc</command> will use, run: "
#| "<command>$LFS_TGT-gcc -print-prog-name=ld</command>."
msgid ""
"This is important for the reasons mentioned above. It also demonstrates that "
"gcc's configure script does not search the PATH directories to find which "
"tools to use. However, during the actual operation of <command>gcc</command> "
"itself, the same search paths are not necessarily used. To find out which "
"standard linker <command>gcc</command> will use, run: <command>$LFS_TGT-gcc -"
"print-prog-name=ld</command>. (Again, remove the <command>$LFS_TGT-</"
"command> prefix if coming back to this later.)"
msgstr ""
"C'est important pour les raisons mentionnées plus haut. Cela démontre aussi "
"que le script configure de GCC ne cherche pas les répertoires du PATH pour "
"trouver les outils à utiliser. Néanmoins, lors d'une opération normale de "
"<command>gcc</command>, les mêmes chemins de recherche ne sont pas forcément "
"utilisés. Pour trouver quel éditeur de liens standard <command>gcc</command> "
"utilisera, lancez&nbsp;: <command>$LFS_TGT-gcc -print-prog-name=ld</command>."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:347
#, fuzzy
#| msgid ""
#| "Detailed information can be obtained from <command>gcc</command> by "
#| "passing it the <parameter>-v</parameter> command line option while "
#| "compiling a dummy program. For example, <command>gcc -v dummy.c</command> "
#| "will show detailed information about the preprocessor, compilation, and "
#| "assembly stages, including <command>gcc</command>'s included search paths "
#| "and their order."
msgid ""
"Detailed information can be obtained from <command>gcc</command> by passing "
"it the <parameter>-v</parameter> command line option while compiling a "
"program. For example, <command>$LFS_TGT-gcc -v <replaceable>example.c</"
"replaceable></command> (or without <command> $LFS_TGT-</command> if coming "
"back later) will show detailed information about the preprocessor, "
"compilation, and assembly stages, including <command>gcc</command>'s search "
"paths for included headers and their order."
msgstr ""
"Vous pouvez obtenir des informations détaillées à partir de <command>gcc</"
"command> en lui fournissant l'option en ligne de commande <parameter>-v</"
"parameter> lors de la compilation d'un programme de test. Par exemple, "
"<command>gcc -v dummy.c</command> affichera des informations détaillées sur "
"les étapes du préprocesseur, de la compilation et de l'assemblage, avec les "
"chemins de recherche inclus par <command>gcc</command> et leur ordre."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:356
#, fuzzy
#| msgid ""
#| "Next installed are sanitized Linux API headers. These allow the standard "
#| "C library (Glibc) to interface with features that the Linux kernel will "
#| "provide."
msgid ""
"Next up: sanitized Linux API headers. These allow the standard C library "
"(glibc) to interface with features that the Linux kernel will provide."
msgstr ""
"Nous installons ensuite les en-têtes de l'API de Linux nettoyées. Elles "
"permettent à la bibliothèque standard (Glibc) d'interagir avec les "
"fonctionnalités que le noyau Linux fournira."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:360
#, fuzzy
#| msgid ""
#| "The next package installed is Glibc. The most important considerations "
#| "for building Glibc are the compiler, binary tools, and kernel headers. "
#| "The compiler is generally not an issue since Glibc will always use the "
#| "compiler relating to the <parameter>--host</parameter> parameter passed "
#| "to its configure script; e.g. in our case, the compiler will be "
#| "<command>$LFS_TGT-gcc</command>. The binary tools and kernel headers can "
#| "be a bit more complicated. Therefore, we take no risks and use the "
#| "available configure switches to enforce the correct selections. After the "
#| "run of <command>configure</command>, check the contents of the "
#| "<filename>config.make</filename> file in the <filename "
#| "class=\"directory\">build</filename> directory for all important "
#| "details.  Note the use of <parameter>CC=\"$LFS_TGT-gcc\"</parameter> "
#| "(with <envar>$LFS_TGT</envar> expanded) to control which binary tools are "
#| "used and the use of the <parameter>-nostdinc</parameter> and <parameter>-"
#| "isystem</parameter> flags to control the compiler's include search path. "
#| "These items highlight an important aspect of the Glibc package&mdash;it "
#| "is very self-sufficient in terms of its build machinery and generally "
#| "does not rely on toolchain defaults."
msgid ""
"Next comes glibc. The most important considerations for building glibc are "
"the compiler, binary tools, and kernel headers. The compiler is generally "
"not an issue since glibc will always use the compiler relating to the "
"<parameter>--host</parameter> parameter passed to its configure script; e."
"g., in our case, the compiler will be <command>$LFS_TGT-gcc</command>. The "
"binary tools and kernel headers can be a bit more complicated. Therefore, we "
"take no risks and use the available configure switches to enforce the "
"correct selections. After the run of <command>configure</command>, check the "
"contents of the <filename>config.make</filename> file in the <filename "
"class=\"directory\">build</filename> directory for all important details.  "
"Note the use of <parameter>CC=\"$LFS_TGT-gcc\"</parameter> (with "
"<envar>$LFS_TGT</envar> expanded) to control which binary tools are used and "
"the use of the <parameter>-nostdinc</parameter> and <parameter>-isystem</"
"parameter> flags to control the compiler's include search path. These items "
"highlight an important aspect of the glibc package&mdash;it is very self-"
"sufficient in terms of its build machinery, and generally does not rely on "
"toolchain defaults."
msgstr ""
"Le paquet installé ensuite est Glibc. Les choses les plus importantes à "
"prendre en considération pour construire Glibc sont le compilateur, les "
"outils binaires et les en-têtes du noyau. Le compilateur ne pose "
"généralement pas de problème car Glibc utilise toujours le compilateur lié "
"au paramètre <parameter>--host</parameter> passé à son script configure, par "
"exemple, dans notre cas, le compilateur sera <command>$LFS_TGT-gcc</"
"command>. Les outils binaires et les en-têtes du noyau peuvent être un peu "
"plus compliqués. Ne prenez donc pas de risque et utilisez les options de "
"configure disponibles pour assurer les bonnes sélections. Après l'exécution "
"de <command>configure</command>, vérifiez le contenu du fichier "
"<filename>config.make</filename> dans le répertoire <filename "
"class=\"directory\">glibc-build</filename> pour tous les détails importants. "
"Notez l'utilisation de <parameter>CC=\"$LFS_TGT-gcc\"</parameter> (où "
"<envar>$LFS_TGT</envar> est étendue) pour contrôler les outils binaires "
"utilisés, et l'utilisation des paramètres <parameter>-nostdinc</parameter> "
"et <parameter>-isystem</parameter> pour contrôler le chemin de recherche des "
"en-têtes du compilateur. Ces éléments soulignent un aspect important du "
"paquet glibc &mdash;&nbsp;il est auto-suffisant en termes de machinerie de "
"construction et ne repose généralement pas sur la chaîne d'outils par défaut."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:379
#, fuzzy
#| msgid ""
#| "As said above, the standard C++ library is compiled next, followed in "
#| "<xref linkend=\"chapter-temporary-tools\"/> by all the programs that need "
#| "themselves to be built. The install step of all those packages uses the "
#| "<envar>DESTDIR</envar> variable to have the programs land into the LFS "
#| "filesystem."
msgid ""
"As mentioned above, the standard C++ library is compiled next, followed in "
"<xref linkend=\"chapter-temporary-tools\"/> by other programs that must be "
"cross-compiled to break circular dependencies at build time.  The install "
"step of all those packages uses the <envar>DESTDIR</envar> variable to force "
"installation in the LFS filesystem."
msgstr ""
"Comme nous venons de le dire, la bibliothèque standard C++ est ensuite "
"compilée, suivi dans le <xref linkend=\"chapter-temporary-tools\"/> par tous "
"les programmes qui ont besoin d'eux-mêmes pour être construits. L'étape "
"initiale de tous ces paquets utilise la variable <envar>DESTDIR</envar> pour "
"que les programmes soient installés dans le système de fichiers LFS."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:386
#, fuzzy
#| msgid ""
#| "At the end of <xref linkend=\"chapter-temporary-tools\"/> the native lfs "
#| "compiler is installed. First binutils-pass2 is built, with the same "
#| "<envar>DESTDIR</envar> install as the other programs, then the second "
#| "pass of GCC is constructed, omitting libstdc++ and other non-important "
#| "libraries.  Due to some weird logic in GCC's configure script, "
#| "<envar>CC_FOR_TARGET</envar> ends up as <command>cc</command> when the "
#| "host is the same as the target, but is different from the build system. "
#| "This is why <parameter>CC_FOR_TARGET=$LFS_TGT-gcc</parameter> is put "
#| "explicitly into the configure options."
msgid ""
"At the end of <xref linkend=\"chapter-temporary-tools\"/> the native LFS "
"compiler is installed. First binutils-pass2 is built, in the same "
"<envar>DESTDIR</envar> directory as the other programs, then the second pass "
"of gcc is constructed, omitting some non-critical libraries.  Due to some "
"weird logic in gcc's configure script, <envar>CC_FOR_TARGET</envar> ends up "
"as <command>cc</command> when the host is the same as the target, but "
"different from the build system. This is why "
"<parameter>CC_FOR_TARGET=$LFS_TGT-gcc</parameter> is declared explicitly as "
"one of the configuration options."
msgstr ""
"À la fin du <xref linkend=\"chapter-temporary-tools\"/> le compilateur lfs "
"natif est installé. binutils-pass2 est d'abord construit, avec la même "
"installation <envar>DESTDIR</envar> que les autres programmes, puis la "
"seconde passe de GCC est construite, sans libstdc++ et les autres "
"bibliothèques non importantes. À cause d'une logique bizarre dans le script "
"de construction de GCC, <envar>CC_FOR_TARGET</envar> devient <command>cc</"
"command> quand l'hôte est le même que la cible, mais est différent du "
"système de construction. C'est pourquoi nous mettons explicitement "
"<parameter>CC_FOR_TARGET=$LFS_TGT-gcc</parameter> dans les options de "
"configure."

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml:397
#, fuzzy
#| msgid ""
#| "Upon entering the chroot environment in <xref linkend=\"chapter-chroot-"
#| "temporary-tools\"/>, the first task is to install libstdc++. Then "
#| "temporary installations of programs needed for the proper operation of "
#| "the toolchain are performed. From this point onwards, the core toolchain "
#| "is self-contained and self-hosted. In <xref linkend=\"chapter-building-"
#| "system\"/>, final versions of all the packages needed for a fully "
#| "functional system are built, tested and installed."
msgid ""
"Upon entering the chroot environment in <xref linkend=\"chapter-chroot-"
"temporary-tools\"/>, the temporary installations of programs needed for the "
"proper operation of the toolchain are performed. From this point onwards, "
"the core toolchain is self-contained and self-hosted. In <xref "
"linkend=\"chapter-building-system\"/>, final versions of all the packages "
"needed for a fully functional system are built, tested, and installed."
msgstr ""
"En entrant dans l'environnement chroot dans le <xref linkend=\"chapter-"
"chroot-temporary-tools\"/>, la première tache consiste à installer libstdc+"
"+. Ensuite, on effectue des installations temporaires de programmes requis "
"pour le bon fonctionnement de la chaîne d'outils. À partir de là, la chaîne "
"de construction de base est auto-suffisante et auto-hébergée. Dans le <xref "
"linkend=\"chapter-building-system\"/>, on construit, teste et installe les "
"versions finales de tous les paquets requis pour un système complètement "
"fonctionnel."

#, fuzzy
#~| msgid ""
#~| "Almost all the build systems use names of the form cpu-vendor-kernel-os "
#~| "referred to as the machine triplet. An astute reader may wonder why a "
#~| "<quote>triplet</quote> refers to a four component name. The reason is "
#~| "history: initially, three component names were enough to designate a "
#~| "machine unambiguously, but with new machines and systems appearing, that "
#~| "proved insufficient. The word <quote>triplet</quote> remained. A simple "
#~| "way to determine your machine triplet is to run the <command>config."
#~| "guess</command> script that comes with the source for many packages. "
#~| "Unpack the binutils sources and run the script: <userinput>./config."
#~| "guess</userinput> and note the output. For example, for a 32-bit Intel "
#~| "processor the output will be <emphasis>i686-pc-linux-gnu</emphasis>. On "
#~| "a 64-bit system it will be <emphasis>x86_64-pc-linux-gnu</emphasis>."
#~ msgid ""
#~ "All packages involved with cross compilation in the book use an autoconf-"
#~ "based building system.  The autoconf-based building system accepts system "
#~ "types in the form cpu-vendor-kernel-os, referred to as the system "
#~ "triplet.  Since the vendor field is mostly irrelevant, autoconf allows to "
#~ "omit it. An astute reader may wonder why a <quote>triplet</quote> refers "
#~ "to a four component name. The reason is the kernel field and the os field "
#~ "originated from one <quote>system</quote> field.  Such a three-field form "
#~ "is still valid today for some systems, for example <literal>x86_64-"
#~ "unknown-freebsd</literal>.  But for other systems, two systems can share "
#~ "the same kernel but still be too different to use a same triplet for "
#~ "them.  For example, an Android running on a mobile phone is completely "
#~ "different from Ubuntu running on an ARM64 server, despite they are "
#~ "running on the same type of CPU (ARM64) and using the same kernel "
#~ "(Linux).  Without an emulation layer, you cannot run an executable for "
#~ "the server on the mobile phone or vice versa.  So the <quote>system</"
#~ "quote> field is separated into kernel and os fields to designate these "
#~ "systems unambiguously.  For our example, the Android system is designated "
#~ "<literal>aarch64-unknown-linux-android</literal>, and the Ubuntu system "
#~ "is designated <literal>aarch64-unknown-linux-gnu</literal>.  The word "
#~ "<quote>triplet</quote> remained. A simple way to determine your system "
#~ "triplet is to run the <command>config.guess</command> script that comes "
#~ "with the source for many packages. Unpack the binutils sources and run "
#~ "the script: <userinput>./config.guess</userinput> and note the output. "
#~ "For example, for a 32-bit Intel processor the output will be "
#~ "<emphasis>i686-pc-linux-gnu</emphasis>. On a 64-bit system it will be "
#~ "<emphasis>x86_64-pc-linux-gnu</emphasis>. On most Linux systems the even "
#~ "simpler <command>gcc -dumpmachine</command> command will give you similar "
#~ "information."
#~ msgstr ""
#~ "Presque tous les systèmes de construction utilisent des noms de la forme "
#~ "cpu-fabriquant-noyau-os, souvent appelé le triplet machine. Le lecteur "
#~ "attentif se demandera pourquoi un nom à quatre composants s'appelle un "
#~ "<quote>triplet</quote>. La raison est historique&nbsp;: initialement, on "
#~ "utilisait trois composants pour désigner une machine sans ambiguïté, mais "
#~ "avec les nouvelles machines et les nouveaux systèmes, cela s'avère "
#~ "insuffisant. Le mot <quote>triplet</quote> est resté. Une façon simple de "
#~ "déterminer le nom du triplet machine est de lancer le script "
#~ "<command>config.guess</command> venant avec les sources d'un grand nombre "
#~ "de paquets. Déballez les sources de binutils, lancez le script "
#~ "<userinput>./config.guess</userinput> et notez la sortie. Par exemple, "
#~ "pour un processeur Intel 32 bits moderne, la sortie sera du type "
#~ "<emphasis>i686-pc-linux-gnu</emphasis>. Sur un système 64 bits cela sera "
#~ "<emphasis>x86_64-pc-linux-gnu</emphasis>."

#~ msgid ""
#~ "Some key technical points of how the <xref linkend=\"chapter-temporary-"
#~ "tools\"/> build method works:"
#~ msgstr ""
#~ "Quelques points techniques sur la façon dont fonctionne la méthode de "
#~ "construction du <xref linkend=\"chapter-temporary-tools\"/>&nbsp;:"

#~ msgid ""
#~ "Slightly adjusting the name of the working platform, by changing the "
#~ "&quot;vendor&quot; field target triplet by way of the <envar>LFS_TGT</"
#~ "envar> variable, ensures that the first build of Binutils and GCC "
#~ "produces a compatible cross-linker and cross-compiler. Instead of "
#~ "producing binaries for another architecture, the cross-linker and cross-"
#~ "compiler will produce binaries compatible with the current hardware."
#~ msgstr ""
#~ "Un léger ajustement du nom de la plateforme de travail, en modifiant le "
#~ "champ «&nbsp;vendor&nbsp;» de la triplette cible via la variable "
#~ "<envar>LFS_TGT</envar>, assure que la première construction de Binutils "
#~ "et de GCC produira un éditeur de liens et un compilateur croisés "
#~ "compatibles. Au lieu de produire des binaires pour une autre "
#~ "architecture, l'éditeur de liens et le compilateur croisé vont produire "
#~ "des binaires compatibles avec le matériel actuel."

#~ msgid ""
#~ "The temporary libraries are cross-compiled.  Because a cross-compiler by "
#~ "its nature cannot rely on anything from its host system, this method "
#~ "removes potential contamination of the target system by lessening the "
#~ "chance of headers or libraries from the host being incorporated into the "
#~ "new tools.  Cross-compilation also allows for the possibility of building "
#~ "both 32-bit and 64-bit libraries on 64-bit capable hardware."
#~ msgstr ""
#~ "Les bibliothèques temporaires sont compilées de manière croisée. "
#~ "Puisqu'un compilateur croisé, par nature, ne peut pas se baser sur quoi "
#~ "que ce soit issu de son système hôte, cette méthode supprime toute "
#~ "possibilité de contamination du système cible en diminuant les chances "
#~ "des en-têtes ou des bibliothèques du système hôte d'être incluses dans "
#~ "les nouveaux outils. La compilation croisée offre aussi la possibilité de "
#~ "construire à la fois des bibliothèques 32 et 64 bits sur du matériel "
#~ "gérant le 64 bits."

#~ msgid ""
#~ "Careful manipulation of the GCC source tells the compiler which target "
#~ "dynamic linker will be used."
#~ msgstr ""
#~ "Une manipulation attentionnée des sources de GCC dira au compilateur "
#~ "l'éditeur de liens dynamiques cible à utiliser."

#~ msgid ""
#~ "During the second pass of Binutils, we are able to utilize the "
#~ "<parameter>--with-lib-path</parameter> configure switch to control "
#~ "<command>ld</command>'s library search path."
#~ msgstr ""
#~ "Lors de la seconde passe de Binutils, nous sommes capables d'utiliser "
#~ "l'option <parameter>--with-lib-path</parameter> de configure pour "
#~ "contrôler le chemin de recherche des bibliothèques de <command>ld</"
#~ "command>."

#~ msgid ""
#~ "For the second pass of GCC, its sources also need to be modified to tell "
#~ "GCC to use the new dynamic linker. Failure to do so will result in the "
#~ "GCC programs themselves having the name of the dynamic linker from the "
#~ "host system's <filename class=\"directory\">/lib</filename> directory "
#~ "embedded into them, which would defeat the goal of getting away from the "
#~ "host. From this point onwards, the core toolchain is self-contained and "
#~ "self-hosted. The remainder of the <xref linkend=\"chapter-temporary-"
#~ "tools\"/> packages all build against the new Glibc in <filename "
#~ "class=\"directory\">/tools</filename>."
#~ msgstr ""
#~ "Pour la deuxième passe de GCC, ses sources doivent aussi être modifiées "
#~ "pour dire à GCC d'utiliser le nouvel éditeur de liens dynamiques. Un "
#~ "échec pour faire cela aura pour conséquence que les GCC eux-mêmes auront "
#~ "le même nom que l'éditeur de liens dynamique du répertoire <filename "
#~ "class=\"directory\">/lib</filename> du système hôte embarqué à "
#~ "l'intérieur, ce qui irait à l'encontre de l'objectif de se démarquer de "
#~ "l'hôte. Dans cette optique, l'ensemble d'outils c&oelig;ur est auto-"
#~ "suffisant et auto-hébergé. Le reste des paquets du <xref "
#~ "linkend=\"chapter-temporary-tools\"/> se construit contre la nouvelle "
#~ "Glibc de <filename class=\"directory\">/tools</filename>."

#~ msgid ""
#~ "Upon entering the chroot environment in <xref linkend=\"chapter-building-"
#~ "system\"/>, the first major package to be installed is Glibc, due to its "
#~ "self-sufficient nature mentioned above.  Once this Glibc is installed "
#~ "into <filename class=\"directory\">/usr</filename>, we will perform a "
#~ "quick changeover of the toolchain defaults, and then proceed in building "
#~ "the rest of the target LFS system."
#~ msgstr ""
#~ "Avant d'entrer dans l'environnement chroot dans le <xref "
#~ "linkend=\"chapter-building-system\"/>, le premier paquet majeur à être "
#~ "installé est Glibc, à cause de sa nature auto-suffisante mentionnée ci-"
#~ "dessus. Une fois que Glibc est installée dans <filename "
#~ "class=\"directory\">/usr</filename>, nous allons réaliser une rapide "
#~ "modification des valeurs par défaut de l'ensemble des outils puis "
#~ "continuer la construction du reste du système LFS cible."
