<sect1 id="ch01-how">
<title>Comment les choses se dérouleront-elles</title>
<?dbhtml filename="how.html" dir="chapter01"?>

<para>Vous allez construire le système LFS en utilisant une distribution Linux
déjà installée, telle que Debian, Mandrake, Red Hat, etc. Le système Linux
existant (l'hôte) sera utilisé en tant que plateforme de démarrage, parce que
vous aurez besoin d'outils comme un compilateur, un éditeur de liens, un
éditeur de texte, et d'autres outils de développement pour construire le
nouveau système. D'ordinaire, les outils requis sont disponibles par défaut si
vous avez sélectionné <quote>développement</quote> comme option d'installation
lorsque vous avez installé le système actuel.</para>

<para>Après avoir téléchargé les packages nécessaires à la constitution d'un
système LFS, vous devrez créer une nouvelle partition native Linux et son
système de fichiers. C'est là que le système LFS sera compilé et installé.
</para>

<para>L'étape suivante, le chapitre 5, discutera de l'installation d'un certain
nombre de packages formant la suite basique de développement (ou ensemble des
outils) qui a été utilisé pour construire le système actuel au chapitre 6.
Certains de ces packages sont nécessaire pour résoudre certaines dépendances
circulaires. Par exemple, pour compiler un compilateur, vous avez besoin d'un
compilateur.</para>

<para>La première chose à faire dans le chapitre 5 est de construire une
première fois l'ensemble des outils, pour Binutils et GCC. Les programmes de
ces packages seront liés statiquement pour être utilisé indépendamment du
système hôte. La deuxième chose à faire est de construire Glibc, la
bibliothèque C. Glibc sera coompilé avec les programmes de l'ensemble des
outils que nous avons justement créé lors de la première passe.</para>

<para>La troisième chose à faire est de construire une deuxième fois
l'ensemble des outils. Cette fois, l'ensemble des outils sera lié dynamiquement
avec la nouvelle construction de Glibc. Le reste des packages du chapitre 5
sont tous construit pendant cette deuxième passe et liés dynamiquement à la
nouvelle Glibc indépendante de l'hôte. Ceci fait, le processus d'installation
de LFS ne dépendra plus de la distribution hôte, avec l'exception du noyau en
cours d'utilisation. Ceci est connu sous la dénomination de <quote>self
contained</quote> et <quote>self hosted</quote>. Il existe une discussion sur
les différences entre des programmes statiquement et dynamiquement liés  au
début du chapitre 5.</para>

<para>Vous pourriez vous dire <quote>que cela semble être énormément de travail
pour simplement s'éloigner de la distribution hôte</quote>. Prenons quelques
minutes pour parler de cela. Le travail évoqué dans le construction des packages
du chapitre 5 est nécessaire pour s'assurer que très peu d'informations de votre
hôte seront inclus dans votre nouveau système LFS. Lorsque vous construisez
les deux premiers packages du chapitre 5, Binutils et GCC, ils seront compilés
statiquement. Cela signifie  que la version de la bibliothèque C de votre
distribution hôte sera intégrée dans tous les programmes binaires que vous avez
compilés. Ceci va causer des problèmes pour vous tout au long de la route (ils
ont été bien documenté). La Glibc de l'hôte est habituellement une quantité
inconnue et peut contenir des bugs ou tout autre chose que nous ne connaissons
pas jusqu'à ce qu'il soit trop tard. Un problème bien connu est que les binaires
liés statiquement sur les systèmes à base de Glibc-2.2.x contenant des appels à
la fonction getpwuid() s'arrêtent brutalement lorsqu'ils sont lancés sur un
système à base de Glibc-2.3.x. Vous allez construire un système basé sur la
Glibc-2.3.x. Vous ne voulez pas construire quelque chose que va s'arrêter sans
raison, n'est-ce pas? Finalement, les tests autoconf de Glibc produisent des
résultats différents suivant qu'une Glibc existante est découverte sur la
distribution hôte. Ceci peut amener des incohérences et stimule les petites
corrections hâtives. Avec ceci en tête, vous pouvez voir que l'effort
supplémentaire pour compiler Binutils et GCC deux fois est nécessaire.</para>

<para>Dans le chapitre 6, le vrai système LFS sera construit. Le programme
chroot (change root) est utilisé pour entrer dans un environnement virtuel et
pour lancer un nouveau shell dont le répertoire racine sera la partition LFS.
Ceci est très similaire au redémarrage en indiquant au noyau que la partition
racine est la partition LFS. La raison pour laquelle vous ne redémarrez pas
réellement est que la création d'un système démarrable demande un travail
supplémentaire inutile. De toute façon, chroot vous permet de continuer en
utilisant l'hôte tant que LFS est en cours de construction. Alors que le
logiciel est installé, vous pouvez simplement passé sur une autre console
virtuelle ou bureau X et continuer à utiliser l'ordinateur comme d'habitude.
</para>

<para>Lorsque tout le logiciel du chapitre 6 est installé, les outils
temporaires construit au chapitre 5 seront supprimés. Les chapitres 7, 8 et 9
finaliseront l'installation. Les scripts de démarrage sont configurés au
chapitre 7, le noyau et le chargeur de démarrage dans le chapitre 8. Le
chapitre 9 a quelques pointeurs pour vous aider après avoir fini le livre.
Enfin, vous lancez le nouveau système LFS.</para>

<para>En résumé, telle est la démarche à suivre. Des informations détaillées
sur les différentes étapes vous seront fournies tout au long des chapitres au fur et à
mesure de votre progression. Si tout n'est pas encore clair, ne vous inquiétez
pas, cela ne saurait tarder.</para>

<para>Veuillez lire le Chapitre 2 avec attention car il explique un certain
nombre de points importants qu'il vous faut connaître avant d'en arriver au
chapitre 5 et au-delà.</para>

</sect1>
