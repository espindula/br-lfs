<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-kernfs">
  <?dbhtml filename="kernfs.html"?>

  <title>Préparer les systèmes de fichiers virtuels du noyau</title>

  <indexterm zone="ch-tools-kernfs">
    <primary sortas="e-/dev/">/dev/*</primary>
  </indexterm>

    <para>Différents systèmes de fichiers exportés par le noyau sont utilisés pour
communiquer avec le noyau lui-même. Ces systèmes de fichiers sont virtuels
du fait qu'aucun espace disque n'est utilisé pour eux. Le contenu de ces
systèmes de fichiers réside en mémoire.</para>

    <para>Commencez en créant les répertoires dans lesquels les systèmes de fichiers
seront montés&nbsp;:</para>

<screen><userinput>mkdir -pv $LFS/{dev,proc,sys,run}</userinput></screen>

  <sect2>
    <title>Création des nœuds initiaux vers les périphériques</title>

    <para>Quand le noyau démarre le système, il a besoin de la présence de quelques
fichiers de périphériques, en particulier les périphériques <filename
class="devicefile">console</filename> et <filename
class="devicefile">null</filename>. Les nœuds de périphérique doivent être
créés sur le disque dur afin d'être disponible avant que le noyau ne
remplisse <systemitem class="filesystem">/dev</systemitem>, et aussi quand
Linux est démarré avec <parameter>init=/bin/bash</parameter>. Créez les
périphériques en exécutant les commandes suivantes&nbsp;:</para>

<screen><userinput>mknod -m 600 $LFS/dev/console c 5 1
mknod -m 666 $LFS/dev/null c 1 3</userinput></screen>

  </sect2>

  <sect2 id="ch-tools-bindmount">
    <title>Monter et peupler /dev</title>

      <para>La méthode recommandée pour peupler le répertoire <filename
class="directory">/dev</filename> de périphériques est de monter un système
de fichiers virtuel (comme <systemitem
class="filesystem">tmpfs</systemitem>) sur le répertoire <filename
class="directory">/dev</filename>, et d'autoriser la création dynamique des
périphériques sur le système de fichiers virtuel une fois qu'ils sont
détectés ou que quelque chose tente d'y accéder.  La création de
périphériques est généralement faite par Udev lors du démarrage. Comme ce
nouveau système ne contient pas encore Udev et n'a pas encore été démarré,
il est nécessaire de monter et de peupler <filename
class="directory">/dev</filename> manuellement. Cela se fait en montant en
double le répertoire <filename class="directory">/dev</filename> du système
hôte. Le montage en double est un type spécial de montage qui vous permet de
créer le miroir d'un répertoire ou d'un point de montage à un autre
endroit. Utilisez la commande suivante pour réaliser cela&nbsp;:</para>

<screen><userinput>mount -v --bind /dev $LFS/dev</userinput></screen>

  </sect2>

  <sect2 id="ch-tools-kernfsmount">
    <title>Monter les systèmes de fichiers virtuels du noyau</title>

      <para>Maintenant montez les systèmes de fichiers virtuels du noyau qui en
résultent&nbsp;:</para>

<!--
    <variablelist>

      <title>The meaning of the mount options for devpts:</title>

      <varlistentry>
        <term><parameter>gid=5</parameter></term>
        <listitem>
          <para>This ensures that all devpts-created device nodes are owned by
          group ID 5.  This is the ID we will use later on for the <systemitem
          class="groupname">tty</systemitem> group.  We use the group ID instead
          of a name, since the host system might use a different ID for its
          <systemitem class="groupname">tty</systemitem> group.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>mode=0620</parameter></term>
        <listitem>
          <para>This ensures that all devpts-created device nodes have mode 0620
          (user readable and writable, group writable).  Together with the
          option above, this ensures that devpts will create device nodes that
          meet the requirements of grantpt(), meaning the Glibc
          <command>pt_chown</command> helper binary (which is not installed by
          default) is not necessary.</para>
        </listitem>
      </varlistentry>

    </variablelist>
-->
<screen><userinput>mount -v --bind /dev/pts $LFS/dev/pts
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys
mount -vt tmpfs tmpfs $LFS/run</userinput></screen>

      <para>Dans certains systèmes hôtes, <filename>/dev/shm</filename> est un lien
symbolique vers <filename class="directory">/run/shm</filename>. Le tmpfs
/run a été monté tout à l'heure, donc vous ne devez créer un répertoire que
dans ce cas précis.</para>

<screen><userinput>if [ -h $LFS/dev/shm ]; then
  mkdir -pv $LFS/$(readlink $LFS/dev/shm)
fi</userinput></screen>

  </sect2>

</sect1>
