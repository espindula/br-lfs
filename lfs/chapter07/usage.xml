<sect1 id="ch07-usage">
<title>How does the booting process with these scripts work?</title>
<?dbhtml filename="usage.html" dir="chapter07"?>

<para>Linux uses a special booting facility named SysVinit. It's based on a
concept of <emphasis>runlevels</emphasis>. It can be widely different 
from one system to another, so it can't be assumed that because things 
worked in &lt;insert distro name&gt; they should work like that in LFS 
too. LFS has its own way of doing things, but it respects generally 
accepted standards.</para>

<para>SysVinit (which we'll call <emphasis>init</emphasis> from now on) works 
using a runlevels scheme. There are 7 (from 0 to 6) runlevels
(actually, there are more runlevels but they are for special cases and 
generally not used. The init man page describes those details), and each 
one of those corresponds to the things the computer is supposed to do when 
it starts up. The default runlevel is 3. Here are the descriptions of the 
different runlevels as they are often implemented:</para>

<literallayout>0: halt the computer
1: single-user mode
2: multi-user mode without networking
3: multi-user mode with networking
4: reserved for customization, otherwise does the same as 3
5: same as 4, it is usually used for GUI login (like X's xdm or KDE's kdm)
6: reboot the computer</literallayout>

<para>The command used to change runlevels is <userinput>init
&lt;runlevel&gt;</userinput> where &lt;runlevel&gt; is 
the target runlevel. For example, to reboot the computer, a user would issue
the init 6 command. The reboot command is just an alias, as is the halt
command an alias to init 0.</para>

<para>There are a number of directories under /etc/rc.d that look like
like rc?.d where ? is the number of the runlevel and rcsysinit.d which
contain a number of symbolic links. Some begin with an K, the others
begin with an S, and all of them have three numbers following the initial
letter. The K means to stop (kill) a service, and the S means to start a
service. The numbers determine the order in which the scripts are run,
from 00 to 99; the lower the number the sooner it gets executed. When init
switches to another runlevel, the appropriate services get killed and
others get started.</para>

<para>The real scripts are in /etc/rc.d/init.d. They do all the work, and the
symlinks all point to them. Killing links and starting links point to 
the same script in /etc/rc.d/init.d. That's because the scripts can be 
called with different parameters like start, stop, restart, reload, 
status. When a K link is encountered, the appropriate script is run with 
the stop argument. When a S link is encountered, the appropriate script 
is run with the start argument.</para>

<para>There is one exception. Links that start with an S in the
rc0.d and rc6.d directories will not cause anything to be started. They
will be called with the parameter <emphasis>stop</emphasis> to stop
something. The logic behind it is that when you are going to reboot or
halt the system, you don't want to start anything, only stop the
system.</para>

<para>These are descriptions of what the arguments make the 
scripts do:</para>

<itemizedlist>

<listitem><para><emphasis>start</emphasis>: The service is 
started.</para></listitem>

<listitem><para><emphasis>stop</emphasis>: The service is 
stopped.</para></listitem>

<listitem><para><emphasis>restart</emphasis>: The service is 
stopped and then started again.</para></listitem>

<listitem><para><emphasis>reload</emphasis>: The configuration 
of the service is updated. 
This is used after the configuration file of a service was modified, when 
the service doesn't need to be restarted.</para></listitem>

<listitem><para><emphasis>status</emphasis>: Tells if the service 
is running and with which PID's.</para></listitem>

</itemizedlist>

<para>Feel free to modify the way the boot process works (after all it's your 
LFS system, not ours). The files here are just an example of how it can be 
done in a nice way (well what we consider nice anyway. You may hate it).</para>

</sect1>

