<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>
<sect1 id="ch-scripts-usage">
<title>Fonctionnement des scripts de démarrage</title>
<?dbhtml filename="usage.html"?>

<indexterm zone="ch-scripts-usage">
<primary sortas="a-Bootscripts">scripts de démarrage</primary>
<secondary>usage</secondary></indexterm>

<para>Linux utilise un service de démarrage spécial nommé SysVinit qui est basé
sur un concept de <emphasis>niveaux d'exécution</emphasis>. Cela peut être bien
différent d'un système à un autre, du coup, il ne peut pas être supposé que,
parce que cela fonctionne dans &lt;insérez ici le nom d'une distribution&gt;,
cela fonctionnera de la même façon dans LFS. LFS a sa propre façon de le faire
mais il respecte généralement les standards établis.</para>

<para>SysVinit (qui sera nommé par la suite <quote>init</quote>) fonctionne en
utilisant un schéma de niveaux d'exécution. Ils sont au nombre de sept (de 0 à
6). En fait, il en existe plus mais ils sont pour des cas spéciaux et ne sont
généralement pas utilisés. La page man d'init les décrit en détails. Chacun
d'entre eux correspond à des actions que l'ordinateur est supposé effectuer
lorsqu'il démarre. Le niveau d'exécution par défaut est 3. Voici les
descriptions sur l'implémentation des différents niveaux
d'exécution&nbsp;:</para>

<literallayout>0: arrête l'ordinateur
1: mode simple utilisateur
2: mode multi-utilisateur sans réseau
3: mode multi-utilisateur avec réseau
4: réservé pour la personnalisation, sinon identique à 3
5: identique à 4, il est habituellement utilisé pour la connexion GUI (comme
<command>xdm</command> de X ou <command>kdm</command> de KDE)
6: redémarre l'ordinateur</literallayout>

<para>La commande utilisée pour modifier le niveau d'exécution est <command>init
<replaceable>[niveau_exécution]</replaceable></command>, où
<replaceable>[niveau_exécution]</replaceable> ets le niveau d'exécution cible.
Par exemple, pour redémarrer l'ordinateur, un utilisateur devra lancer la
commande <command>init 6</command>. La commande <command>reboot</command> est
un alias de la commande précédente, et <command>halt</command> un alias de
<command>init 0</command>.</para>

<para>Il existe un certain nombre de répertoires sous <filename
class="directory">/etc/rc.d</filename> qui ressemble à <filename
class="directory">rc?.d</filename> (où ? est le numéro du niveau d'exécution)
et <filename class="directory">rcsysinit.d</filename>, tous contenant un
certain nombre de liens symboliques. Certains commencent avec un
<emphasis>K</emphasis>, les autres avec un
<emphasis>S</emphasis>, et tous ont deux nombres après la lettre initiale. Le K
signifie l'arrêt (kill) d'un service et le S son lancement (start). Les nombres
déterminent l'ordre dans lequel les scripts sont exécutés, de 00 à 99&mdash;plus
ce nombre est petit, plus tôt le script correspondant sera exécuté. Quand init
bascule sur un autre niveau d'exécution, les services appropriés seront tués et
d'autres seront lancés.</para>

<para>Les vrais scripts sont dans <filename
class="directory">/etc/rc.d/init.d</filename>. Ils font le vrai boulot et les
liens symboliques pointent tous vers eux. Les liens d'arrêt et de lancement
pointent vers le même script dans <filename
class="directory">/etc/rc.d/init.d</filename>. Ceci est dû au fait que les
scripts peuvent être appelés avec différents paramètres comme
<parameter>start</parameter>, <parameter>stop</parameter>,
<parameter>restart</parameter>, <parameter>reload</parameter> et
<parameter>status</parameter>. Quand un lien K est rencontré, le script
approprié est lancé avec l'argument <parameter>stop</parameter>. Quand un lien
S est rencontré, le script approprié est lancé avec l'argument
<parameter>start</parameter> argument.</para>

<para>Il existe une exception à cette explication. Les liens commençant
avec un <emphasis>S</emphasis> dans les répertoires <filename
class="directory">rc0.d</filename> et <filename
class="directory">rc6.d</filename> ne lanceront aucun service. Ils seront
appelés avec l'argument <parameter>stop</parameter> pour arrêter quelque chose.
La logique derrière ceci est que, quand un utilisateur va redémarrer ou arrêter
 le système, rien ne doit être lancé. Le système a seulement besoin d'être
stoppé.</para>

<para>Voici des descriptions de ce que font les arguments des
scripts&nbsp;:</para>

<variablelist>
<varlistentry>
<term><parameter>start</parameter></term>
<listitem><para>Le service est lancé.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>stop</parameter></term>
<listitem><para>Le service est stoppé.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>restart</parameter></term>
<listitem><para>Le service est stoppé puis de nouveau lancé.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>reload</parameter></term>
<listitem><para>La configuration du service est mise à jour. Ceci est utilisé
apr_s que le fichier de configuration d'un service a été modifié, quand le
service n'a pas besoin d'être redémarré.</para></listitem>
</varlistentry>

<varlistentry>
<term><parameter>status</parameter></term>
<listitem><para>Indique si le service est en cours d'exécution ainsi que les
PID associés.</para></listitem>
</varlistentry>
</variablelist>

<para>Vous êtes libre de modifier la façon dont le processus de démarrage
fonctionne (après tout, c'est votre système LFS). Les fichiers donnés ici
sont un exemple d'une façon de faire.</para>

</sect1>

