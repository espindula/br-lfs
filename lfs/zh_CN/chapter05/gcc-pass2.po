# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-04-29 12:10+0000\n"
"PO-Revision-Date: 2020-04-18 06:09+0000\n"
"Last-Translator: Xi Ruoyao <xry111@mengyan1223.wang>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Pootle 2.8\n"
"X-POOTLE-MTIME: 1587190164.458113\n"

#. type: Content of: <sect1><sect1info><address>
#: lfs-en/chapter05/gcc-pass2.xml:14
#, no-wrap
msgid "&gcc-url;"
msgstr "&gcc-url;"

#. type: Content of: <sect1><sect1info>
#: lfs-en/chapter05/gcc-pass2.xml:12
msgid ""
"<productname>gcc-pass2</productname> <productnumber>&gcc-version;</"
"productnumber> <placeholder type=\"address\" id=\"0\"/>"
msgstr ""
"<productname>gcc-pass2</productname> <productnumber>&gcc-version;</"
"productnumber> <placeholder type=\"address\" id=\"0\"/>"

#. type: Content of: <sect1><title>
#: lfs-en/chapter05/gcc-pass2.xml:17
msgid "GCC-&gcc-version; - Pass 2"
msgstr "GCC-&gcc-version; - 第二遍"

#. type: Content of: <sect1><indexterm><primary>
#: lfs-en/chapter05/gcc-pass2.xml:20
msgid "GCC"
msgstr "GCC"

#. type: Content of: <sect1><indexterm><secondary>
#: lfs-en/chapter05/gcc-pass2.xml:21
msgid "tools, pass 2"
msgstr "tools, pass 2"

#. type: Content of: <sect1><sect2><segmentedlist><segtitle>
#: lfs-en/chapter05/gcc-pass2.xml:32
msgid "&buildtime;"
msgstr "&buildtime;"

#. type: Content of: <sect1><sect2><segmentedlist><segtitle>
#: lfs-en/chapter05/gcc-pass2.xml:33
msgid "&diskspace;"
msgstr "&diskspace;"

#. type: Content of: <sect1><sect2><segmentedlist><seglistitem><seg>
#: lfs-en/chapter05/gcc-pass2.xml:36
msgid "&gcc-ch5p2-sbu;"
msgstr "&gcc-ch5p2-sbu;"

#. type: Content of: <sect1><sect2><segmentedlist><seglistitem><seg>
#: lfs-en/chapter05/gcc-pass2.xml:37
msgid "&gcc-ch5p2-du;"
msgstr "&gcc-ch5p2-du;"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/chapter05/gcc-pass2.xml:44
msgid "Installation of GCC"
msgstr "安装 GCC"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:46
msgid ""
"Our first build of GCC has installed a couple of internal system headers.  "
"Normally one of them, <filename>limits.h</filename>, will in turn include "
"the corresponding system <filename>limits.h</filename> header, in this case, "
"<filename>/tools/include/limits.h</filename>. However, at the time of the "
"first build of gcc <filename>/tools/include/limits.h</filename> did not "
"exist, so the internal header that GCC installed is a partial, self-"
"contained file and does not include the extended features of the system "
"header. This was adequate for building the temporary libc, but this build of "
"GCC now requires the full internal header.  Create a full version of the "
"internal header using a command that is identical to what the GCC build "
"system does in normal circumstances:"
msgstr ""
"第一次构建的 GCC 安装了若干内部系统头文件，其中有一个 <filename>limits.h</"
"filename>。一般来说， 它应该包含对应的系统头文件 <filename>limits.h</"
"filename>，在我们的 LFS 环境中，就是 <filename>/tools/include/limits.h</"
"filename>。 然而，在第一次构建 GCC 的时候，<filename>/tools/include/limits."
"h</filename> 还不存在， 因此 GCC 安装的内部头文件是一个不完整的、自给自足的文"
"件， 不包含系统头文件提供的扩展特性。这对于构建临时的 libc 已经足够了， 但构"
"建 GCC 需要完整的内部头文件。 使用以下命令创建一个完整版本的内部头文件， 该命"
"令与 GCC 构建系统在一般情况下生成头文件的命令是一致的："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:58
#, no-wrap
msgid ""
"<userinput remap=\"pre\">cat gcc/limitx.h gcc/glimits.h gcc/limity.h &gt; \\\n"
"  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h</userinput>"
msgstr ""
"<userinput remap=\"pre\">cat gcc/limitx.h gcc/glimits.h gcc/limity.h &gt; \\\n"
"  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:69
msgid ""
"Once again, change the location of GCC's default dynamic linker to use the "
"one installed in <filename class=\"directory\">/tools</filename>."
msgstr ""
"再一次地，改变 GCC 的默认动态链接器，使其使用 <filename class=\"directory\">/"
"tools</filename> 中的动态链接器："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:73
#, no-wrap
msgid ""
"<userinput remap=\"pre\">for file in gcc/config/{linux,i386/linux{,64}}.h\n"
"do\n"
"  cp -uv $file{,.orig}\n"
"  sed -e 's@/lib\\(64\\)\\?\\(32\\)\\?/ld@/tools&amp;@g' \\\n"
"      -e 's@/usr@/tools@g' $file.orig &gt; $file\n"
"  echo '\n"
"#undef STANDARD_STARTFILE_PREFIX_1\n"
"#undef STANDARD_STARTFILE_PREFIX_2\n"
"#define STANDARD_STARTFILE_PREFIX_1 \"/tools/lib/\"\n"
"#define STANDARD_STARTFILE_PREFIX_2 \"\"' &gt;&gt; $file\n"
"  touch $file.orig\n"
"done</userinput>"
msgstr ""
"<userinput remap=\"pre\">for file in gcc/config/{linux,i386/linux{,64}}.h\n"
"do\n"
"  cp -uv $file{,.orig}\n"
"  sed -e 's@/lib\\(64\\)\\?\\(32\\)\\?/ld@/tools&amp;@g' \\\n"
"      -e 's@/usr@/tools@g' $file.orig &gt; $file\n"
"  echo '\n"
"#undef STANDARD_STARTFILE_PREFIX_1\n"
"#undef STANDARD_STARTFILE_PREFIX_2\n"
"#define STANDARD_STARTFILE_PREFIX_1 \"/tools/lib/\"\n"
"#define STANDARD_STARTFILE_PREFIX_2 \"\"' &gt;&gt; $file\n"
"  touch $file.orig\n"
"done</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:86
msgid ""
"If building on x86_64, change the default directory name for 64-bit "
"libraries to <quote>lib</quote>:"
msgstr ""
"如果是在 x86_64 上构建，修改 64 位库文件的默认目录名为 <quote>lib</quote>："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:89
#, no-wrap
msgid ""
"<userinput remap=\"pre\">case $(uname -m) in\n"
"  x86_64)\n"
"    sed -e '/m64=/s/lib64/lib/' \\\n"
"        -i.orig gcc/config/i386/t-linux64\n"
"  ;;\n"
"esac</userinput>"
msgstr ""
"<userinput remap=\"pre\">case $(uname -m) in\n"
"  x86_64)\n"
"    sed -e '/m64=/s/lib64/lib/' \\\n"
"        -i.orig gcc/config/i386/t-linux64\n"
"  ;;\n"
"esac</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:96
#, fuzzy
#| msgid ""
#| "As in the first build of GCC it requires the GMP, MPFR and MPC packages. "
#| "Unpack the tarballs and move them into the required directory names:"
msgid ""
"As in the first build of GCC it requires the GMP, MPFR and MPC packages. "
"Unpack the tarballs and move them into the required directory names:"
msgstr ""
"就像第一次构建 GCC 时一样，它需要 GMP、MPFR 和 MPC 三个包。 解压它们的源码"
"包，并将它们移动到 GCC 要求的目录名："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:100
#, no-wrap
msgid ""
"<userinput remap=\"pre\">tar -xf ../mpfr-&mpfr-version;.tar.xz\n"
"mv -v mpfr-&mpfr-version; mpfr\n"
"tar -xf ../gmp-&gmp-version;.tar.xz\n"
"mv -v gmp-&gmp-version; gmp\n"
"tar -xf ../mpc-&mpc-version;.tar.gz\n"
"mv -v mpc-&mpc-version; mpc</userinput>"
msgstr ""
"<userinput remap=\"pre\">tar -xf ../mpfr-&mpfr-version;.tar.xz\n"
"mv -v mpfr-&mpfr-version; mpfr\n"
"tar -xf ../gmp-&gmp-version;.tar.xz\n"
"mv -v gmp-&gmp-version; gmp\n"
"tar -xf ../mpc-&mpc-version;.tar.gz\n"
"mv -v mpc-&mpc-version; mpc</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:108
msgid "Now fix a problem introduced by Glibc-2.31:"
msgstr "现在修复 Glibc-2.31 引入的一个问题："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:111
#, no-wrap
msgid ""
"<userinput remap=\"pre\">sed -e '1161 s|^|//|' \\\n"
"    -i libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc</userinput>"
msgstr ""
"<userinput remap=\"pre\">sed -e '1161 s|^|//|' \\\n"
"    -i libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:114
msgid "Create a separate build directory again:"
msgstr "再次创建一个独立的构建目录："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:116
#, no-wrap
msgid ""
"<userinput remap=\"pre\">mkdir -v build\n"
"cd       build</userinput>"
msgstr ""
"<userinput remap=\"pre\">mkdir -v build\n"
"cd       build</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:119
msgid ""
"Before starting to build GCC, remember to unset any environment variables "
"that override the default optimization flags."
msgstr "在开始构建 GCC 前，记得清除所有覆盖默认优化开关的环境变量。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:122
msgid "Now prepare GCC for compilation:"
msgstr "现在准备编译 GCC："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:124
#, no-wrap
msgid ""
"<userinput remap=\"configure\">CC=$LFS_TGT-gcc                                    \\\n"
"CXX=$LFS_TGT-g++                                   \\\n"
"AR=$LFS_TGT-ar                                     \\\n"
"RANLIB=$LFS_TGT-ranlib                             \\\n"
"../configure                                       \\\n"
"    --prefix=/tools                                \\\n"
"    --with-local-prefix=/tools                     \\\n"
"    --with-native-system-header-dir=/tools/include \\\n"
"    --enable-languages=c,c++                       \\\n"
"    --disable-libstdcxx-pch                        \\\n"
"    --disable-multilib                             \\\n"
"    --disable-bootstrap                            \\\n"
"    --disable-libgomp</userinput>"
msgstr ""
"<userinput remap=\"configure\">CC=$LFS_TGT-gcc                                    \\\n"
"CXX=$LFS_TGT-g++                                   \\\n"
"AR=$LFS_TGT-ar                                     \\\n"
"RANLIB=$LFS_TGT-ranlib                             \\\n"
"../configure                                       \\\n"
"    --prefix=/tools                                \\\n"
"    --with-local-prefix=/tools                     \\\n"
"    --with-native-system-header-dir=/tools/include \\\n"
"    --enable-languages=c,c++                       \\\n"
"    --disable-libstdcxx-pch                        \\\n"
"    --disable-multilib                             \\\n"
"    --disable-bootstrap                            \\\n"
"    --disable-libgomp</userinput>"

#. type: Content of: <sect1><sect2><variablelist><title>
#: lfs-en/chapter05/gcc-pass2.xml:139
msgid "The meaning of the new configure options:"
msgstr "配置选项的含义："

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass2.xml:142
msgid "<parameter>--enable-languages=c,c++</parameter>"
msgstr "<parameter>--enable-languages=c,c++</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass2.xml:144
msgid "This option ensures that both the C and C++ compilers are built."
msgstr "该选项保证只构建 C 和 C++ 编译器。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass2.xml:150
msgid "<parameter>--disable-libstdcxx-pch</parameter>"
msgstr "<parameter>--disable-libstdcxx-pch</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass2.xml:152
msgid ""
"Do not build the pre-compiled header (PCH) for <filename class=\"libraryfile"
"\">libstdc++</filename>. It takes up a lot of space, and we have no use for "
"it."
msgstr ""
"不构建 <filename class=\"libraryfile\">libstdc++</filename> 的预编译头文件，"
"它占据大量空间，而且我们用不到它。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass2.xml:159
msgid "<parameter>--disable-bootstrap</parameter>"
msgstr "<parameter>--disable-bootstrap</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass2.xml:161
msgid ""
"For native builds of GCC, the default is to do a \"bootstrap\" build. This "
"does not just compile GCC, but compiles it several times.  It uses the "
"programs compiled in a first round to compile itself a second time, and then "
"again a third time.  The second and third iterations are compared to make "
"sure it can reproduce itself flawlessly. This also implies that it was "
"compiled correctly.  However, the LFS build method should provide a solid "
"compiler without the need to bootstrap each time."
msgstr ""
"对于 GCC 的本地构建，默认会进行自举 (bootstrap) 构建。 这种构建方式不仅编译 "
"GCC ，还会将它编译多次。 它使用第一轮编译得到的程序，将自身再编译一次， 然后"
"再用第二轮编译得到的程序将自身编译第三次。 第二次和第三次的结果被比较， 从而"
"确认 GCC 可以没有缺陷地重新编译它自己， 这就表明编译过程准确无误。然而， LFS "
"的构建方法能够提供一个坚实的编译器，而不需要每次都进行自举。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:174
msgid "Compile the package:"
msgstr "编译该软件包："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:176
#, no-wrap
msgid "<userinput remap=\"make\">make</userinput>"
msgstr "<userinput remap=\"make\">make</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:178
msgid "Install the package:"
msgstr "安装该软件包："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:180
#, no-wrap
msgid "<userinput remap=\"install\">make install</userinput>"
msgstr "<userinput remap=\"install\">make install</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:182
msgid ""
"As a finishing touch, create a symlink. Many programs and scripts run "
"<command>cc</command> instead of <command>gcc</command>, which is used to "
"keep programs generic and therefore usable on all kinds of UNIX systems "
"where the GNU C compiler is not always installed. Running <command>cc</"
"command> leaves the system administrator free to decide which C compiler to "
"install:"
msgstr ""
"最后，还需要创建一个符号链接。许多程序和脚本运行 <command>cc</command> 而不"
"是 <command>gcc</command>， 因为前者能够保证程序的通用性，使它可以在所有 "
"UNIX 系统上使用， 无论是否安装了 GNU C 编译器。运行 <command>cc</command> 可"
"以将安装哪种 C 编译器的选择权留给系统管理员。"

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass2.xml:189
#, no-wrap
msgid "<userinput remap=\"install\">ln -sv gcc /tools/bin/cc</userinput>"
msgstr "<userinput remap=\"install\">ln -sv gcc /tools/bin/cc</userinput>"

#. type: Content of: <sect1><sect2><caution><para>
#: lfs-en/chapter05/gcc-pass2.xml:192
msgid ""
"At this point, it is imperative to stop and ensure that the basic functions "
"(compiling and linking) of the new toolchain are working as expected. To "
"perform a sanity check, run the following commands:"
msgstr ""
"在此时，很有必要暂停构建过程，确认新工具链的基本功能 （编译和链接）能够如同我"
"们期望的那样工作。 执行以下命令，进行完整性检查："

#. type: Content of: <sect1><sect2><caution><screen>
#: lfs-en/chapter05/gcc-pass2.xml:196
#, no-wrap
msgid ""
"<userinput>echo 'int main(){}' &gt; dummy.c\n"
"cc dummy.c\n"
"readelf -l a.out | grep ': /tools'</userinput>"
msgstr ""
"<userinput>echo 'int main(){}' &gt; dummy.c\n"
"cc dummy.c\n"
"readelf -l a.out | grep ': /tools'</userinput>"

#. type: Content of: <sect1><sect2><caution><para>
#: lfs-en/chapter05/gcc-pass2.xml:200
msgid ""
"If everything is working correctly, there should be no errors, and the "
"output of the last command will be of the form:"
msgstr ""
"如果一切正常，这些命令应该不产生错误， 且最后一行命令的输出格式应该和下面相"
"同："

#. type: Content of: <sect1><sect2><caution><screen>
#: lfs-en/chapter05/gcc-pass2.xml:203
#, no-wrap
msgid "<computeroutput>[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]</computeroutput>"
msgstr "<computeroutput>[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]</computeroutput>"

#. type: Content of: <sect1><sect2><caution><para>
#: lfs-en/chapter05/gcc-pass2.xml:205
msgid ""
"Note that the dynamic linker will be /tools/lib/ld-linux.so.2 for 32-bit "
"machines."
msgstr "注意，在 32 位机器上，动态链接器为 /tools/lib/ld-linux-so.2。"

#. type: Content of: <sect1><sect2><caution><para>
#: lfs-en/chapter05/gcc-pass2.xml:208
msgid ""
"If the output is not shown as above or there was no output at all, then "
"something is wrong. Investigate and retrace the steps to find out where the "
"problem is and correct it. This issue must be resolved before continuing on. "
"First, perform the sanity check again, using <command>gcc</command> instead "
"of <command>cc</command>. If this works, then the <filename class=\"symlink"
"\">/tools/bin/cc</filename> symlink is missing. Install the symlink as per "
"above.  Next, ensure that the <envar>PATH</envar> is correct. This can be "
"checked by running <command>echo $PATH</command> and verifying that "
"<filename class=\"directory\">/tools/bin</filename> is at the head of the "
"list. If the <envar>PATH</envar> is wrong it could mean that you are not "
"logged in as user <systemitem class=\"username\">lfs</systemitem> or that "
"something went wrong back in <xref linkend=\"ch-preps-settingenviron\" role="
"\".\"/>"
msgstr ""
"如果输出并不像上面展示的那样，或者根本没有输出，则表明出现了问题。检查并重新"
"跟踪各个步骤，找到问题的原因并纠正它。 这个问题在继续构建前必须解决。首先，使"
"用 <command>gcc</command> 命令代替 <command>cc</command>，再次进行完整性检"
"查。如果这次编译器正常工作，则说明 <filename class=\"symlink\">/tools/bin/"
"cc</filename> 符号链接不存在，需要按照之前的说明安装该符号链接。  另外，还要"
"确认 <envar>PATH</envar> 环境变量正确。运行 <command>echo $PATH</command> 命"
"令，确认 <filename class=\"directory\">/tools/bin</filename> 出现在列表的开"
"头。如果 <envar>PATH</envar> 的值不正确， 表明你很可能没有以用户 <systemitem "
"class=\"username\">lfs</systemitem> 的身份登录， 或者在 <xref linkend=\"ch-"
"preps-settingenviron\" role=\".\"/> 的过程中出现了问题。"

#. type: Content of: <sect1><sect2><caution><para>
#: lfs-en/chapter05/gcc-pass2.xml:223
msgid "Once all is well, clean up the test files:"
msgstr "在一切检查顺利后，即可删除测试文件："

#. type: Content of: <sect1><sect2><caution><screen>
#: lfs-en/chapter05/gcc-pass2.xml:225
#, no-wrap
msgid "<userinput>rm -v dummy.c a.out</userinput>"
msgstr "<userinput>rm -v dummy.c a.out</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass2.xml:234
msgid ""
"Details on this package are located in <xref linkend=\"contents-gcc\" role="
"\".\"/>"
msgstr "关于本软件包的更多信息可以在 <xref linkend=\"contents-gcc\"/> 中找到。"
