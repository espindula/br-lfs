# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-09 16:18+0000\n"
"PO-Revision-Date: 2020-09-02 08:09+0000\n"
"Last-Translator: Xi Ruoyao <xry111@mengyan1223.wang>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Pootle 2.8\n"
"X-POOTLE-MTIME: 1599034189.542581\n"

#. type: Attribute 'xreflabel' of: <sect1>
#: lfs-en/chapter05/gcc-pass1.xml:8
msgid "gcc-pass1"
msgstr ""

#. type: Content of: <sect1><sect1info><address>
#: lfs-en/chapter05/gcc-pass1.xml:14
#, no-wrap
msgid "&gcc-url;"
msgstr "&gcc-url;"

#. type: Content of: <sect1><sect1info>
#: lfs-en/chapter05/gcc-pass1.xml:12
msgid ""
"<productname>gcc-pass1</productname> <productnumber>&gcc-version;</"
"productnumber> <placeholder type=\"address\" id=\"0\"/>"
msgstr ""
"<productname>gcc-pass1</productname> <productnumber>&gcc-version;</"
"productnumber> <placeholder type=\"address\" id=\"0\"/>"

#. type: Content of: <sect1><title>
#: lfs-en/chapter05/gcc-pass1.xml:17
msgid "GCC-&gcc-version; - Pass 1"
msgstr "GCC-&gcc-version; - 第一遍"

#. type: Content of: <sect1><indexterm><primary>
#: lfs-en/chapter05/gcc-pass1.xml:20
msgid "GCC"
msgstr "GCC"

#. type: Content of: <sect1><indexterm><secondary>
#: lfs-en/chapter05/gcc-pass1.xml:21
msgid "tools, pass 1"
msgstr "工具，第一遍"

#. type: Content of: <sect1><sect2><segmentedlist><segtitle>
#: lfs-en/chapter05/gcc-pass1.xml:32
msgid "&buildtime;"
msgstr "&buildtime;"

#. type: Content of: <sect1><sect2><segmentedlist><segtitle>
#: lfs-en/chapter05/gcc-pass1.xml:33
msgid "&diskspace;"
msgstr "&diskspace;"

#. type: Content of: <sect1><sect2><segmentedlist><seglistitem><seg>
#: lfs-en/chapter05/gcc-pass1.xml:36
msgid "&gcc-tmpp1-sbu;"
msgstr "&gcc-tmpp1-sbu;"

#. type: Content of: <sect1><sect2><segmentedlist><seglistitem><seg>
#: lfs-en/chapter05/gcc-pass1.xml:37
msgid "&gcc-tmpp1-du;"
msgstr "&gcc-tmpp1-du;"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/chapter05/gcc-pass1.xml:44
msgid "Installation of Cross GCC"
msgstr "安装交叉工具链中的 GCC"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass1.xml:46
msgid ""
"GCC requires the GMP, MPFR and MPC packages. As these packages may not be "
"included in your host distribution, they will be built with GCC.  Unpack "
"each package into the GCC source directory and rename the resulting "
"directories so the GCC build procedures will automatically use them:"
msgstr ""
"GCC 依赖于 GMP、MPFR 和 MPC 这三个包。由于宿主发行版未必包含它们，我们将它们"
"和 GCC 一同构建。将它们都解压到 GCC 源码目录中，并重命名解压出的目录，这样 "
"GCC 构建过程就能自动使用它们："

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/chapter05/gcc-pass1.xml:52
msgid ""
"There are frequent misunderstandings about this chapter.  The procedures are "
"the same as every other chapter as explained earlier (<xref "
"linkend='buildinstr'/>).  First extract the gcc tarball from the sources "
"directory and then change to the directory created.  Only then should you "
"proceed with the instructions below."
msgstr ""
"对于本章内容有一些很常见的误解。该软件包的构建过程就像之前 (<xref "
"linkend='buildinstr'/>) 解释的那样，首先解压 GCC 压缩包，切换到解压出的目录"
"中，再执行下面的命令。"

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass1.xml:58
#, no-wrap
msgid ""
"<userinput remap=\"pre\">tar -xf ../mpfr-&mpfr-version;.tar.xz\n"
"mv -v mpfr-&mpfr-version; mpfr\n"
"tar -xf ../gmp-&gmp-version;.tar.xz\n"
"mv -v gmp-&gmp-version; gmp\n"
"tar -xf ../mpc-&mpc-version;.tar.gz\n"
"mv -v mpc-&mpc-version; mpc</userinput>"
msgstr ""
"<userinput remap=\"pre\">tar -xf ../mpfr-&mpfr-version;.tar.xz\n"
"mv -v mpfr-&mpfr-version; mpfr\n"
"tar -xf ../gmp-&gmp-version;.tar.xz\n"
"mv -v gmp-&gmp-version; gmp\n"
"tar -xf ../mpc-&mpc-version;.tar.gz\n"
"mv -v mpc-&mpc-version; mpc</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass1.xml:65
msgid ""
"On x86_64 hosts, set the default directory name for 64-bit libraries to "
"<quote>lib</quote>:"
msgstr ""
"对于 x86_64 平台，还要设置存放 64 位库的默认目录为 <quote>lib</quote>："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass1.xml:68
#, no-wrap
msgid ""
"<userinput remap=\"pre\">case $(uname -m) in\n"
"  x86_64)\n"
"    sed -e '/m64=/s/lib64/lib/' \\\n"
"        -i.orig gcc/config/i386/t-linux64\n"
" ;;\n"
"esac</userinput>"
msgstr ""
"<userinput remap=\"pre\">case $(uname -m) in\n"
"  x86_64)\n"
"    sed -e '/m64=/s/lib64/lib/' \\\n"
"        -i.orig gcc/config/i386/t-linux64\n"
" ;;\n"
"esac</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass1.xml:75
msgid ""
"The GCC documentation recommends building GCC in a dedicated build directory:"
msgstr "GCC 文档建议在一个专用目录中构建 GCC："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass1.xml:78
#, no-wrap
msgid ""
"<userinput remap=\"pre\">mkdir -v build\n"
"cd       build</userinput>"
msgstr ""
"<userinput remap=\"pre\">mkdir -v build\n"
"cd       build</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass1.xml:81
msgid "Prepare GCC for compilation:"
msgstr "准备编译 GCC："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass1.xml:83
#, fuzzy, no-wrap
#| msgid ""
#| "<userinput remap=\"configure\">../configure                                       \\\n"
#| "    --target=$LFS_TGT                              \\\n"
#| "    --prefix=$LFS/tools                            \\\n"
#| "    --with-glibc-version=2.11                      \\\n"
#| "    --with-sysroot=$LFS                            \\\n"
#| "    --with-newlib                                  \\\n"
#| "    --without-headers                              \\\n"
#| "    --enable-initfini-array                        \\\n"
#| "    --disable-nls                                  \\\n"
#| "    --disable-shared                               \\\n"
#| "    --disable-multilib                             \\\n"
#| "    --disable-decimal-float                        \\\n"
#| "    --disable-threads                              \\\n"
#| "    --disable-libatomic                            \\\n"
#| "    --disable-libgomp                              \\\n"
#| "    --disable-libquadmath                          \\\n"
#| "    --disable-libssp                               \\\n"
#| "    --disable-libvtv                               \\\n"
#| "    --disable-libstdcxx                            \\\n"
#| "    --enable-languages=c,c++</userinput>"
msgid ""
"<userinput remap=\"configure\">../configure                  \\\n"
"    --target=$LFS_TGT         \\\n"
"    --prefix=$LFS/tools       \\\n"
"    --with-glibc-version=&glibc-version; \\\n"
"    --with-sysroot=$LFS       \\\n"
"    --with-newlib             \\\n"
"    --without-headers         \\\n"
"    --enable-default-pie      \\\n"
"    --enable-default-ssp      \\\n"
"    --disable-nls             \\\n"
"    --disable-shared          \\\n"
"    --disable-multilib        \\\n"
"    --disable-decimal-float   \\\n"
"    --disable-threads         \\\n"
"    --disable-libatomic       \\\n"
"    --disable-libgomp         \\\n"
"    --disable-libquadmath     \\\n"
"    --disable-libssp          \\\n"
"    --disable-libvtv          \\\n"
"    --disable-libstdcxx       \\\n"
"    --enable-languages=c,c++</userinput>"
msgstr ""
"<userinput remap=\"configure\">../configure                                       \\\n"
"    --target=$LFS_TGT                              \\\n"
"    --prefix=$LFS/tools                            \\\n"
"    --with-glibc-version=2.11                      \\\n"
"    --with-sysroot=$LFS                            \\\n"
"    --with-newlib                                  \\\n"
"    --without-headers                              \\\n"
"    --enable-initfini-array                        \\\n"
"    --disable-nls                                  \\\n"
"    --disable-shared                               \\\n"
"    --disable-multilib                             \\\n"
"    --disable-decimal-float                        \\\n"
"    --disable-threads                              \\\n"
"    --disable-libatomic                            \\\n"
"    --disable-libgomp                              \\\n"
"    --disable-libquadmath                          \\\n"
"    --disable-libssp                               \\\n"
"    --disable-libvtv                               \\\n"
"    --disable-libstdcxx                            \\\n"
"    --enable-languages=c,c++</userinput>"

#. type: Content of: <sect1><sect2><variablelist><title>
#: lfs-en/chapter05/gcc-pass1.xml:105
msgid "The meaning of the configure options:"
msgstr "配置选项的含义："

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass1.xml:108
#, fuzzy
#| msgid "<parameter>--with-glibc-version=2.11</parameter>"
msgid "<parameter>--with-glibc-version=&glibc-version;</parameter>"
msgstr "<parameter>--with-glibc-version=2.11</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass1.xml:110
msgid ""
"This option specifies the version of glibc which will be used on the target. "
"It is not relevant to the libc of the host distro because everything "
"compiled by pass1 gcc will run in the chroot environment, which is isolated "
"from libc of the host distro."
msgstr ""

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass1.xml:119
msgid "<parameter>--with-newlib</parameter>"
msgstr "<parameter>--with-newlib</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass1.xml:121
msgid ""
"Since a working C library is not yet available, this ensures that the "
"inhibit_libc constant is defined when building libgcc. This prevents the "
"compiling of any code that requires libc support."
msgstr ""
"由于现在没有可用的 C 运行库，使用该选项保证构建 libgcc 时 inhibit_libc 常量被"
"定义，以防止编译任何需要 libc 支持的代码。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass1.xml:128
msgid "<parameter>--without-headers</parameter>"
msgstr "<parameter>--without-headers</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass1.xml:130
msgid ""
"When creating a complete cross-compiler, GCC requires standard headers "
"compatible with the target system. For our purposes these headers will not "
"be needed. This switch prevents GCC from looking for them."
msgstr ""
"在创建完整的交叉编译器时，GCC 需要与目标系统兼容的标准头文件。由于我们的特殊"
"目的，这些头文件并不必要。这个开关防止 GCC 查找它们。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass1.xml:138
msgid "<parameter>--disable-shared</parameter>"
msgstr "<parameter>--disable-shared</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass1.xml:140
msgid ""
"This switch forces GCC to link its internal libraries statically. We need "
"this because the shared libraries require glibc, which is not yet installed "
"on the target system."
msgstr ""
"这个开关强制 GCC 静态链接它的内部库。我们必须这样做，因为动态库需要目标系统中"
"尚未安装的 glibc。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass1.xml:147
msgid "<parameter>--disable-multilib</parameter>"
msgstr "<parameter>--disable-multilib</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass1.xml:149
msgid ""
"On x86_64, LFS does not support a multilib configuration.  This switch is "
"harmless for x86."
msgstr ""
"在 x86_64 平台上，LFS 不支持 multilib 配置。这个开关对于 x86 来说可有可无。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass1.xml:155
msgid ""
"<parameter>--disable-decimal-float, --disable-threads, --disable-libatomic, "
"--disable-libgomp, --disable-libquadmath, --disable-libssp, --disable-"
"libvtv, --disable-libstdcxx</parameter>"
msgstr ""
"<parameter>--disable-decimal-float, --disable-threads, --disable-libatomic, "
"--disable-libgomp, --disable-libquadmath, --disable-libssp, --disable-"
"libvtv, --disable-libstdcxx</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass1.xml:160
msgid ""
"These switches disable support for the decimal floating point extension, "
"threading, libatomic, libgomp, libquadmath, libssp, libvtv, and the C++ "
"standard library respectively. These features will fail to compile when "
"building a cross-compiler and are not necessary for the task of cross-"
"compiling the temporary libc."
msgstr ""
"这些开关禁用对于十进制浮点数、线程、libatomic、libgomp、libquadmath、libssp、"
"libvtv 和 C++ 标准库的支持。在构建交叉编译器时它们的编译会失败，而且在交叉编"
"译临时 libc 时并不需要它们。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/chapter05/gcc-pass1.xml:169
msgid "<parameter>--enable-languages=c,c++</parameter>"
msgstr "<parameter>--enable-languages=c,c++</parameter>"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/chapter05/gcc-pass1.xml:171
msgid ""
"This option ensures that only the C and C++ compilers are built.  These are "
"the only languages needed now."
msgstr "这个选项保证只构建 C 和 C++ 编译器。目前只需要这两个语言。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass1.xml:178
msgid "Compile GCC by running:"
msgstr "执行以下命令编译 GCC："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass1.xml:180
#, no-wrap
msgid "<userinput remap=\"make\">make</userinput>"
msgstr "<userinput remap=\"make\">make</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass1.xml:182
msgid "Install the package:"
msgstr "安装该软件包："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass1.xml:184
#, no-wrap
msgid "<userinput remap=\"install\">make install</userinput>"
msgstr "<userinput remap=\"install\">make install</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass1.xml:186
msgid ""
"This build of GCC has installed a couple of internal system headers.  "
"Normally one of them, <filename>limits.h</filename>, would in turn include "
"the corresponding system <filename>limits.h</filename> header, in this case, "
"<filename>$LFS/usr/include/limits.h</filename>. However, at the time of this "
"build of GCC <filename>$LFS/usr/include/limits.h</filename> does not exist, "
"so the internal header that has just been installed is a partial, self-"
"contained file and does not include the extended features of the system "
"header. This is adequate for building glibc, but the full internal header "
"will be needed later.  Create a full version of the internal header using a "
"command that is identical to what the GCC build system does in normal "
"circumstances:"
msgstr ""
"刚刚构建的 GCC 安装了若干内部系统头文件。其中的 <filename>limits.h</"
"filename> 一般来说，应该包含对应的系统头文件 <filename>limits.h</filename>，"
"在我们的 LFS 环境中，就是 <filename>$LFS/usr/include/limits.h</filename>。然"
"而，在构建 GCC 的时候，<filename>$LFS/usr/include/limits.h</filename> 还不存"
"在，因此 GCC 安装的内部头文件是一个不完整的、自给自足的文件，不包含系统头文件"
"提供的扩展特性。这对于构建临时的 libc 已经足够了，但后续工作将需要完整的内部"
"头文件。使用以下命令创建一个完整版本的内部头文件，该命令与 GCC 构建系统在一般"
"情况下生成该头文件的命令是一致的："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter05/gcc-pass1.xml:198
#, no-wrap
msgid ""
"<userinput remap=\"install\">cd ..\n"
"cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \\\n"
"  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/install-tools/include/limits.h</userinput>"
msgstr ""
"<userinput remap=\"install\">cd ..\n"
"cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \\\n"
"  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/install-tools/include/limits.h</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter05/gcc-pass1.xml:206
msgid ""
"Details on this package are located in <xref linkend=\"contents-gcc\" "
"role=\".\"/>"
msgstr "该软件包的更多细节在<xref linkend=\"contents-gcc\"/>可以找到。"

#~ msgid "<parameter>--enable-initfini-array</parameter>"
#~ msgstr "<parameter>--enable-initfini-array</parameter>"

#~ msgid ""
#~ "This switch forces the use of some internal data structures that are "
#~ "needed but cannot be detected when building a cross compiler."
#~ msgstr ""
#~ "这个开关强制启用一些内部数据结构，它们是必要的，但是在构建交叉编译器时，无"
#~ "法被检测到。"

#~ msgid ""
#~ "This option ensures the package will be compatible with the host's "
#~ "version of glibc.  It is set to the minimum glibc requirement specified "
#~ "in the <xref linkend=\"ch-partitioning-hostreqs\"/>."
#~ msgstr ""
#~ "该选项确保该软件包与宿主的 glibc 版本兼容。它被设定为<xref linkend=\"ch-"
#~ "partitioning-hostreqs\"/>中要求的最小 glibc 版本一致。"

#~ msgid ""
#~ "The following command will change the location of GCC's default dynamic "
#~ "linker to use the one installed in <filename class=\"directory\">/tools</"
#~ "filename>. It also removes <filename class=\"directory\">/usr/include</"
#~ "filename> from GCC's include search path.  Issue:"
#~ msgstr ""
#~ "下面的命令修改 GCC 的默认动态链接器位置，以使用<filename "
#~ "class=\"directory\">/tools</filename> 中的动态链接器。 同时，从 GCC 的头文"
#~ "件搜索路径中删除<filename class=\"directory\">/usr/include</filename>。执"
#~ "行："

#~ msgid ""
#~ "<userinput remap=\"pre\">for file in gcc/config/{linux,i386/linux{,64}}."
#~ "h\n"
#~ "do\n"
#~ "  cp -uv $file{,.orig}\n"
#~ "  sed -e 's@/lib\\(64\\)\\?\\(32\\)\\?/ld@/tools&amp;@g' \\\n"
#~ "      -e 's@/usr@/tools@g' $file.orig &gt; $file\n"
#~ "  echo '\n"
#~ "#undef STANDARD_STARTFILE_PREFIX_1\n"
#~ "#undef STANDARD_STARTFILE_PREFIX_2\n"
#~ "#define STANDARD_STARTFILE_PREFIX_1 \"/tools/lib/\"\n"
#~ "#define STANDARD_STARTFILE_PREFIX_2 \"\"' &gt;&gt; $file\n"
#~ "  touch $file.orig\n"
#~ "done</userinput>"
#~ msgstr ""
#~ "<userinput remap=\"pre\">for file in gcc/config/{linux,i386/linux{,64}}."
#~ "h\n"
#~ "do\n"
#~ "  cp -uv $file{,.orig}\n"
#~ "  sed -e 's@/lib\\(64\\)\\?\\(32\\)\\?/ld@/tools&@g' \\\n"
#~ "      -e 's@/usr@/tools@g' $file.orig > $file\n"
#~ "  echo '\n"
#~ "#undef STANDARD_STARTFILE_PREFIX_1\n"
#~ "#undef STANDARD_STARTFILE_PREFIX_2\n"
#~ "#define STANDARD_STARTFILE_PREFIX_1 \"/tools/lib/\"\n"
#~ "#define STANDARD_STARTFILE_PREFIX_2 \"\"' >> $file\n"
#~ "  touch $file.orig\n"
#~ "done</userinput>"

#, fuzzy
#~| msgid ""
#~| "In case the above seems hard to follow, let's break it down a bit.  "
#~| "First we copy the files <filename>gcc/config/linux.h</filename>, "
#~| "<filename>gcc/config/i386/linux.h</filename>, and <filename>gcc/config/"
#~| "i368/linux64.h</filename> to a file of the same name but with an added "
#~| "suffix of <quote>.orig</quote>. Then the first sed expression prepends "
#~| "<quote>/tools</quote> to every instance of <quote>/lib/ld</quote>, "
#~| "<quote>/lib64/ld</quote> or <quote>/lib32/ld</quote>, while the second "
#~| "one replaces hard-coded instances of <quote>/usr</quote>. Next, we add "
#~| "our define statements which alter the default startfile prefix to the "
#~| "end of the file. Note that the trailing <quote>/</quote> in <quote>/"
#~| "tools/lib/</quote> is required.  Finally, we use <command>touch</"
#~| "command> to update the timestamp on the copied files.  When used in "
#~| "conjunction with <command>cp -u</command>, this prevents unexpected "
#~| "changes to the original files in case the commands are inadvertently run "
#~| "twice."
#~ msgid ""
#~ "In case the above seems hard to follow, let's break it down a bit.  First "
#~ "we copy the files <filename>gcc/config/linux.h</filename>, <filename>gcc/"
#~ "config/i386/linux.h</filename>, and <filename>gcc/config/i368/linux64.h</"
#~ "filename> to a file of the same name but with an added suffix of <quote>."
#~ "orig</quote>. Then the first sed expression prepends <quote>/tools</"
#~ "quote> to every instance of <quote>/lib/ld</quote>, <quote>/lib64/ld</"
#~ "quote> or <quote>/lib32/ld</quote>, while the second one replaces hard-"
#~ "coded instances of <quote>/usr</quote>. Next, we add our define "
#~ "statements which alter the default startfile prefix to the end of the "
#~ "file. Note that the trailing <quote>/</quote> in <quote>/tools/lib/</"
#~ "quote> is required.  Finally, we use <command>touch</command> to update "
#~ "the timestamp on the copied files.  When used in conjunction with "
#~ "<command>cp -u</command>, this prevents unexpected changes to the "
#~ "original files in case the commands are inadvertently run twice."
#~ msgstr ""
#~ "如果上面的命令看上去难以理解，把它分开来看。首先我们复制 <filename>gcc/"
#~ "config/linux.h</filename>，<filename>gcc/config/i386/linux.h</filename>，"
#~ "以及 <filename>gcc/config/i368/linux64.h</filename>，将它们备份为名称是原"
#~ "文件名加上 <quote>.orig</quote> 后缀的文件。然后第一个 sed 表达式将所有 "
#~ "<quote>/lib/ld</quote>、 <quote>/lib64/ld</quote> 或者 <quote>/lib32/ld</"
#~ "quote> 之前都加上 <quote>/tools</quote>，第二个将硬编码的 <quote>/usr</"
#~ "quote> 替换掉。然后，我们在文件末尾增加自己的宏定义， 修改默认的启动文件 "
#~ "(startfile) 前缀。注意，在 <quote>/tools/lib/</quote> 中，最后的 <quote>/"
#~ "</quote> 是必要的。 最后，使用 <command>touch</command> 命令更新被复制的文"
#~ "件的时间戳。 这与 <command>cp -u</command> 命令结合起来， 防止我们不小心把"
#~ "命令输入两次，从而对文件造成非预期的修改。"

#~ msgid "<parameter>--with-local-prefix=/tools</parameter>"
#~ msgstr "<parameter>--with-local-prefix=/tools</parameter>"

#~ msgid ""
#~ "The local prefix is the location in the system that GCC will search for "
#~ "locally installed include files. The default is <filename>/usr/local</"
#~ "filename>.  Setting this to <filename>/tools</filename> helps keep the "
#~ "host location of <filename>/usr/local</filename> out of this GCC's search "
#~ "path."
#~ msgstr ""
#~ "本地前缀是 GCC 在系统中寻找本地安装的包含文件的位置，它的默认值是 "
#~ "<filename>/usr/local</filename>。将它设置为 <filename>/tools</filename>，"
#~ "从而将宿主系统的 <filename>/usr/local</filename> 排除在 GCC 搜索路径外。"

#~ msgid ""
#~ "<parameter>--with-native-system-header-dir=/tools/include</parameter>"
#~ msgstr ""
#~ "<parameter>--with-native-system-header-dir=/tools/include</parameter>"

#~ msgid ""
#~ "By default, GCC searches <filename>/usr/include</filename> for system "
#~ "headers. In conjunction with the sysroot switch, this would normally "
#~ "translate to <filename>$LFS/usr/include</filename>. However the headers "
#~ "that will be installed in the next two sections will go to <filename>$LFS/"
#~ "tools/include</filename>. This switch ensures that gcc will find them "
#~ "correctly. In the second pass of GCC, this same switch will ensure that "
#~ "no headers from the host system are found."
#~ msgstr ""
#~ "默认情况下，GCC 在 <filename>/usr/include</filename> 中搜索系统头文件。由"
#~ "于我们使用了 sysroot 开关， 它会被改写成 <filename>$LFS/usr/include</"
#~ "filename>。 然而，在之后的两节中，我们会把头文件安装在 <filename>$LFS/"
#~ "tools/include</filename>。这个开关保证 GCC 能够正确地找到它们。在第二遍编"
#~ "译 GCC 时，将再次使用这个开关，从而确保不会使用宿主系统的头文件。"

#~ msgid ""
#~ "Compilation is now complete. At this point, the test suite would normally "
#~ "be run, but, as mentioned before, the test suite framework is not in "
#~ "place yet. The benefits of running the tests at this point are minimal "
#~ "since the programs from this first pass will soon be replaced."
#~ msgstr ""
#~ "现在 GCC 的编译已经完成。此时，通常来说应该执行测试套件。 然而正如前文所"
#~ "述，测试套件框架还没有就位， 而且第一遍编译的 GCC 程序很快就会被替换，运行"
#~ "测试套件的收益极小。"
