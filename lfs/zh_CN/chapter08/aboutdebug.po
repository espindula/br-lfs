# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-06-19 12:09+0000\n"
"PO-Revision-Date: 2020-09-02 08:12+0000\n"
"Last-Translator: Xi Ruoyao <xry111@mengyan1223.wang>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Pootle 2.8\n"
"X-POOTLE-MTIME: 1599034357.110170\n"

#. type: Content of: <sect1><title>
#: lfs-en/chapter08/aboutdebug.xml:11
msgid "About Debugging Symbols"
msgstr "关于调试符号"

#. type: Content of: <sect1><para>
#: lfs-en/chapter08/aboutdebug.xml:13
msgid ""
"Most programs and libraries are, by default, compiled with debugging symbols "
"included (with <command>gcc</command>'s <parameter>-g</parameter> "
"option). This means that when debugging a program or library that was "
"compiled with debugging information, the debugger can provide not only "
"memory addresses, but also the names of the routines and variables."
msgstr ""
"许多程序和库在默认情况下被编译为带有调试符号的二进制文件 (通过使用 <command>gcc</command> 的 "
"<parameter>-g</parameter> "
"选项)。这意味着在调试这些带有调试信息的程序和库时，调试器不仅能给出内存地址，还能给出子程序和变量的名称。"

#. type: Content of: <sect1><para>
#: lfs-en/chapter08/aboutdebug.xml:20
msgid ""
"However, the inclusion of these debugging symbols enlarges a program or "
"library significantly. The following is an example of the amount of space "
"these symbols occupy:"
msgstr "然而，插入这些调试符号会显著增大程序或库的体积。下面是一些表现调试符号占用空间的例子："

#. type: Content of: <sect1><itemizedlist><listitem><para>
#: lfs-en/chapter08/aboutdebug.xml:26
msgid "A <command>bash</command> binary with debugging symbols: 1200 KB"
msgstr "一个有调试符号的 <command>bash</command> 二进制程序：1200 KB"

#. type: Content of: <sect1><itemizedlist><listitem><para>
#: lfs-en/chapter08/aboutdebug.xml:30
msgid "A <command>bash</command> binary without debugging symbols: 480 KB"
msgstr "一个没有调试符号的 <command>bash</command> 二进制程序：480 KB"

#. type: Content of: <sect1><itemizedlist><listitem><para>
#: lfs-en/chapter08/aboutdebug.xml:34
msgid ""
"Glibc and GCC files (<filename class=\"directory\">/lib</filename> and "
"<filename class=\"directory\">/usr/lib</filename>) with debugging symbols: "
"87 MB"
msgstr ""
"带有调试符号的 Glibc 和 GCC 文件 (<filename class=\"directory\">/lib</filename> 和 <"
"filename class=\"directory\">/usr/lib</filename> 目录中)：87 MB"

#. type: Content of: <sect1><itemizedlist><listitem><para>
#: lfs-en/chapter08/aboutdebug.xml:39
msgid "Glibc and GCC files without debugging symbols: 16 MB"
msgstr "没有调试符号的 Glibc 和 GCC 文件：16 MB"

#. type: Content of: <sect1><para>
#: lfs-en/chapter08/aboutdebug.xml:43
msgid ""
"Sizes may vary depending on which compiler and C library were used, but when "
"comparing programs with and without debugging symbols, the difference will "
"usually be a factor between two and five."
msgstr "以上文件大小的值可能随编译器和 C 运行库的版本而变化，但在比较带调试符号和不带调试符号的程序时，它们文件大小的差距通常达到 2 至 5 倍。"

#. type: Content of: <sect1><para>
#: lfs-en/chapter08/aboutdebug.xml:47
msgid ""
"Because most users will never use a debugger on their system software, a lot "
"of disk space can be regained by removing these symbols. The next section "
"shows how to strip all debugging symbols from the programs and libraries."
msgstr "由于大多数用户永远不会用调试器调试系统软件，可以通过移除它们的调试符号，回收大量磁盘空间。下一节展示如何从系统程序和库中移除所有调试符号。"
