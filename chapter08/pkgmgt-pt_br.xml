<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-pkgmgt">
  <?dbhtml filename="pkgmgt-pt_br.html"?>

<!--

Direitos autorais (Copyright): (c) 2022 Jamenson Ferreira Espindula de Almeida Melo (<jafesp@gmail.com>).

Direitos autorais da versão modificada traduzida para a língua 
portuguesa escrita e falada no Brasil: (c) 2022 Jamenson Ferreira 
Espindula de Almeida Melo (<jafesp@gmail.com>).

  Este trabalho de tradução do livro "Linux From Scratch" é classificado
  pela Free Software Foundation como sendo uma "versão modificada" do
  mencionado livro.  Em assim sendo, na qualidade de tradutor, produtor
  da "versão modificada" e titular dos direitos autorais sobre a versão
  traduzida para a língua portuguesa do livro "Linux From Scratch",
  concede-se a seguinte permissão:

  É concedida permissão para copiar, distribuir e (ou) modificar este
  livro "Linux From Scratch", versão traduzida para a língua portuguesa,
  sob os termos da Licença de Documentação Livre GNU, versão 1.3 ou
  qualquer versão posterior publicada pela Free Software Foundation; sem
  Seções Invariantes, sem Textos de Capa Frontal e sem Textos de Quarta
  Capa.  Uma cópia da licença está incluída na seção intitulada "Licença
  de Documentação Livre GNU".

# Atenção: todos os documentos aqui publicados são distribuídos sem qualquer garantia, implícita e (ou) explícita.

  Permission is granted to copy, distribute and (or) modify this book
  "Linux From Scratch", translated into Brazilian Portuguese, under the
  terms of the GNU Free Documentation License, Version 1.3 or any later
  version published by the Free Software Foundation; with no Invariant
  Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
  the license is included in the section entitled "GNU Free
  Documentation License".

# Warning: all the files herein published are released with no warranty, implicit and (or) explicit.
-->

  <title>Gerenciamento de Pacote</title>

  <para>Gerenciamento de Pacote é uma adição frequentemente solicitada 
  ao Livro LFS.  Um Gerenciador de Pacote permite monitorar a instalação 
  de arquivos tornando fácil remover e atualizar pacotes.  Assim como 
  os arquivos binários e bibliotecas, um gerenciador de pacote lidará 
  com a instalação de arquivos de configuração.  Antes que você comece a 
  questionar, NÃO&mdash;esta seção não falará nem recomendará qualquer 
  gerenciador de pacote em particular.  O que ela fornece é um resumo 
  acerca das técnicas mais populares e como elas funcionam.  O 
  gerenciador de pacote perfeito para você talvez esteja entre essas 
  técnicas ou talvez seja uma combinação de duas ou mais dessas 
  técnicas.  Esta seção menciona brevemente problemas que talvez surjam 
  quando da atualização de pacotes.</para>

  <para>Algumas razões porque nenhum gerenciador de pacote é mencionado 
  em LFS ou BLFS incluem:</para>

  <itemizedlist>
    <listitem>

      <para>Lidar com gerenciamento de pacote retira o foco das 
      finalidades desses livros&mdash;ensinar como um sistema Linux é 
      construído.</para>

    </listitem>

    <listitem>

      <para>Existem múltiplas soluções para gerenciamento de pacote, 
      cada uma tendo seus pontos fortes e fracos.  Incluir uma que 
      satisfaça todas as audiências é difícil.</para>

    </listitem>
  </itemizedlist>

  <para>Existem algumas dicas escritas no tópico acerca de gerenciamento 
  de pacote.  Visite o <ulink url="&hints-root;">Hints Project</ulink> e 
  veja se uma delas se adéqua às suas necessidades.</para>

  <sect2 id='pkgmgmt-upgrade-issues'>
    <title>Problemas de Atualização</title>

    <para>Um Gerenciador de Pacote torna fácil atualizar para versões 
    mais novas quando elas são liberadas.  Geralmente as instruções nos 
    livros LFS e BLFS podem ser usadas para atualizar para versões mais 
    novas.  Aqui estão alguns pontos que você deveria estar ciente 
    quando da atualização de pacotes, especialmente em um sistema em 
    execução.</para>

    <itemizedlist>
      <listitem>

        <para>Se o kernel Linux precisar ser atualizado (por exemplo, de 
        5.10.17 para 5.10.18 ou 5.11.1), então nada mais precisa ser 
        reconstruído.  O sistema seguirá funcionando bem graças à borda 
        bem definida entre kernel e espaço de usuária(o).  
        Especificamente, os cabeçalhos de API de Linux não precisam ser 
        (e não deveriam ser, veja-se o próximo item) atualizados 
        juntamente com o kernel.  Você precisará reiniciar seu sistema 
        para usar o kernel atualizado.</para>

      </listitem>

      <listitem>

        <para>Se os cabeçalhos de API de Linux ou Glibc precisarem ser 
        atualizados para uma versão mais nova, (por exemplo, de 
        glibc-2.31 para glibc-2.32), então é mais seguro reconstruir 
        LFS.  Ainda que você <emphasis>talvez</emphasis> seja capaz de 
        reconstruir todos os pacotes na ordem de dependência deles, nós 
        não recomendamos isso.</para>

      </listitem>

      <listitem>

        <para>Se um pacote contendo uma biblioteca compartilhada for 
        atualizado, e se o nome da biblioteca mudar, então quaisquer 
        pacotes dinamicamente vinculados à biblioteca precisam ser 
        recompilados com a finalidade de vincular à biblioteca mais 
        nova.  (Note que não existe correlação entre a versão de pacote 
        e o nome da biblioteca).  Por exemplo, considere um pacote 
        foo-1.2.3 que instala uma biblioteca compartilhada com nome 
        <filename class='libraryfile'>libfoo.so.1</filename>.  Se você 
        atualizar o pacote para uma versão mais nova foo-1.2.4 que 
        instala uma biblioteca compartilhada com nome <filename 
        class='libraryfile'>libfoo.so.2</filename>.  Nesse caso, 
        quaisquer pacotes que estiverem dinamicamente vinculados à 
        <filename class='libraryfile'>libfoo.so.1</filename> precisam 
        ser recompilados para vincular à 
        <filename class='libraryfile'>libfoo.so.2</filename> com a finalidade de 
        usar a nova versão de biblioteca.  Você não deveria remover as 
        bibliotecas anteriores a menos que todos os pacotes dependentes 
        sejam recompilados.</para>

      </listitem>

      <listitem>

        <para>Se um pacote contendo uma biblioteca compartilhada for 
        atualizado, e o nome da biblioteca não mudar, porém o número de 
        versão do <emphasis role="bold">arquivo</emphasis> de biblioteca 
        decrescer (por exemplo, o nome da biblioteca é mantido como 
        <filename class='libraryfile'>libfoo.so.1</filename>, porém o 
        nome do arquivo de biblioteca é modificado de 
        <filename class='libraryfile'>libfoo.so.1.25</filename> para 
        <filename class='libraryfile'>libfoo.so.1.24</filename>), então você 
        deveria remover o arquivo de biblioteca originário da versão 
        previamente instalada 
        (<filename class='libraryfile'>libfoo.so.1.25</filename> no caso).  Ou, uma 
        execução de <command>ldconfig</command> (por você mesmo usando 
        uma linha de comando, ou pela instalação de algum pacote) 
        reconfigurará o link simbólico 
        <filename class='libraryfile'>libfoo.so.1</filename> para apontar para o 
        antigo arquivo de biblioteca, pois ele aparenta ter uma versão 
        <quote>mais nova</quote>, uma vez que seu número de versão é 
        mais largo.  Essa situação talvez aconteceu se você teve que 
        desatualizar um pacote, ou o pacote muda repentinamente o 
        esquema de versionamento de arquivos de biblioteca.</para>

      </listitem>

      <listitem>

        <para>Se um pacote contendo uma biblioteca compartilhada for 
        atualizado, e o nome da biblioteca não mudar, porém um problema 
        severo (especialmente, uma vulnerabilidade de segurança) for 
        corrigido, então todos os aplicativos em execução vinculados à 
        biblioteca compartilhada deveriam ser reiniciados.  O seguinte 
        comando, executado como 
        <systemitem class="username">root</systemitem> após atualização, listará o 
        que está usando as versões antigas daquelas bibliotecas 
        (substitua <replaceable>libfoo</replaceable> com o nome da 
        biblioteca):</para>

<screen role="nodump"><userinput>grep -l  -e '<replaceable>libfoo</replaceable>.*deleted' /proc/*/maps |
   tr -cd 0-9\\n | xargs -r ps u</userinput></screen>

        <para>Se <application>OpenSSH</application> estiver sendo usado 
        para acessar o sistema e ele estiver vinculado à biblioteca 
        atualizada, então você precisa reiniciar o serviço 
        <command>sshd</command>, então deslogar-se, logar-se novamente, 
        e reexecutar aquele comando para confirmar que nada ainda está 
        usando as bibliotecas deletadas.</para>

      </listitem>

      <listitem>

        <para>Se um binário ou uma biblioteca compartilhada for 
        sobrescrito, então os processos usando o código ou dados no 
        binário ou biblioteca talvez quebrem.  A maneira correta para 
        atualizar um binário ou uma biblioteca compartilhada sem causar 
        quebra ao processo é removê-lo primeiro, então instalar a versão 
        nova na posição.  O comando <command>install</command> fornecido 
        por <application>Coreutils</application> já implementou isso e a 
        maioria dos pacotes usa ele para instalar binários e 
        bibliotecas.  Isso significa que você não estaria encrencada(o) 
        por esse problema a maior parte do tempo.  Entretanto, o 
        processo de instalação de alguns pacotes (notadamente Mozilla JS 
        em BLFS) apenas sobrescreve o arquivo se ele existir e causa uma 
        quebra, de forma que é mais seguro salvar seu trabalho e 
        fechar processos em execução desnecessários antes de atualizar 
        um pacote.</para>

      </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>Técnicas de Gerenciamento de Pacote</title>

    <para>As seguintes são algumas técnicas comuns de gerenciamento de 
    pacote.  Antes de se decidir acerca de um gerenciador de pacote, 
    pesquise sobre as várias técnicas, particularmente os pontos fracos 
    do esquema em particular.</para>

    <sect3>
      <title>Está Tudo na Minha Cabeça!</title>

      <para>Sim, isso é uma técnica de gerenciamento de pacote.  Algumas 
      pessoas não encontram a necessidade para um gerenciador de pacote, 
      pois elas conhecem os pacotes intimamente e sabem quais arquivos 
      estão instalados por cada pacote.  Algumas(ns) usuárias(os) também 
      não precisam de qualquer gerenciamento de pacote, pois elas(es) 
      planejam reconstruir o sistema inteiro quando um pacote for 
      mudado.</para>

    </sect3>

    <sect3>
      <title>Instalação em Diretórios Separados</title>

      <para>Esse é um gerenciamento de pacote simplista que não 
      necessita de qualquer pacote extra para gerenciar as instalações.  
      Cada pacote é instalado em um diretório separado.  Por exemplo, o 
      pacote foo-1.1 é instalado em 
      <filename class='directory'>/usr/pkg/foo-1.1</filename> e um link simbólico 
      é feito de <filename>/usr/pkg/foo</filename> para 
      <filename class='directory'>/usr/pkg/foo-1.1</filename>.  Quando da 
      instalação de uma nova versão foo-1.2, ela é instalada em 
      <filename class='directory'>/usr/pkg/foo-1.2</filename> e o link 
      simbólico anterior é substituído por um link simbólico para a nova 
      versão.</para>

      <para>Variáveis de ambiente tais como <envar>PATH</envar>, 
      <envar>LD_LIBRARY_PATH</envar>, <envar>MANPATH</envar>, 
      <envar>INFOPATH</envar> e <envar>CPPFLAGS</envar> precisam ser 
      expandidas para incluir <filename>/usr/pkg/foo</filename>.  Para 
      mais que uns poucos pacotes, esse esquema se torna 
      ingerenciável.</para>

    </sect3>

    <sect3>
      <title>Gerenciamento de Pacote Estilo Link Simbólico</title>

      <para>Essa é uma variação da técnica de gerenciamento de pacote 
      anterior.  Cada pacote é instalado similar ao esquema anterior.  
      Mas, em vez de fazer o link simbólico, cada arquivo é 
      simbolicamente vinculado à hierarquia 
      <filename class='directory'>/usr</filename>.  Isso remove a necessidade de 
      expandir as variáveis de ambiente.  Ainda que os links simbólicos 
      possam ser criados pela(o) usuária(o) para automatizar a criação, 
      muitos gerenciadores de pacote tem sido escritos usando essa 
      abordagem.  Alguns dos populares inclui Stow, Epkg, Graft, e 
      Depot.</para>

      <para>A instalação precisa ser falseada, de modo que o pacote 
      pense que está instalado em 
      <filename class="directory">/usr</filename>, ainda que, na realidade, ele 
      esteja instalado na hierarquia 
      <filename class="directory">/usr/pkg</filename>.  Instalar dessa maneira 
      geralmente não é uma tarefa trivial.  Por exemplo, considere que 
      você está instalando um pacote libfoo-1.1.  As seguintes 
      instruções talvez não instalem adequadamente o pacote:</para>

<screen role="nodump"><userinput>./configure --prefix=/usr/pkg/libfoo/1.1
make
make install</userinput></screen>

      <para>A instalação funcionará, mas os pacotes dependentes talvez 
      não se vinculem à libfoo conforme você esperaria.  Se você 
      compilar um pacote que vincula à libfoo, então você talvez note 
      que ele está vinculado a 
      <filename class='libraryfile'>/usr/pkg/libfoo/1.1/lib/libfoo.so.1</filename> 
      em vez de 
      <filename class='libraryfile'>/usr/lib/libfoo.so.1</filename> como você 
      esperaria.  A abordagem correta é usar a estratégia 
      <envar>DESTDIR</envar> para falsear a instalação do pacote.  Essa 
      abordagem funciona como se segue:</para>

<screen role="nodump"><userinput>./configure --prefix=/usr
make
make DESTDIR=/usr/pkg/libfoo/1.1 install</userinput></screen>

      <para>A maioria dos pacotes suporta essa abordagem, mas existem 
      alguns que não.  Para os pacotes não conformes, você talvez ou 
      precise instalar manualmente o pacote, ou você talvez ache que é 
      mais fácil instalar alguns pacotes problemáticos em 
      <filename class='directory'>/opt</filename>.</para>

    </sect3>

    <sect3>
      <title>Baseado em Marca Temporal</title>

      <para>Nessa técnica, um arquivo é marcado temporalmente antes da 
      instalação do pacote.  Após a instalação, um simples uso do 
      comando <command>find</command> com as opções apropriadas pode 
      gerar um registro de todos os arquivos instalados após o arquivo 
      de marca temporal ser criado.  Um gerenciador de pacote escrito 
      com essa abordagem é instalação-registro.</para>

      <para>Ainda que esse esquema tenha a vantagem de ser simples, ele 
      tem duas desvantagens.  Se, durante a instalação, os arquivos 
      forem instalados com qualquer marca temporal outra que a hora 
      atual, então aqueles arquivos não serão rastreados pelo 
      gerenciador de pacote.  Além disso, esse esquema pode ser usado 
      apenas quando um pacote for instalado de cada vez.  Os registros 
      não são confiáveis se dois pacotes estão sendo instalados em dois 
      consoles.</para>

    </sect3>

    <sect3>
      <title>Scripts de Rastreamento de Instalação</title>

      <para>Nessa abordagem, os comandos que os scripts de instalação 
      realizam são gravados.  Existem duas técnicas que se pode 
      usar:</para>

      <para>A variável de ambiente <envar>LD_PRELOAD</envar> pode ser 
      configurada para apontar para uma biblioteca a ser pré-carregada 
      antes da instalação.  Durante a instalação, essa biblioteca 
      rastreia os pacotes que estão sendo instalados anexando-se a 
      vários executáveis tais como <command>cp</command>, 
      <command>install</command>, <command>mv</command> e rastreando as 
      chamadas de sistema que modificam o sistema de arquivos.  Para que 
      essa abordagem funcione, todos os executáveis precisam ser 
      dinamicamente vinculados sem o bit suid ou sgid.  Pré-carregar a 
      biblioteca talvez cause alguns efeitos colaterais indesejados 
      durante a instalação.  Portanto, aconselha-se que se realize 
      alguns testes para garantir que o gerenciador de pacote não quebre 
      nada e registre todos os arquivos adequados.</para>

      <para>A segunda técnica é usar <command>strace</command>, que 
      registra todas as chamadas de sistema feitas durante a execução 
      dos scripts de instalação.</para>

    </sect3>

    <sect3>
      <title>Criando Arquivamentos de Pacote</title>

      <para>Nesse esquema, a instalação do pacote é falseada em uma 
      árvore separada como descrito no gerenciamento de pacote estilo 
      Link Simbólico.  Após a instalação, um arquivamento de pacote é 
      criado usando os arquivos instalados.  Esse arquivamento é então 
      usado para instalar o pacote tanto na máquina local quanto pode 
      até ser usado para instalar o pacote em outras máquinas.</para>

      <para>Essa abordagem é usada pela maioria dos gerenciadores de 
      pacote encontrados nas distribuições comerciais.  Exemplos de 
      gerenciadores de pacote que seguem essa abordagem são RPM (o qual, 
      incidentalmente, é exigido pela 
      <ulink url="http://refspecs.linuxfoundation.org/lsb.shtml">Linux Standard Base Specification</ulink>), 
      pkg-utils, apt do Debian, e sistema Portage do Gentoo.  Uma dica 
      descrevendo como adotar esse estilo 
      de gerenciamento de pacote para sistemas LFS está localizada em 
      <ulink url="&hints-root;fakeroot.txt"/>.</para>

      <para>Criação de arquivos pacote que incluem informação de 
      dependência é complexa e está além do escopo de LFS.</para>

      <para>Slackware usa um sistema baseado em <command>tar</command> 
      para arquivamentos de pacote.  Esse sistema intencionalmente não 
      manuseia dependências de pacote como gerenciadores de pacote mais 
      complexos fazem.  Para detalhes de gerenciamento de pacote 
      Slackware, veja 
      <ulink url="http://www.slackbook.org/html/package-management.html"/>.</para>

    </sect3>

    <sect3>
      <title>Gerenciamento Baseado em Usuária(o)</title>

      <para>Esse esquema, único para LFS, foi concebido por Matthias 
      Benkmann, e está disponível a partir do 
      <ulink url="&hints-root;">Hints Project</ulink>.  Nesse esquema, cada 
      pacote é instalado como uma(m) usuária(o) separada(o) nas 
      localizações padrão.  Arquivos pertencentes a um pacote são 
      facilmente identificados checando o ID de usuária(o).  As 
      características e deficiências dessa abordagem são muito complexas 
      para serem descritas nesta seção.  Para os detalhes, por favor 
      veja a dica em 
      <ulink url="&hints-root;more_control_and_pkg_man.txt"/>.</para>

    </sect3>

  </sect2>

  <sect2>
    <title>Implantando LFS em Múltiplos Sistemas</title>



    <para>Uma das vantagens de um sistema LFS é a de que não existem 
    arquivos que dependam da posição de arquivos em um sistema de disco.  
    Clonar uma construção LFS para outro computador com a mesma 
    arquitetura que a do sistema base é tão simples quanto usar 
    <command>tar</command> na partição LFS que contém o diretório raiz 
    (cerca de 250MB descomprimido para uma construção base LFS), 
    copiando aquele arquivo via transferência de rede ou CD-ROM para o 
    novo sistema e expandindo-o.  A partir daquele ponto, uns poucos 
    arquivos de configuração terão que ser mudados.  Arquivos de 
    configuração que talvez precisem ser atualizados incluem:
    <filename>/etc/hosts</filename>,
    <filename>/etc/fstab</filename>,
    <filename>/etc/passwd</filename>,
    <filename>/etc/group</filename>,
    <phrase revision="systemd">
      <filename>/etc/shadow</filename>, e
      <filename>/etc/ld.so.conf</filename>.
    </phrase>
    <phrase revision="sysv">
      <filename>/etc/shadow</filename>,
      <filename>/etc/ld.so.conf</filename>,
      <filename>/etc/sysconfig/rc.site</filename>,
      <filename>/etc/sysconfig/network</filename>, e
      <filename>/etc/sysconfig/ifconfig.eth0</filename>.
    </phrase>
    </para>

    <para>Um kernel personalizado talvez seja necessário ser construído 
    para o novo sistema dependendo das diferenças entre hardware de 
    sistema e a configuração original do kernel.</para>

    <note>

    <para>Tem havido alguns relatos de problemas quando da cópia entre 
    arquiteturas similares, porém não idênticas.  Por exemplo, o 
    conjunto de instrução para um sistema Intel não é idêntico com um 
    processador AMD, e versões posteriores de alguns processadores talvez 
    tenham instruções que estão indisponíveis em versões 
    anteriores.</para>

    </note>

    <para>Finalmente, o novo sistema tem de ser tornado inicializável 
    via <xref linkend="ch-bootable-grub"/>.</para>

  </sect2>

</sect1>
