<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY certhost              "https://hg.mozilla.org/">
  <!ENTITY certpath              "/lib/ckfw/builtins/certdata.txt">
  <!ENTITY make-ca-buildsize     "6.6 Mo (avec toutes les dépendances à l'exécution)">
  <!ENTITY make-ca-time          "0.1 SBU (avec toutes les dépendances à l'exécution)">

  <!ENTITY make-ca-download      "https://github.com/lfs-book/make-ca/releases/download/v&make-ca-version;/make-ca-&make-ca-version;.tar.xz">
  <!ENTITY make-ca-size          "32 Ko">
  <!ENTITY make-ca-md5sum        "9b2806b3c7954b7e9fe7a305c3d1a35a">
]>

<sect1 id="make-ca" xreflabel="make-ca-&make-ca-version;">
  <?dbhtml filename="make-ca.html"?>


  <title>make-ca-&make-ca-version;</title>
  <indexterm zone="make-ca">
    <primary sortas="a-make-ca">make-ca</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à make-ca</title>

    <para>
      Une Infrastructure à Clés Publiques (PKI) est une méthode pour valider
l'authenticité d'une entité autrement inconnue au travers de réseaux qui ne
sont pas de confiance. La PKI fonctionne en établissant une chaîne de
confiance, plutôt que de faire confiance individuellement à chaque hôte ou
entité de manière explicite. Pour qu'un certificat présenté par une entité
distante soit reconnu, le certificat doit présenter une chaîne complète de
certificats qui peuvent être validé en utilisant le certificat racine d'une
autorité de certification (CA) en laquelle la machine locale a confiance.
    </para>

    <para>
      L'établissement de la confiance avec une CA nécessite de valider des choses
comme l'adresse de la compagnie, la propriété, les informations de contact,
etc, et de s'assurer que la CA a suivi les bonnes pratiques, comme des
audits de sécurité périodiques par des enquêteurs indépendants et le
maintient d'une liste de révocation de certificats toujours disponible. Ceci
est bien au delà de la portée de BLFS (comme pour la plupart des
distributions Linux). Le magasin de certificats fournit ici est emprunté à
la fondation Mozilla, qui ont établit une politique d'inclusion très stricte
décrite <ulink
url="https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/">ici</ulink>.
    </para>

    &lfs112_checked;

    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement (HTTP)&nbsp;: <ulink url="&make-ca-download;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &make-ca-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Somme MD5 du téléchargement&nbsp;: &make-ca-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &make-ca-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction&nbsp;: &make-ca-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dépendances de make-ca</bridgehead>

    <bridgehead renderas="sect4">Requises</bridgehead>
    <para role="required">
      <xref linkend="p11-kit"/> (requis à l'exécution pour générer des banques de
certificats à partir d'ancres de confiance)
    </para>
    

   <!-- /usr/bin/trust is needed to extract the certs to /etc/ssl/certs -->
<bridgehead renderas="sect4">Facultatives (exécution)</bridgehead>
    <para role="optional">
      <xref role="runtime" linkend="nss"/> (pour générer un NSSDB partagé)
    </para>

    <para condition="html" role="usernotes">Notes utilisateur&nbsp;: <ulink url='&blfs-wiki;/make-ca'/></para>
  </sect2>

  <sect2 role="installation">
    <title>Installation de make-ca</title>

    <para>
      Le script <application>make-ca</application> téléchargera et adaptera les
certificats inclus dans le fichier <filename>certdata.txt</filename> pour
l'utiliser comme ancre de confiance dans le module de confiance de <xref
linkend="p11-kit"/>. En plus, il générera les banques de certificats du
système utilisées par les application de BLFS (si les applications
recommandées et facultatives sont présentes sur le système). Tout certificat
local stocké dans <filename>/etc/ssl/local</filename> sera importé dans les
ancres de confiance et dans les banques de certificats générées (en
remplaçant la confiance de Mozilla). En plus, toute valeur de confiance
modifiée sera copiée des ancres de confiance vers
<filename>/etc/ssl/local</filename> avant toute mise à jour, ce qui
préservera les modifications de valeurs de confiance différentes de celles
de Mozilla lorsque vous utiliserez l'utilitaire <command>trust</command> de
<application>p11-kit</application> pour effectuer des opération sur la
banque de certificats.
    </para>

    <para>
      Pour installer les divers magasins de certificats, installez le script
<application>make-ca</application> au bon endroit. En tant qu'utilisateur
<systemitem class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>make install &amp;&amp;
install -vdm755 /etc/ssl/local</userinput></screen>

   <para>
     En tant qu'utilisateur <systemitem class="username">root</systemitem>, après
l'installation de <xref linkend="p11-kit"/>, téléchargez la banque de
certificats et préparez-la à être utilisée par le système avec la commande
suivante&nbsp;:
   </para>

    <note>
      <para>
        Si vous lancez le script une deuxième fois avec la même version de
<filename>certdata.txt</filename>, par exemple pour mettre à jour les
banques après une mise à jour de <application>make-ca</application> ou pour
ajouter des banques supplémentaires parce que le logiciel requis est
installé, remplacez l'option <parameter>-g</parameter> par
<parameter>-r</parameter> sur la ligne de commande. Si vous créez un paquet,
lancez <command>make-ca --help</command> pour voir toutes les options de la
ligne de commande disponibles.
      </para>
    </note>

<screen role="root"><userinput>/usr/sbin/make-ca -g</userinput></screen>

    <para>
      Vous devriez mettre à jour régulièrement la banque de certificats avec la
commande ci-dessus soit manuellement, soit via <phrase revision="sysv">une
tâche cron.</phrase><phrase revision="systemd">un timer systemd. Un timer
est installé dans
<filename>/usr/lib/systemd/system/update-pki.timer</filename> et s'il est
activé, il vérifiera les mises à jour une fois par semaine.</phrase><phrase
revision="sysv">Si vous avez installé <xref linkend="fcron"/> et complété la
section sur les travaux périodiques, exécutez</phrase><phrase
revision="systemd">Exécutez</phrase> les commandes suivantes, en tant
qu'utilisateur <systemitem class="username">root</systemitem> pour <phrase
revision="sysv">créer une tache cron hebdomadaire&nbsp;:</phrase><phrase
revision="systemd">activer le timer systemd&nbsp;:</phrase>
    </para>

<screen role="nodump" revision="sysv"><userinput>cat &gt; /etc/cron.weekly/update-pki.sh &lt;&lt; "EOF" &amp;&amp;
<literal>#!/bin/bash
/usr/sbin/make-ca -g</literal>
EOF
chmod 754 /etc/cron.weekly/update-pki.sh</userinput></screen>

<screen role="root" revision="systemd"><userinput>systemctl enable update-pki.timer</userinput></screen>

  </sect2>

  <sect2 role="configuration" id="make-ca-config">
    <title>Configuration de make-ca</title>

    <para>
      Pour la plupart des utilisateurs, aucune configuration supplémentaire n'est
nécessaire, cependant le fichier <filename>certdata.txt</filename> par
défaut fournit par make-ca est obtenu à partir de la branche
mozilla-release, et est modifié pour fournir une révision Mercurial. Ce sera
la bonne version pour la plupart des systèmes. Il y a plusieurs variantes du
fichier disponibles à l'utilisation que vous pourriez préférer pour une
raison ou une autre, incluses dans les produits Mozilla dans ce
livre. RedHat et OpenSUSE par exemple utilisent la version incluse dans
<xref linkend="nss"/>. Des emplacements de téléchargement supplémentaires
sont disponibles dans les liens inclus dans
<filename>/etc/make-ca.conf.dist</filename>. Copiez simplement ce fichier
vers <filename>/etc/make-ca.conf</filename> et modifiez-le comme vous le
voulez.
    </para>

    <indexterm zone="make-ca make-ca-config">
      <primary sortas="e-etc-make-ca-conf">/etc/make-ca.conf</primary>
    </indexterm>

    <bridgehead renderas="sect3">À propos des arguments sur la confiance</bridgehead>

    <para>
      Il y a trois types de confiances reconnues par le script
<application>make-ca</application>, SSL/TLS, S/Mime et signature de
code. Pour <application>OpenSSL</application>, il s'agit de
<parameter>serverAuth</parameter>, <parameter>emailProtection</parameter> et
<parameter>codeSigning</parameter> respectivement. Si un argument trust en
omis, le certificat n'est ni reconnu ni rejeté pour ce rôle. Les clients qui
utilisent <application>OpenSSL</application> ou
<application>NSS</application> rencontrant ce certificat renverront un
avertissement à l'utilisateur. Les clients qui utilisent
<application>GnuTLS</application> sans le support de
<application>p11-kit</application> ne sont pas conscient des certificats de
confiance. Pour inclure cette CA dans les fichiers
<filename>ca-bundle.crt</filename>, <filename>email-ca-bundle.crt</filename>
ou <filename>objsign-ca-bundle.crt</filename> (les anciens lots de
<application>GnuTLS</application>), il doit avoir l'argument de confiance
approprié.
    </para>

    <bridgehead renderas="sect3">Ajouter des certificats de CA supplémentaires</bridgehead>

    <para>
      Le répertoire <filename class="directory">/etc/ssl/local</filename> permet
d'ajouter des certificats d'autorités supplémentaires à la banque de
confiance du système. Ce répertoire est aussi utilisé pour stocker des
certificats qui ont été ajoutés ou modifiés dans la banque de confiance du
système par <xref linkend="p11-kit"/> pour que les valeurs de confiance
soient maintenues entre les mises à jour. Les fichiers de ce répertoire
doivent être au format des certificats de confiance
d'<application>OpenSSL</application>. Les certificats importés avec
l'utilitaire <command>trust</command> de <xref linkend="p11-kit"/>
utiliseront les valeurs d'utilisation étendue x509 pour assigner une valeur
de confiance par défaut aux ancres du système.
    </para>

    <para>Si vous avez besoin de remplacer les valeurs de confiance ou que vous devez
créer un certificat <application>OpenSSL</application> de confiance
manuellement à partir d'un fichier encodé en PEM, vous devrez ajouter des
arguments «&nbsp;trust&nbsp;» à la commande <command>openssl</command> et
créer un nouveau certificat. Par exemple, si vous souhaitez utiliser les
racines <ulink url="http://www.cacert.org/">CAcert</ulink> pour que les deux
soient de confiance pour ces trois rôles, les commandes suivantes créeront
des certificats de confiance OpenSSL approprié (à lancer en tant
qu'utilisateur <systemitem class="username">root</systemitem> après
l'installation de <xref linkend="wget"/>)&nbsp;:
    </para>

<screen role="nodump"><userinput>wget http://www.cacert.org/certs/root.crt &amp;&amp;
wget http://www.cacert.org/certs/class3.crt &amp;&amp;
openssl x509 -in root.crt -text -fingerprint -setalias "CAcert Class 1 root" \
        -addtrust serverAuth -addtrust emailProtection -addtrust codeSigning \
        > /etc/ssl/local/CAcert_Class_1_root.pem &amp;&amp;
openssl x509 -in class3.crt -text -fingerprint -setalias "CAcert Class 3 root" \
        -addtrust serverAuth -addtrust emailProtection -addtrust codeSigning \
        > /etc/ssl/local/CAcert_Class_3_root.pem &amp;&amp;
/usr/sbin/make-ca -r</userinput></screen>

    <bridgehead renderas="sect3">Remplacer la confiance de Mozilla</bridgehead>

    <para>
      Parfois, il peut arriver que vous ne soyez pas d'accord avec l'inclusion
d'une autorité de certification particulière. Si vous voulez remplacer la
confiance par défaut d'une CA particulière, créez simplement une copie du
certificat existant dans <filename
class="directory">/etc/ssl/local</filename> avec des arguments de confiances
différents. Par exemple, si vous ne voulez pas faire confiance au fichier
«&nbsp;Makebelieve_CA_Root&nbsp;», lancez les commandes suivantes&nbsp;:
    </para>

<screen role="nodump"><userinput>openssl x509 -in /etc/ssl/certs/Makebelieve_CA_Root.pem \
             -text \
             -fingerprint \
             -setalias "Disabled Makebelieve CA Root" \
             -addreject serverAuth \
             -addreject emailProtection \
             -addreject codeSigning \
       > /etc/ssl/local/Disabled_Makebelieve_CA_Root.pem &amp;&amp;
/usr/sbin/make-ca -r</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title>Contenu</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Répertoires installés</segtitle>

      <seglistitem>
        <seg>make-ca</seg>
        <seg>/etc/ssl/{certs,local} et /etc/pki/{nssdb,anchors,tls/{certs,java}}</seg>
      </seglistitem>
    </segmentedlist>

   <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="make-ca-bin">
        <term><command>make-ca</command></term>
        <listitem>
          <para>
            est un script shell qui adapte une version actuelle de
<filename>certdata.txt</filename> et le prépare pour l'utiliser comme banque
de confiance du système
          </para>
          <indexterm zone="make-ca make-ca">
            <primary sortas="b-make-ca">make-ca</primary>
          </indexterm>
        </listitem>
      </varlistentry>
   </variablelist>

  </sect2>

</sect1>
