<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../../general.ent">
  %general-entities;
]>

<sect1 id="grub-setup" xreflabel="Utiliser GRUB pour paramétrer le processus de démarrage avec UEFI">
  <?dbhtml filename="grub-setup.html"?>


  <title>Utiliser GRUB pour paramétrer le processus de démarrage avec UEFI</title>

  <sect2>
    <title>Désactiver le Secure Boot</title>

    <para>
      BLFS ne propose pas les paquets essentiels pour prendre en charge Secure
Boot. Pour paramétrer le processus de démarrage avec GRUB et UEFI dans BLFS,
Secure Boot doit être désactivé dans l'interface de configuration du
micrologiciel. Lisez la documentation fournie par le fabriquant de votre
système pour trouver comment faire.
    </para>
  </sect2>

  <sect2>
    <title>Créer un disque de démarrage d'urgence</title>

    <para>
      Assurez-vous qu'un disque de démarrage d'urgence est prêt pour
<quote>secourir</quote> le système au cas où le système ne puisse
démarrer. Pour créer un disque de démarrage d'urgence avec GRUB pour un
système EFI, trouvez un clé USB libre et créez un système de fichiers
<systemitem class="filesystem">vfat</systemitem> dessus. Installez d'abord
<xref linkend="dosfstools"/>, puis en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

    <warning>
      <para>
        La commande suivante supprimera tous les répertoires et fichiers de la
partition. Assurez-vous que votre clé USB ne contient aucune donnée requise,
et remplacez <userinput>sdx1</userinput> par le nœud de périphérique
correspondant à la première partition de la clé USB. Faites attention à ne
pas écraser votre disque dur à cause d'une coquille&nbsp;!
      </para>
    </warning>

    <screen role="nodump"><userinput>mkfs.vfat /dev/sdx1</userinput></screen>

    <para>
      Toujours en tant qu'utilisateur <systemitem
class="username">root</systemitem>, utilisez l'utilitaire
<command>fdisk</command> pour faire de la première partition de la clé USB
une partition <quote>EFI system</quote> (remplacez
<userinput>sdx</userinput> par le nœud de périphérique correspondant à votre
clé USB)&nbsp;:
    </para>

<screen role="nodump"><userinput>fdisk /dev/sdx</userinput>
<literal>
Welcome to fdisk (util-linux 2.38.1).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): </literal><userinput>t</userinput>
<literal>Partition number (1-9, default 9): </literal><userinput>1</userinput>
<literal>Partition type or alias (type L to list all): </literal><userinput>uefi</userinput>
<literal>Changed type of partition 'Linux filesystem' to 'EFI System'.

Command (m for help): </literal><userinput>w</userinput>
<literal>The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.</literal></screen>

    <para>
      Toujours en tant qu'utilisateur <systemitem
class="username">root</systemitem>, créez un point de montage pour la
partition EFI sur la clé USB et montez-la&nbsp;:
    </para>

<screen role="nodump"><userinput>mkdir -pv /mnt/rescue &amp;&amp;
mount -v -t vfat /dev/sdx1 /mnt/rescue</userinput></screen>

    <para>
      Installez GRUB pour EFI sur la partition&nbsp;:
    </para>

<screen role="nodump"><userinput>grub-install --target=x86_64-efi --removable --efi-directory=/mnt/rescue --boot-directory=/mnt/rescue</userinput></screen>

    <para>
      Démontez la partition&nbsp;:
    </para>

<screen role="nodump"><userinput>umount /mnt/rescue</userinput></screen>

    <para>
      Maintenant vous pouvez utiliser la clé USB comme un disque de démarrage
d'urgence sur la plateforme UEFI x86-64. Elle démarrera le système et
affichera le shell de GRUB. Ensuite vous pourrez taper des commandes pour
démarrer votre système d'exploitation sur votre disque dur. Pour apprendre à
choisir le périphérique de démarrage, lisez le manuel de votre carte mère ou
de votre ordinateur portable.
    </para>

  </sect2>

  <sect2 role="kernel" id="uefi-kernel">
    <title>Configuration du noyau pour la prise en charge de l'UEFI</title>

    <para>
      Activez les options suivantes dans la configuration du noyau et recompilez
le noyau si nécessaire&nbsp;:
    </para>

<screen><literal>Processor type and features ---&gt;
  [*] EFI runtime service support                               [CONFIG_EFI]
  [*]   EFI stub support                                        [CONFIG_EFI_STUB]
Enable the block layer ---&gt;
  Partition Types ---&gt;
    [*] Advanced partition selection                            [CONFIG_PARTITION_ADVANCED]
    [*] EFI GUID Partition support                              [CONFIG_EFI_PARTITION]
Device Drivers ---&gt;
  Firmware Drivers ---&gt;
    [*] Mark VGA/VBE/EFI FB as generic system framebuffer       [CONFIG_SYSFB_SIMPLEFB]
    EFI (Extensible Firmware Interface) Support ---&gt;
      &lt; &gt; EFI Variable Support via sysfs                        [CONFIG_EFI_VARS]
  Graphics support ---&gt;
    &lt;*&gt; Direct Rendering Manager                                [CONFIG_DRM]
    [*] Enable legacy fbdev support for your modesetting driver [CONFIG_DRM_FBDEV_EMULATION]
    &lt;*&gt; Simple framebuffer driver                               [CONFIG_DRM_SIMPLEDRM]
    Frame buffer Devices ---&gt;
      &lt;*&gt; Support for frame buffer devices ---&gt;                 [CONFIG_FB]
    Console display driver support ---&gt;
      [*] Framebuffer Console support                           [CONFIG_FRAMEBUFFER_CONSOLE]
File systems ---&gt;
  &lt;DOS/FAT/EXFAT/NT Filesystems ---&gt;
    &lt;*/M&gt; VFAT (Windows-95) fs support                          [CONFIG_VFAT_FS]
  Pseudo filesystems ---&gt;
    &lt;*/M&gt; EFI Variable filesystem                               [CONFIG_EFIVAR_FS]</literal></screen>

    <variablelist>
      <title>Voici la signification des options de configuration&nbsp;:</title>

      <varlistentry>
        <term><parameter>CONFIG_EFI_STUB</parameter></term>
        <listitem>
          <para>On EFI systems, GRUB boots the Linux kernel by invoking the EFI firmware to
load it as an EFI application.  So, EFI stub is needed to wrap the kernel as
an EFI application.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>CONFIG_EFI_VARS</parameter></term>
        <listitem>
          <para>N'utilisez pas cette option obsolète à cause d'une limite de taille à 1024
octets. Elle est remplacée par <parameter>CONFIG_EFIVAR_FS</parameter></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>CONFIG_SYSFB_SIMPLEFB</parameter>,
<parameter>CONFIG_DRM</parameter>,
<parameter>CONFIG_DRM_FBDEV_EMULATION</parameter>,
<parameter>CONFIG_DRM_SIMPLEDRM</parameter>,
<parameter>CONFIG_FB</parameter>, and
<parameter>CONFIG_FRAMEBUFFER_CONSOLE</parameter></term>
        <listitem>
          <para>The combination of these options provides the Linux console support on top
of the UEFI framebuffer.  To allow the kernel to print debug messages at an
early boot stage, they shouldn't be built as kernel modules unless an
initramfs will be used.</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

  <sect2>
    <title>Trouver ou créer la partition EFI système</title>

    <para>
      Sur les systèmes EFI, les chargeurs d'amorçage sont installés dans une
partition FAT32 spéciale appelée <emphasis>partition EFI système</emphasis>
(ESP). Si votre système prend EFI en charge, et qu'une version récente de
Linux ou Windows est pré-installée, il est probable que l'ESP soit déjà
créée. En tant qu'utilisateur <systemitem
class="username">root</systemitem>, listez toutes les partitions de votre
disque dur (remplacez <userinput>sda</userinput> par le périphérique
correspondant au disque dur approprié)&nbsp;:
    </para>

    <screen role="nodump"><userinput>fdisk -l /dev/sda</userinput></screen>

    <para>
      La colonne <quote>Type</quote> de l'ESP devrait être <literal>EFI
System</literal>.
    </para>

    <para>
      If the system or the hard drive is new, or it's the first installation of a
UEFI-booted OS on the system, the ESP may not exist.  In that case, create a
new partition, make a <systemitem class="filesystem">vfat</systemitem> file
system on it, and set the partition type to <quote>EFI system</quote>.  See
the instructions for the emergency boot device above as a reference.
    </para>

    <warning>
      <para>
        Some (old) UEFI implementations may require the ESP to be the first
partition on the disk.
      </para>
    </warning>

    <para>
      Maintenant, en tant qu'utilisateur <systemitem
class="username">root</systemitem>, créez le point de montage pour l'ESP et
montez-la (remplacez <userinput>sda1</userinput> par le nœud de périphérique
correspondant à l'ESP)&nbsp;:
    </para>

<screen role="nodump"><userinput>mkdir -pv /boot/efi &amp;&amp;
mount -v -t vfat /dev/sda1 /boot/efi</userinput></screen>

    <para>
      Ajoutez une entrée pour l'ESP dans <filename>/etc/fstab</filename> pour
qu'elle soient montée automatiquement au démarrage du système&nbsp;:
    </para>

<screen role="nodump"><userinput>cat &gt;&gt; /etc/fstab &lt;&lt; EOF</userinput>
<literal>/dev/sda1 /boot/efi vfat defaults 0 1</literal>
<userinput>EOF</userinput></screen>

  </sect2>

  <sect2>
    <title>Configuration de démarrage minimale avec GRUB et EFI</title>

    <para>
      On UEFI based systems, GRUB works by installing an EFI application (a
special kind of executable) into the ESP.  The EFI firmware will search boot
loaders in EFI applications from boot entries recorded in EFI variables, and
additionally a hardcoded path <filename>EFI/BOOT/BOOTX64.EFI</filename>.
Normally, a boot loader should be installed into a custom path and the path
should be recorded in the EFI variables.  The use of the hardcoded path
should be avoided if possible.  However, in some cases we have to use the
hardcoded path:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          The system is not booted with EFI yet, making EFI variables inaccessible.
        </para>
      </listitem>
      <listitem>
        <para>
          The EFI firmware is 64-bit but the LFS system is 32-bit, making EFI
variables inaccessible because the kernel cannot invoke EFI runtime services
with a different virtual address length.
        </para>
      </listitem>
      <listitem>
        <para>
          LFS is built for a Live USB, so we cannot rely on EFI variables, which are
stored in NVRAM or EEPROM on the local machine.
        </para>
      </listitem>
      <listitem>
        <para>
          You are unable or unwilling to install the
<application>efibootmgr</application> for manipulating boot entries in EFI
variables.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      In these cases, follow these instructions to install the GRUB EFI
application into the hardcoded path and make a minimal boot
configuration. Otherwise it's better to skip ahead and set up the boot
configuration normally.
    </para>

    <para>
      To install GRUB with the EFI application in the hardcoded path
<filename>EFI/BOOT/BOOTX64.EFI</filename>, first ensure the boot partition
is mounted at <filename class="directory">/boot</filename> and the ESP is
mounted at <filename class="directory">/boot/efi</filename>.  Then, as the
&root; user, run the command:
    </para>

    <note>
      <para>
        This command will overwrite
<filename>/boot/efi/EFI/BOOT/BOOTX64.EFI</filename>.  It may break a
bootloader already installed there.  Back it up if you are not sure.
      </para>
    </note>

    <screen role="nodump"><userinput>grub-install --target=x86_64-efi --removable</userinput></screen>

    <para>
      This command will install the GRUB EFI application into the hardcoded path
<filename>/boot/efi/EFI/BOOT/BOOTX64.EFI</filename>, so the EFI firmware can
find and load it.  The remaining GRUB files are installed in the <filename
class="directory">/boot/grub</filename> directory and will be loaded by
<filename>BOOTX64.EFI</filename> during system boot.
    </para>

    <note>
      <para>
        The EFI firmware usually prefers the EFI applications with a path stored in
EFI variables to the EFI application at the hardcoded path.  So you may need
to invoke the boot selection menu or firmware setting interface to select
the newly installed GRUB manually on the next boot.  Read the manual of your
motherboard or laptop to learn how.
      </para>
    </note>

    <para>
      If you've followed the instructions in this section and set up a minimal
boot configuration, now skip ahead to <quote>Creating the GRUB Configuration
File</quote>.
    </para>
  </sect2>

  <sect2>
    <title>Monter le système de fichiers des variables EFI</title>

    <para>
      The installation of GRUB on a UEFI platform requires that the EFI Variable
file system, <systemitem class="filesystem">efivarfs</systemitem>, is
mounted.  As the <systemitem class="username">root</systemitem> user, mount
it if it's not already mounted:
    </para>

<screen role="nodump"><userinput>mountpoint /sys/firmware/efi/efivars || mount -v -t efivarfs efivarfs /sys/firmware/efi/efivars</userinput></screen>

    <note revision="systemd">
      <para>
        If the system is booted with UEFI and systemd, <systemitem
class="filesystem">efivarfs</systemitem> will be mounted automatically.
However, in the LFS chroot environment it still needs to be mounted
manually.
      </para>
    </note>

    <para revision="sysv">
      Maintenant ajoutez une entrée pour <systemitem
class="filesystem">efivarfs</systemitem> dans
<filename>/etc/fstab</filename> pour qu'il soit monté automatiquement au
démarrage du système&nbsp;:
    </para>

<screen revision="sysv" role="nodump"><userinput>cat &gt;&gt; /etc/fstab &lt;&lt; EOF</userinput>
<literal>efivarfs /sys/firmware/efi/efivars efivarfs defaults 0 0</literal>
<userinput>EOF</userinput></screen>

    <warning>
      <para>
        If the system is not booted with UEFI, the directory <filename
class="directory">/sys/firmware/efi</filename> will be missing. In this case
you should boot the system in UEFI mode with the emergency boot disk or
using a minimal boot configuration created as above, then mount <systemitem
class="filesystem">efivarfs</systemitem> and continue.
      </para>
    </warning>
  </sect2>

  <sect2>
    <title>Mettre en place la configuration</title>

    <para>
      Sur les systèmes UEFI, GRUB fonctionne en installant une application EFI (un
type d'exécutable spécial) dans <filename
class="directory">/boot/efi/EFI/[id]/grubx64.efi</filename>, où <filename
class="directory">/boot/efi</filename> est le point de montage de l'ESP et
<literal>[id]</literal> est remplacé par un identifiant spécifié à la ligne
de commande <command>grub-install</command>. GRUB créera une entrée dans les
variables EFI contenant le chemin <literal>EFI/[id]/grubx64.efi</literal>
pour que le micrologiciel puisse trouver <filename>grubx64.efi</filename> et
le charger.
    </para>

    <para>
      <filename>grubx64.efi</filename> is very lightweight (136 KB with GRUB-2.06)
so it will not use much space in the ESP.  A typical ESP size is 100 MB (for
Windows boot manager, which uses about 50 MB in the ESP). Once
<filename>grubx64.efi</filename> has been loaded by the firmware, it will
load GRUB modules from the boot partition.  The default location is
<filename class="directory">/boot/grub</filename>.
    </para>

    <para>
      En tant qu'utilisateur <systemitem class="username">root</systemitem>,
installez les fichiers de GRUB dans
<filename>/boot/efi/EFI/LFS/grubx64.efi</filename> et <filename
class="directory">/boot/grub</filename>. Ensuite paramétrez l'entrée de
démarrage dans les variables EFI&nbsp;:
    </para>

<screen role="nodump"><userinput>grub-install --bootloader-id=LFS --recheck</userinput></screen>

    <para>
      Si l'installation se passe correctement, la sortie devrait être&nbsp;:
    </para>

<screen role="nodump"><literal>Installing for x86_64-efi platform.
Installation finished. No error reported.</literal></screen>

    <para>
      Issue the <command>efibootmgr | cut -f 1</command> command to recheck the
EFI boot configuration.  An example of the output is:
    </para>

<screen role="nodump"><literal>BootCurrent: 0000
Timeout: 1 seconds
BootOrder: 0005,0000,0002,0001,0003,0004
Boot0000* ARCH
Boot0001* UEFI:CD/DVD Drive
Boot0002* Windows Boot Manager
Boot0003* UEFI:Removable Device
Boot0004* UEFI:Network Device
Boot0005* LFS</literal></screen>

    <para>
      Remarquez que <literal>0005</literal> est en premier dans
<literal>BootOrder</literal> et que <literal>Boot0005</literal> est
<literal>LFS</literal>. Cela signifie qu'au prochain démarrage, la version
de GRUB installée par LFS sera utilisée pour démarrer le système.
    </para>

  </sect2>

  <sect2>
    <title>Création du fichier de configuration de GRUB</title>

    <indexterm zone="grub-setup grub-video">
      <primary sortas="e-boot-grub-grub-cfg">/boot/grub/grub.cfg</primary>
    </indexterm>

    <para>
      Générez <filename>/boot/grub/grub.cfg</filename> pour configurer le menu de
démarrage de GRUB&nbsp;:
    </para>

<screen role="nodump"><userinput>cat &gt; /boot/grub/grub.cfg &lt;&lt; EOF</userinput>
<literal># Begin /boot/grub/grub.cfg
set default=0
set timeout=5

insmod part_gpt
insmod ext2
set root=(hd0,2)

if loadfont /boot/grub/fonts/unicode.pf2; then
  set gfxmode=auto
  insmod all_video
  terminal_output gfxterm
fi

menuentry "GNU/Linux, Linux 5.19.2-lfs-11.2"  {
  linux   /boot/vmlinuz-5.19.2-lfs-11.2 root=/dev/sda2 ro
}

menuentry "Firmware Setup" {
  fwsetup
}</literal>
<userinput>EOF</userinput></screen>

    <para>
      <literal>(hd0,2)</literal>, <literal>sda2</literal>, and
<literal>5.19.2-lfs-11.2</literal> must match your configuration.
    </para>

    <note>
      <para>
        From GRUB's perspective, the files are relative to the partitions used. If
you used a separate /boot partition, remove /boot from the above paths (to
kernel and to <filename>unicode.pf2</filename>). You will also need to
change the "set root" line to point to the boot partition.
      </para>
    </note>

    <para>
      L'entrée <literal>Firmware Setup</literal> peut être utilisée pour entrer
dans l'interface de configuration fournie par le micrologiciel (parfois
nommée <quote>configuration BIOS</quote>).
    </para>
  </sect2>

  <sect2>
    <title>Démarrage double avec Windows</title>

    <para>
      Ajoutew une entrée de menu pour Windows dans
<filename>grub.cfg</filename>&nbsp;:
    </para>

<screen role="nodump"><userinput>cat &gt;&gt; /boot/grub/grub.cfg &lt;&lt; EOF</userinput>
<literal># Begin Windows addition

menuentry "Windows 11" {
  insmod fat
  insmod chain
  set root=(hd0,1)
  chainloader /EFI/Microsoft/Boot/bootmgfw.efi
}</literal>
<userinput>EOF</userinput></screen>

    <para>
      <literal>(hd0,1)</literal> should be replaced with the GRUB designated name
for the ESP.  The <literal>chainloader</literal> directive can be used to
tell GRUB to run another EFI executable, in this case the Windows Boot
Manager. You may put more usable tools in EFI executable format (for
example, an EFI shell) into the ESP and create GRUB entries for them, as
well.
    </para>

  </sect2>

</sect1>
