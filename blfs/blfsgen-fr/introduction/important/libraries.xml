<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="libraries" xreflabel="bibliothèques">
  <?dbhtml filename="libraries.html"?>

  <sect1info>
<date>$Date$</date></sect1info>

  <title>Bibliothèques&nbsp;: statiques ou partagées&nbsp;?</title>

  
  <indexterm zone="libraries">
    <!-- section g : 'Others' in longindex.html -->
<primary sortas="g-libraries">bibliothèques&nbsp;: statiques ou partagées</primary>
  </indexterm>

  <sect2 role="package">
    <title>Bibliothèques&nbsp;: statiques ou partagées&nbsp;?</title>

    <para>
      Les premières bibliothèques étaient de simples archives de routines, à
partir desquelles on extrayait et liait les routines nécessaires dans
l'exécutable. On appelle cela des bibliothèques statiques et elles ont un
nom de la forme <filename>libtoto.a</filename> sur les systèmes
d'exploitation UNIX. Sur certains systèmes d'exploitation anciens, ce sont
les seules qui sont disponibles.
    </para>

    <para>
      Sur la plupart des plate-formes Linux, il y a aussi des bibliothèques
<quote>partagées</quote> (ou encore <quote>dynamiques</quote>) et elles ont
un nom de la forme <filename>libtoto.so</filename>. Une seule copie de la
bibliothèque est chargée dans la mémoire virtuelle et partagée par tous les
programmes qui appellent ses fonctions. C'est plus efficace en terme
d'espace.
    </para>

    <para>
      Autrefois, des programmes essentiels tels que le shell étaient souvent liés
de manière statique pour qu'il existe une forme de système de secours
minimal, même en cas de bibliothèques partagées endommagées telles que
<filename>libc.so</filename> (par exemple, déplacées dans <filename
class="directory">lost+found</filename> après un <command>fsck</command>
consécutif à une extinction brutale). De nos jours, la plupart des gens
utilisent une installation système alternative ou une clé USB s'ils ont
besoin d'une récupération. Les systèmes de fichiers journalisés réduisent
également la probabilité de ce genre de problème.
    </para>


    <!-- really?
    <para>

      Developers, at least while they are developing, often prefer to use
      static versions of the libraries which their code links to.
    </para>
-->
<para>
      À plusieurs endroits du livre, des paramètres de configuration tels que
<parameter>--disable-static</parameter> sont utilisés, et à d'autres
endroits, la possibilité d'utiliser les versions du système des
bibliothèques plutôt que les versions fournies par un autre paquet est
abordée. Nous traitons cela surtout pour simplifier les mises à jour des
bibliothèques.
    </para>

    <para>
      Si un paquet est lié à une bibliothèque dynamique, la mise à jour de la
bibliothèque se fait automatiquement une fois que la nouvelle bibliothèque
est installée et que le programme est (re)démarré (à condition que la
version majeure de la bibliothèque reste inchangée, passant par exemple de
<filename>libtoto.so.2.0</filename> à
<filename>libtoto.so.2.1</filename>. Le passage à
<filename>libtoto.so.3</filename> exigera une recompilation. Utilisez
<command>ldd</command> pour connaître les programmes qui utilisent
l'ancienne version). Si un programme est lié à une bibliothèque statique, il
faut toujours le recompiler. Si vous connaissez les programmes liés à une
bibliothèque statique particulière, pas de problème. Mais en général, vous
ne saurez <emphasis>pas</emphasis> quels programmes recompiler.
    </para>

    <!-- obsolete with /usr merge
    <para>
Most libraries are shared, but if you do something unusual, such as
    moving a shared library to <filename class="directory">/lib</filename>
    accidentally breaking the <literal>.so</literal> symlink in
    <filename class="directory">/usr/lib</filename> while keeping the static
    library in <filename class="directory">/lib</filename>, the static library
    will be silently linked into the programs which need it.</para>
-->
<para>
      Une manière d'identifier si une bibliothèque statique est utilisée est de
s'en préoccuper à la fin de l'installation de chaque paquet. Écrivez un
script pour trouver toutes les bibliothèques statiques dans <filename
class="directory">/usr/lib</filename> ou bien là où vous installez, puis
déplacez-les dans un autre répertoire de sorte que l'éditeur de liens ne les
trouve plus ou renommez-les pour que <filename>libtoto.a</filename> devienne
par exemple <filename>libtoto.a.hidden</filename>. Vous pouvez alors
restaurer temporairement une bibliothèque statique si nécessaire, et
identifier les paquets qui en ont besoin. Vous ne devriez pas le faire sans
réfléchir car de nombreuses bibliothèques n'existent qu'en version
statique. Par exemple, certaines bibliothèques des paquets
<application>glibc</application> et <application>gcc</application> devraient
toujours être présentes sur le système (<filename>libc_nonshared.a, libg.a,
libpthread_nonshared.a, libssp_nonshared.a, libsupc++.a</filename> pour
glibc-2.36 et gcc-12.2).
    </para>


    <!-- versions hardcoded in this para, it's a comment on those versions  -->
<para>Si vous faites cela, il se peut que vous trouviez que plus de paquets que
vous ne le pensiez utilisent une bibliothèque statique. C'était le cas avec
<application>nettle-2.4</application> dans sa configuration par défaut en
statique seulement&nbsp;: il était requis par
<application>GnuTLS-3.0.19</application>, mais aussi lié à des paquets qui
utilisaient <application>GnuTLS-3.0.19</application>, tels que
<application>glib-networking-2.32.3</application>.</para>

    <para>De nombreux paquets mettent certaines de leurs fonctions courantes dans une
bibliothèque qui n'est utilisée que par les programmes du paquet et qui,
surtout, <emphasis>n'est pas</emphasis> installée en tant que bibliothèque
autonome. Ces bibliothèques internes ne posent pas problème — si le paquet
doit être reconstruit pour corriger un bogue ou une faille de sécurité, rien
de plus n'y est lié.</para>

    <para>Quand BLFS indique des bibliothèques système, cela signifie les versions
partagées. Certains paquets tels que <xref linkend="firefox"/> et <xref
linkend="gs"/> embarquent beaucoup d'autres bibliothèques dans leur
arborescence de construction. La version incluse est souvent plus ancienne
que la version utilisée dans le système, donc il se peut qu'elle comporte
des bogues. Parfois les développeurs prennent la peine de corriger les
bogues dans les bibliothèques qu'ils incluent, mais pas toujours.</para>

    <para>Parfois, il est facile de décider d'utiliser les bibliothèques du
système. D'autres fois il se peut que vous deviez modifier la version du
système (c'est le cas pour <xref linkend="libpng"/> si on l'utilise pour
<xref linkend="firefox"/>).  Parfois, un paquet contient une ancienne
bibliothèque et ne peut plus se lier à la version actuelle, mais il peut se
lier à une version plus ancienne. Dans ce cas, BLFS utilisera généralement
la version incluse. Parfois, la bibliothèque incluse n'est plus développée
de son côté, ou ses responsables en amont sont les mêmes que celles et ceux
du paquet et vous n'avez aucun autre paquet qui l'utilisera. Dans ces cas,
vous pourriez décider d'utiliser la bibliothèque incluse même si vous
préférez généralement utiliser les bibliothèques du système.</para>

    <para condition="html" role="usernotes">Notes utilisateur&nbsp;: <ulink url="&blfs-wiki;/libraries"/></para>

  </sect2>

</sect1>
