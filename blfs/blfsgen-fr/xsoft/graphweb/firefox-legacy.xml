<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY firefox-download-http "&mozilla-http;/firefox/releases/&JS78-version;esr/source/firefox-&JS78-version;esr.source.tar.xz">
  <!ENTITY firefox-download-ftp  "">
  <!ENTITY firefox-md5sum        "453c90444bad8702fd08b71213ab2cbc">
  <!ENTITY firefox-size          "316&nbsp;Mo">
  <!-- NB with stylo, much of the build uses rust, and therefore cargo files.
    But the extra cached cargo files, if any, seem to be minimal -->
  <!ENTITY firefox-buildsize     "5,2 Go (186 Mo installés) sans les tests">
  <!-- editors: with ff63 and rust-1.29, ./mach build -j4 is probably the
   most practical way to get a timing on a machine with more cores, if taking
   cores offline is not practical. If in doubt, round up -->
  <!ENTITY firefox-time          "28 SBU (sur une machine à 4 cœurs) sans les tests">
]>

<sect1 id="firefox-legacy" xreflabel="Firefox-&JS78-version; Legacy">
  <?dbhtml filename="firefox-legacy.html" ?>

  <sect1info>
<date>$Date$</date></sect1info>

  <title>Firefox-&JS78-version;</title>

  <indexterm zone="firefox-legacy">
    <primary sortas="a-Firefox">Ancien Firefox</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à l'ancien Firefox</title>

    <para>
      <application>Firefox</application> est un navigateur autonome basé sur la
base de code de <application>Mozilla</application>.
    </para>

    <para>Ce paquet est connu pour construire et fonctionner correctement avec la
plateforme LFS-10.1 mais ne peut pas être construit sur les systèmes qui
utilisent glibc-2.34.</para>

    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Tlchargement (HTTP)&nbsp;: <ulink url="&firefox-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Tlchargement (FTP)&nbsp;: <ulink url="&firefox-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrle MD5 du tlchargement&nbsp;: &firefox-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du tlchargement&nbsp;: &firefox-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &firefox-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction&nbsp;: &firefox-time;
        </para>
      </listitem>
    </itemizedlist>



    <!--<bridgehead renderas="sect3">
Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&patch-root;/firefox-&firefox-version;esr-rust1520-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>-->
<warning>
      <para>
        Ceci est la vieille série des version ESR de firefox, la dernière
publication est prévue pour être la 78.15.0 en octobre 2021. Cette page
devrait être supprimée en novembre 2021 avec la publication de firefox-91.3.
      </para>

      <para>
        Si vous utilisez glibc-2.34 ou supérieur, cette vieille version de firefox
ne sera pas utilisable et vous devrez utiliser <xref linkend="firefox"/>.
      </para>

      <para>
        Il n'y a que deux raisons pour utiliser cette version : soit vous voulez
utiliser ftp depuis votre navigateur et n'avez pas encore de solution
alternative, soit vous avez un système qui ne compile pas le firefox actuel
(il y a maintenant un correctif pour cela).
      </para>
    </warning>

    <note>
      <para>
        Le nom du répertoire est firefox-&JS78-version;
      </para>

      <para>
        L'extraction de l'archive réinitialisera les permissions du répertoire
courant à 0755 si vous avez la permission de faire cela. Si vous le faites
dans un répertoire où le droit sticky est activé, comme <filename
class="directory">/tmp</filename> l'opération se terminera avec les messages
d'erreur&nbsp;:
      </para>

<literallayout>tar: .: Cannot utime: Operation not permitted
tar: .: Cannot change mode to rwxr-xr-t: Operation not permitted
tar: Exiting with failure status due to previous errors
</literallayout>

      <para>
        Elle termine avec un statut différent de zéro, mais cela ne signifie
<emphasis>PAS</emphasis> qu'il y a un vrai problème. Ne décompressez pas en
tant que <systemitem class="username">root</systemitem> dans un répertoire
où le droit sticky est activé - cela le désactiverait.
      </para>

      <para>
        Comme avec les autres gros paquets qui utilisent C++ (ou rust), le temps en
SBU pour le construire peut varier plus grandement que vous ne vous y
attendez. Le temps de construction peut augmenter significativement si la
machine doit utiliser l'espace d'échange pour cela.
      </para>

      <para>
        Bien qu'en amont on préfère utiliser <application>PulseAudio</application>,
pour le moment <application>Alsa</application> peut toujours être
utilisé. Les deux ont besoin de configuration à l'exécution pour que le son
fonctionne.
      </para>
    </note>

    <bridgehead renderas="sect3">Dépendances de l'ancien Firefox</bridgehead>

    <bridgehead renderas="sect4">Requises</bridgehead>
    <para role="required">
      <!-- rustc is required by cbindgen so not needed here
      <xref linkend="rust"/>
,-->
<xref linkend="autoconf213"/>, <xref linkend="cbindgen"/>, <xref
linkend="dbus-glib"/>, à la fois <xref linkend="gtk3"/> et <xref
linkend="gtk2"/>, <xref linkend="libnotify"/>, <xref linkend="llvm"/>
(clang, utilisé pour bindgen même si vous utilisez gcc), <xref
linkend="nodejs"/>, <xref linkend="nss"/>, <xref linkend="pulseaudio"/> (ou
<xref linkend="alsa-lib"/> si vous modifiez le mozconfig&nbsp;; maintenant
rendu obsolète par mozilla), dans tous les cas lisez les informations de
configuration, <xref linkend="python3"/> (reconstruit après l'installation
de <xref linkend="sqlite"/>), <xref linkend="startup-notification"/>, <xref
linkend="unzip"/>, <xref linkend="yasm"/> et <xref linkend="zip"/>
    </para>

    <bridgehead renderas="sect4">Recommandes</bridgehead>
    <para role="recommended">
      <xref linkend="icu"/>, <xref linkend="libevent"/>, <xref
linkend="libwebp"/>, <xref linkend="nasm"/>
    </para>

    <note>
      <para>
        Si vous n'installez pas les dépendances recommandées, alors les versions
internes de ces paquets seront utilisés. Elles peuvent être testées pour
fonctionner, mais elles peuvent être dépassées ou contenir des trous de
sécurité.
      </para>
    </note>

    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <!--      <phrase revision="sysv">
<ulink url="https://sourceforge.net/projects/liboauth/files/">liboauth</ulink></phrase> -->
<xref linkend="curl"/>, <xref linkend="doxygen"/>, <xref role="runtime"
linkend="ffmpeg"/> (à l'exécution, pour jouer des fichiers mov, mp3 ou mp4),
<xref linkend="liboauth"/>, <xref linkend="openjdk"/>, <xref
linkend="valgrind"/>, <xref linkend="wget"/>, <xref
linkend="wireless_tools"/>, <ulink
url="https://github.com/libproxy/libproxy">libproxy</ulink>
    </para>

    <para condition="html" role="usernotes">
      Notes utilisateur&nbsp;: <ulink url="&blfs-wiki;/firefox"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation de Firefox Legacy</title>

    <para>
      La configuration de <application>Firefox</application> se fait en créant un
fichier <filename>mozconfig</filename> contenant les options de
configuration désirées. Un <filename>mozconfig</filename> par défaut est
créé ci-dessous. Pour voir toute la liste des options de configuration
disponibles, (et une description abrégée de chacune), faites <command>./mach
configure &amp;&amp; ./configure --help | less</command>. Il se peut que
vous vouliez aussi relire tout le fichier et dé-commenter les autres options
souhaitées. Créez le fichier en tapant la commande suivante&nbsp;:
    </para>

<screen><userinput>cat &gt; mozconfig &lt;&lt; "EOF"
<literal># If you have a multicore machine, all cores will be used by default.

# If you have installed (or will install) wireless-tools, and you wish
# to use geolocation web services, comment out this line
ac_add_options --disable-necko-wifi

# API Keys for geolocation APIs - necko-wifi (above) is required for MLS
# Uncomment the following line if you wish to use Mozilla Location Service
#ac_add_options --with-mozilla-api-keyfile=$PWD/mozilla-key

# Uncomment the following line if you wish to use Google's geolocaton API
# (needed for use with saved maps with Google Maps)
#ac_add_options --with-google-location-service-api-keyfile=$PWD/google-key

# startup-notification is required since firefox-78

# Uncomment the following option if you have not installed PulseAudio
#ac_add_options --disable-pulseaudio
# or uncomment this if you installed alsa-lib instead of PulseAudio
#ac_add_options --enable-alsa

# Comment out following options if you have not installed
# recommended dependencies:
ac_add_options --with-system-libevent
ac_add_options --with-system-webp
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --with-system-icu

# Do not specify the gold linker which is not the default. It will take
# longer and use more disk space when debug symbols are disabled.

# libdavid (av1 decoder) requires nasm. Uncomment this if nasm
# has not been installed.
#ac_add_options --disable-av1

# You cannot distribute the binary if you do this
ac_add_options --enable-official-branding

# Stripping is now enabled by default.
# Uncomment these lines if you need to run a debugger:
#ac_add_options --disable-strip
#ac_add_options --disable-install-strip

# Disabling debug symbols makes the build much smaller and a little
# faster. Comment this if you need to run a debugger. Note: This is
# required for compilation on i686.
ac_add_options --disable-debug-symbols

# The elf-hack is reported to cause failed installs (after successful builds)
# on some machines. It is supposed to improve startup time and it shrinks
# libxul.so by a few MB - comment this if you know your machine is not affected.
ac_add_options --disable-elf-hack

# The BLFS editors recommend not changing anything below this line:
ac_add_options --prefix=/usr
ac_add_options --enable-application=browser
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
# enabling the tests will use a lot more space and significantly
# increase the build time, for no obvious benefit.
ac_add_options --disable-tests

# The default level of optimization again produces a working build with gcc.
ac_add_options --enable-optimize

ac_add_options --enable-system-ffi
ac_add_options --enable-system-pixman

# --with-system-bz2 was removed in firefox-78
ac_add_options --with-system-jpeg
ac_add_options --with-system-png
ac_add_options --with-system-zlib

# The following option unsets Telemetry Reporting. With the Addons Fiasco,
# Mozilla was found to be collecting user's data, including saved passwords and
# web form data, without users consent. Mozilla was also found shipping updates
# to systems without the user's knowledge or permission.
# As a result of this, use the following command to permanently disable
# telemetry reporting in Firefox.
unset MOZ_TELEMETRY_REPORTING

mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/firefox-build-dir</literal>
EOF</userinput></screen>

    <para>
      Compilez <application>Firefox</application> en lançant les commandes
suivantes&nbsp;:
    </para>



    <!--<para>

      Apply a patch that prevent a crash when opening HTML videos if
      compiling against rust-1.52.0 or higher:
    </para>

<screen><userinput>patch -Np1 -i ../firefox-&firefox-version;esr-rust1520-1.patch</userinput></screen>-->
<para>
      Dans la version esr de firefox-78, le code qui s'assure que les greffons
sont signés par la racine de confiance a été désactivé, probablement pour
les organisations qui ont besoin de leur propres greffons. Pour l'activer en
tant que mesure de sécurité supplémentaire lancez la commande
suivante&nbsp;:
    </para>

<screen><userinput>sed -e 's/Disable/Enable/'            \
    -e '/^MOZ_REQUIRE_SIGNING/s/0/1/' \
    -i build/mozconfig.common</userinput></screen>

    <para>
      Si vous avez besoin des API de géolocalisation&nbsp;:
    </para>

    <note>
      <para>
        
        <!-- Taken from Arch Linux - an immensely helpful link - Thanks -->
<!-- BLFS Devs, register an account at Google with your
        @linuxfromscratch.org email address, and I'll make you an administrator
        for the 'Google APIs for LFS' project (where the API and OAuth keys
        were created for use in the book).-->
Les clefs d'API de Google et Mozilla ci-dessous sont spécifiques à LFS. Si
vous utilisez ces instructions pour une autre distribution, ou si vous avez
l'intention de distribuer des copies logicielles en utilisant ces
directives, obtenez vos propres clefs en suivant les instrictions définies
respectivement <ulink
url="http://www.chromium.org/developers/how-tos/api-keys"/> et <ulink
url="https://location.services.mozilla.com/api"/>.
        
      </para>
    </note>

<screen><userinput>echo "AIzaSyDxKL42zsPjbke5O8_rPVpVrLrJ8aeE9rQ" > google-key
echo "613364a7-9418-4c86-bcee-57e32fd70c23" > mozilla-key</userinput></screen>

    <note>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/mozshm.xml"/>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/mozmach.xml"/>

    </note>
    


    <!--
    <para>

      If you are building on i686, apply a fix to prevent Internal Compiler
      Errors in GCC-7+:
    </para>

<screen><userinput remap="pre">case $(uname -m) in
   i?86) sed -i "562 s/mips64/i386/" gfx/skia/skia/third_party/skcms/src/Transform_inl.h ;;
esac</userinput></screen>
    -->
<!--<para>

      Apply a patch to allow this to be compiled with <xref linkend="rust"/>:
    </para>

<screen><userinput remap="pre">patch -p1 -i ../firefox-&firefox-version;esr-rustc1470-1.patch</userinput></screen>-->
<para>
      Invoquez maintenant le script Python pour compiler le paquet.
    </para>

<screen><userinput>export CC=gcc CXX=g++ &amp;&amp;
export MOZBUILD_STATE_PATH=${PWD}/mozbuild &amp;&amp;
./mach configure                           &amp;&amp;
./mach build</userinput></screen>

    <para>
      Le fichier <filename>mozconfig</filename> ci-dessus désactive les tests car
ils prennent beaucoup plus de temps et d'espace disque sans bénéfice
évident. Si vous les avez tout de même activés, vous pouvez lancer les tests
en exécutant <command>./mach gtest</command>. Cela requiert une connexion
internet et d'être lancé dans un environnement Xorg - il y a une boîte de
dialogue lorsque la connexion à ALSA échoue (ce qui ne fait pas échouer le
test). Un ou deux tests échoueront. Pour voir les détails des échecs, vous
devrez enregistrer la sortie de la commande pour pouvoir la revoir.
    </para>

    <para>
      Maintenant, en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>./mach install</userinput></screen>

    <para>
      Redéfinissez les variables d'environnement à leur valeur initiale&nbsp;:
    </para>

<screen><userinput>unset CC CXX MOZBUILD_STATE_PATH</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explication des commandes</title>



    <!--<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../../xincludes/SIOCGSTAMP.xml"/>
-->
<para>
      <!-- supported in llvm-11
      but the newer
      <literal>
-fstack-clash-protection</literal> is still not supported.-->
<command>export CC=gcc CXX=g++ …</command>&nbsp;:
<application>clang</application> est maintenant préféré en amont pour
pouvoir utiliser le même compilateur partout. Sur les architectures X86
<application>clang</application> a maintenant l'air de prendre en charge la
plupart des options de durcissement que <application>GCC</application>. Avec
les versions actuelles des drapeaux par défaut,
<application>GCC</application> crée une construction légèrement plus grosse
mais prend typiquement 2 SBU de moins sur une machine à 4 cœurs avec le
mozconfig ci-dessus.
    </para>

    <para>
      <command>export MOZBUILD_STATE_PATH=${PWD}/mowbuild</command>&nbsp;: La
construction est maintenant supposée vous dire qu'elle souhaite créer
<filename class="directory">~/.mozbuld</filename> et vous offre l'option
d'appuyer sur «&nbsp;ENTRÉE&nbsp;» pour accepter cela, ou Ctrl-C pour
annuler et recommencer la construction après avoir spécifié le
répertoire. En pratique, le message peut ne pas apparaître après avoir tapé
«&nbsp;ENTRÉE&nbsp;», c.-à-d. que la construction échoue.
    </para>

    <para>
      Ce répertoire est utilisé pour un identifiant (probablement aléatoire) de
télémétrie. Créez-le dans le répertoire de construction et supprimez-le
après l'installation pour éviter qu'il ne soit utilisé. Si vous souhaitez
participer à la télémétrie, exportez MOZBUILD_STATE_PATH et faites-le
pointer vers le répertoire par défaut.
    </para>

    <para>
      <command>./mach build</command>&nbsp;: <application>Firefox</application>
utilise maintenant ce script <application>python</application> pour lancer
la construction et l'installation.
    </para>

    <para>
      <option>./mach build --verbose</option>&nbsp;: utilisez cette alternative si
vous avez besoin de détails sur les fichiers qui sont compilés avec les
drapeaux C ou C++ utilisés. Mais n'ajoutez pas «&nbsp;--verbose&nbsp;» à la
commande d'installation, elle n'est pas acceptée.
    </para>

    <para>
      <option>./mach build -jN</option>&nbsp;: la construction devrait par défaut
utiliser tous les cœurs de CPU en ligne. Si utiliser tous les cœurs fait que
la construction utilise la mémoire d'échange parce que vous n'avez pas assez
de RAM, utiliser moins de cœurs peut être plus rapide.
    </para>



  <!--
    <para>

      <command>mkdir -pv /usr/lib/mozilla/plugins</command>: This ensures
      that <filename class="directory">/usr/lib/mozilla/plugins/</filename>
      exists.
    </para>

    <para>
      <command>ln -sv ... /usr/lib/firefox/browser</command>:
      This command creates a symbolic link to <filename
      class="directory">/usr/lib/mozilla/plugins</filename>. It's not really
      needed, as <application>Firefox</application> checks <filename
      class="directory">/usr/lib/mozilla/plugins</filename> by default, but the
      symbolic link is made to keep all the plugins installed in one folder.
    </para>
-->
</sect2>

  <sect2 role="configuration">
    <title>Configuration de Firefox</title>

    <para>
      <!--If you
      didn't enable startup-notification in your mozconfig change the
      StartupNotify line to false.-->
Si vous utilisez un environnement de bureau comme
<application>Gnome</application> ou <application>KDE</application> vous
pourriez souhaiter créer un fichier <filename>firefox.desktop</filename>
pour que <application>Firefox</application> apparaisse dans les menus du
bureau. En tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>mkdir -pv /usr/share/applications &amp;&amp;
mkdir -pv /usr/share/pixmaps &amp;&amp;

MIMETYPE="text/xml;text/mml;text/html"                                     &amp;&amp;
MIMETYPE="$MIMETYPE;application/xhtml+xml;application/vnd.mozilla.xul+xml" &amp;&amp;
MIMETYPE="$MIMETYPE;x-scheme-handler/http;x-scheme-handler/https"          &amp;&amp;

cat &gt; /usr/share/applications/firefox.desktop &lt;&lt; EOF &amp;&amp;
<literal>[Desktop Entry]
Encoding=UTF-8
Name=Firefox Web Browser
Comment=Browse the World Wide Web
GenericName=Web Browser
Exec=firefox %u
Terminal=false
Type=Application
Icon=firefox
Categories=GNOME;GTK;Network;WebBrowser;
MimeType=$MIMETYPE
StartupNotify=true</literal>
EOF

unset MIMETYPE &amp;&amp;

ln -sfv /usr/lib/firefox/browser/chrome/icons/default/default128.png \
        /usr/share/pixmaps/firefox.png</userinput></screen>

    <sect3><title>Informations sur la configuration</title>

      <para>
        Les paramètres applicatifs pour firefox sont accessibles en entrant
<command>about:config</command> dans la barre d'adresse.
      </para>

      <para>
        Parfois, avoir du son qui fonctionne dans <application>firefox</application>
peut être difficile. Bien qu'en amont pulseaudio soit préféré, utiliser
<application>Alsa</application> peut être plus facile.
      </para>

      <para>
        Si vous avez activé <application>Alsa</application> pour le son, vous
pourriez avoir besoin de modifier une variable pour qu'il fonctionne. Si
vous lancez <command>firefox</command> depuis un terminal et essayez de
jouer quelque chose avec du son, vous pouvez trouver des messages d'erreur
tels que&nbsp;:
      </para>

      <para>
         <literal>Sandbox: seccomp sandbox violation: pid 3941, tid 4030, syscall 16,
args 48 2147767296 139909894784796 0 0 0.</literal>
      </para>

      <para>
        C'était sur x86_64, sur i686 le numéro d'appel système est 54. Pour
permettre cet appel système, dans <command>about:config</command>, modifiez
<command>security.sandbox.content.syscall_whitelist</command> à 16 (ou 54 en
i686).
      </para>

      <para>
        Si vous utilisez <command>pulseaudio</command> dans un environnement de
bureau, il est peut-être déjà démarré par celui-ci. Mais si ce n'est pas le
cas, bien que firefox-57 arrivait à le démarrer, firefox-58 n'y arrive
pas. Si vous lancez <command>firefox</command> depuis un terminal et que ce
problème est présent, essayer de jouer un son produira des avertissements
<literal>Impossible de trouver le contexte cubeb !</literal>
      </para>

    <para>
      La solution est de fermer firefox, démarrer pluseaudio pour vérifier qu'il
démarre (sinon voir les information de configuration dans <xref
linkend="pulseaudio"/>) et redémarrez firefox pour vérifier que ça
fonctionne. Si maintenant ça fonctionne, ajoutez ce qui suit à voutr
<filename>~/.xinitrc</filename>&nbsp;: <phrase revision="sysv">
<literal>pulseaudio --verbose --log-target=syslog&amp;</literal></phrase>
<phrase revision="systemd"> <literal>pulseaudio --verbose
--log-target=journald&amp;</literal></phrase> (malheureusement, sur certains
systèmes cela ne fonctionne pas).
      </para>

      <para>
        Vous pouvez souhaiter utiliser plusieurs profils dans firefox. Pour cela,
invoquez firefox avec <command>firefox --ProfileManager</command>. Vous
pouvez aussi vérifier le profil actuellement utilisé avec
<command>about:profiles</command>.
      </para>

      <para>
        Bien que WebRender (avec le GPU pour la composition) ne soit pas utilisé par
défaut, il a maintenant l'air de bien marcher sur les matériels pris en
charge (les GPU ATI, Nvidia et Intel avec Mesa-18 et supérieur). Pour une
explication, regardez <ulink
url="https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/">hacks.mozilla.org</ulink>.
Le seul inconvénient semble être une utilisation plus élevée de la RAM sur
les machines avec peu de RAM.
     </para>

    <para>
      Pour vérifier si WebRender est utilisé, regardez dans about:support. Dans la
section Graphique, Composition montrera soit «&nbsp;Basic&nbsp;» (inutilisé)
soit «&nbsp;WebRender&nbsp;». Pour l'activer, allez dans about:config et
changez gfx.webrender.all à True. Vous devrez redémarrer firefox.
    </para>

    <para>
      Il peut être utile de mentionner les processus de firefox qui peuvent
apparaître dans <command>top</command> — en plus de firefox lui-même, il y a
plusieurs processus Web Content, et maintenant un processus RDD (Remote Data
Decoder) qui apparaît lors de la lecture de vidéos web encodées avec av1
(libdav1d). Si WebRender est activé, un processus GPU apparaîtra aussi
lorsque firefox doit rafraîchir l'écran (p. ex. pendant le défilement,
l'ouverture d'un nouvel onglet, ou à la lecture d'une vidéo).
    </para>

    </sect3>
  </sect2>

  <sect2 role="content">
    <title>Contenu</title>

    <segmentedlist>
      <segtitle>Programmes installs</segtitle>
      <segtitle>Bibliothques installes</segtitle>
      <segtitle>Rpertoire install</segtitle>

      <seglistitem>
        <seg>
          firefox
        </seg>
        <seg>
          De nombreuses bibliothèques, composants du navigateur, greffons, extensions
et modules d'aide dans /usr/lib/firefox
        </seg>
        <seg>
	  /usr/lib/firefox et /usr/lib/mozilla
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="firefox-legacy-prog">
        <term><command>firefox</command></term>
        <listitem>
          <para>
	    est un navigateur internet <application>GTK+-3</application> qui utilise le
moteur de rendu Mozilla Gecko
          </para>
          <indexterm zone="firefox-legacy firefox-legacy-prog">
            <primary sortas="b-firefox">firefox</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
