<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY wireshark-download-http "https://www.wireshark.org/download/src/all-versions/wireshark-&wireshark-version;.tar.xz">
  <!ENTITY wireshark-download-ftp  "">
  <!ENTITY wireshark-md5sum        "4954b93a4ea4936f2bed5718e44040c5">
  <!ENTITY wireshark-size          "31 Mo">
  <!ENTITY wireshark-buildsize     "607 Go (avec toutes les dépendances facultatives disponibles dans le livre
BLFS)">
  <!ENTITY wireshark-time          "2,2 SBU (avec parallélisme = 4 et toutes les dépendances facultatives
disponibles dans le livre BLFS)">
]>



<!-- Gentler reminder: many Wireshark releases contain vulnerability fixes,
 we have not always been aware of these. At https://www.wireshark.org/security/
 there is a list of advisories and the version in which they were fixed.

 If you click on an advisory, after the bug number in the References:
 there may be a CVE number, although perhaps those get added some time after
 the release.  Perhaps as a general rule treat ALL their advisories for crashes
 etc as worthy of a security fix. -->
<sect1 id="wireshark" xreflabel="Wireshark-&wireshark-version;">
  <?dbhtml filename="wireshark.html"?>

  <sect1info>
<date>$Date$</date></sect1info>

  <title>Wireshark-&wireshark-version;</title>

  <indexterm zone="wireshark">
    <primary sortas="a-Wireshark">Wireshark</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à Wireshark</title>

    <para>
      Le paquet <application>Wireshark</application> contient un analyseur de
protocole réseau connu aussi sous le nom de <quote>sniffer</quote>. Ceci est
utile pour analyser les données capturées <quote>hors connexion</quote> à
partir d'une connexion réseau en direct ou de données lues à partir d'un
fichier de capture.
    </para>

    <para>
      <application>Wireshark</application> fournit à la fois un mode graphique et
une interface en TTY pour examiner les paquets réseau capturés de plus de
500 protocoles, ainsi que la capacité de lire des fichiers de capture à
partir de nombreux autres analyseurs de réseau populaires.
    </para>

    &lfs110_checked;

    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement (HTTP)&nbsp;: <ulink url="&wireshark-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Téléchargement (FTP)&nbsp;: <ulink url="&wireshark-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5 du téléchargement&nbsp;: &wireshark-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &wireshark-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &wireshark-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction&nbsp;: &wireshark-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Téléchargements supplémentaires</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Documentation supplémentaire&nbsp;: <ulink
url="https://www.wireshark.org/download/docs/"/> (contient des liens vers
plusieurs docs dans divers formats)
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dépendances de Wireshark</bridgehead>

    <bridgehead renderas="sect4">Requises</bridgehead>
    <para role="required">
      <xref linkend="cmake"/>, <xref linkend="glib2"/>, <xref
linkend="libgcrypt"/> et <xref linkend="qt5"/> 
    </para>

    <bridgehead renderas="sect4">Recommandées</bridgehead>
    <para role="recommended">
      <xref linkend="libpcap"/> (requis pour capturer des données)
    </para>

    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <!--<ulink url="https://asciidoctor.org/">
Asciidoctor</ulink>,-->
<xref linkend="asciidoctor"/>, <xref linkend="brotli"/>, <xref
linkend="c-ares"/>, <xref linkend="doxygen"/>, <xref linkend="git"/>, <xref
linkend="gnutls"/>, <xref linkend="libnl"/>, <xref linkend="libxslt"/>,
<xref linkend="libxml2"/>, <xref linkend="lua52"/>, <xref
linkend="mitkrb"/>, <xref linkend="nghttp2"/>, <xref linkend="sbc"/>, <xref
linkend="speex"/>, <ulink
url="https://www.linphone.org/technical-corner/bcg729">BCG729</ulink>,
<ulink url="https://github.com/TimothyGu/libilbc">libilbc</ulink>, <ulink
url="http://www.ibr.cs.tu-bs.de/projects/libsmi/">libsmi</ulink>, <ulink
url="http://lz4.github.io/lz4/">lz4</ulink>, <ulink
url="https://www.libssh.org/">libssh</ulink>, <ulink
url="https://github.com/maxmind/libmaxminddb">MaxMindDB</ulink>, <ulink
url="https://www.winimage.com/zLibDll/minizip.html">Minizip</ulink>, <ulink
url="http://google.github.io/snappy/">Snappy</ulink> et <ulink
url="https://www.soft-switch.org/">Spandsp</ulink>
    </para>

    <para condition="html" role="usernotes">
      Notes utilisateur&nbsp;: <ulink url="&blfs-wiki;/wireshark"/>
    </para>

  </sect2>

  <sect2 role="kernel" id="wireshark-kernel">
    <title>Configuration du noyau</title>

    <para>
      Le noyau doit avoir le protocole de paquets (Packet protocol) activé pour
que <application>Wireshark</application> capture les paquets en direct à
partir du réseau&nbsp;:
    </para>

<screen><literal>[*] Networking support ---&gt;          [CONFIG_NET]
      Networking options ---&gt;
        &lt;*/M&gt; Packet socket          [CONFIG_PACKET]</literal></screen>

    <para>
      Si la construction est faite en tant qu'un module, le nom est
<filename>af_packet.ko</filename>.
    </para>

    <indexterm zone="wireshark wireshark-kernel">
      <primary sortas="d-Capturing-network-packets">
        Capture de paquets réseau
      </primary>
    </indexterm>

  </sect2>

  <sect2 role="installation">
    <title>Installation de Wireshark</title>

    <para>
      <application>Wireshark</application> est une application très grosse et très
complexe. Ces instructions donnent les mesures de sécurité pour garantir que
seuls les utilisateurs de confiance soient autorisés à voir le trafic
réseau. Tout d'abord, définissez le groupe system pour wireshark. En tant
qu'utilisateur <systemitem class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>groupadd -g 62 wireshark</userinput></screen>

    <para>
      Continuez à installer <application>Wireshark</application> en lançant les
commandes suivantes&nbsp;:
    </para>

<screen><userinput>mkdir build &amp;&amp;
cd    build &amp;&amp;

cmake -DCMAKE_INSTALL_PREFIX=/usr \
      -DCMAKE_BUILD_TYPE=Release  \
      -DCMAKE_INSTALL_DOCDIR=/usr/share/doc/wireshark-&wireshark-version; \
      -G Ninja \
      .. &amp;&amp;
ninja</userinput></screen>

    <para>
      Ce paquet n'est pas fourni avec une suite de tests.
    </para>

    <para>
      Maintenant, en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>ninja install &amp;&amp;

install -v -m755 -d /usr/share/doc/wireshark-&wireshark-version; &amp;&amp;
install -v -m644    ../README.linux ../doc/README.* ../doc/{*.pod,randpkt.txt} \
                    /usr/share/doc/wireshark-&wireshark-version; &amp;&amp;

pushd /usr/share/doc/wireshark-&wireshark-version; &amp;&amp;
   for FILENAME in ../../wireshark/*.html; do
      ln -s -v -f $FILENAME .
   done &amp;&amp;
popd
unset FILENAME</userinput></screen>

    <para>
      Si vous avez téléchargé un des fichiers de documentation mentionnés dans
'Téléchargements supplémentaires', installez-les en suivant les commandes
suivantes en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"
        remap="doc"><userinput>install -v -m644 <replaceable>&lt;Downloaded_Files&gt;</replaceable> \
                 /usr/share/doc/wireshark-&wireshark-version;</userinput></screen>

    <para>
      Maintenant, définissez le propriétaire et les droits des applications
sensibles pour ne permettre qu'aun utilisateurs autorisés de l'utiliser. En
tant qu'utilisateur <systemitem class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>chown -v root:wireshark /usr/bin/{tshark,dumpcap} &amp;&amp;
chmod -v 6550 /usr/bin/{tshark,dumpcap}</userinput></screen>

    <para>
      Enfin, ajoutez les utilisateurs au groupe wireshark (en tant qu'utilisateur
<systemitem class= "username">root</systemitem>)&nbsp;:
    </para>

    <screen role="root"><userinput>usermod -a -G wireshark <replaceable>&lt;username&gt;</replaceable></userinput></screen>

    <para>
      Si vous installez wireshark pour la première fois, il sera nécessaire de
quitter la session et de se reconnecter. Cela ajoutera wireshark à vos
groupes, sans lequel l'application ne tournera pas correctement.
    </para>

  </sect2>


  <!--
  <sect2 role="commands">

    <title>Command Explanations</title>

    <para>
      <option>- -disable-wireshark</option>: Use this switch if you
      have <application>Qt</application> installed but do not want to build
      any of the GUIs.
    </para>
  </sect2>
-->
<sect2 role="configuration">
    <title>Configuration de Wireshark</title>

    <sect3 id="wireshark-config">
      <title>Fichiers de configuration</title>

      <para>
        <filename>/etc/wireshark.conf</filename> et
<filename>~/.config/wireshark/*</filename> (à moins qu'il n'y ait déjà
<filename>~/.wireshark/*</filename> dans le système)
      </para>

      <indexterm zone="wireshark wireshark-config">
        <primary sortas="e-AA.wireshark-star">~/.wireshark/*</primary>
      </indexterm>

      <indexterm zone="wireshark wireshark-config">
        <primary sortas="e-etc-wireshark.conf">/etc/wireshark.conf</primary>
      </indexterm>

    </sect3>

    <sect3>
      <title>Informations sur la configuration</title>

      <para>
        Même si les paramètres de configuration par défaut sont très bons,
rapportez-vous à la section de configuration du <ulink url=
"http://www.wireshark.org/docs/wsug_html/">Guide utilisateur de
Wireshark</ulink> (Wireshark User's Guide) pour les informations de
configuration. La majorité de la configuration de
<application>Wireshark</application> peut être réalisée en utilisant les
options du menu des interfaces graphiques de <command>wireshark</command>.
      </para>

      <note>
        <para>
          Si vous voulez regarder les paquets, assurez-vous que vous ne les filtrez
pas avec <xref linkend="iptables"/>. Si vous voulez exclure certaines
classes de paquets, il est plus efficace de le faire avec
<application>iptables</application> qu'avec
<application>Wireshark</application>.
        </para>
      </note>

    </sect3>

  </sect2>

  <sect2 role="content">
    <title>Contenu</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>

      <seglistitem>
        <seg>
          capinfos, captype, dumpcap, editcap, idl2wrs, mergecap, randpkt, rawshark,
reordercap, sharkd, text2pcap, tshark et wireshark
        </seg>
        <seg>
          libwireshark.so, libwiretap.so, libwsutil.so et de nombreux modules dans
/usr/lib/wireshark/plugins
        </seg>
        <seg>
          /usr/{include,lib,share}/wireshark et
/usr/share/doc/wireshark-&wireshark-version;
         </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="capinfos">
        <term><command>capinfos</command></term>
        <listitem>
          <para>
            lit un fichier de capture sauvegardé et retourne certaines ou toutes les
différentes statistiques sur ce fichier. Il est capable de détecter et lire
toutes les captures supportées par le paquet
<application>Wireshark</application>
          </para>
          <indexterm zone="wireshark capinfos">
            <primary sortas="b-capinfos">capinfos</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="captype">
        <term><command>captype</command></term>
        <listitem>
          <para>
            affiche les types de fichier des fichiers de capture
          </para>
          <indexterm zone="wireshark captype">
            <primary sortas="b-captype">captype</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dumpcap">
        <term><command>dumpcap</command></term>
        <listitem>
          <para>
            est un outil de vidage de trafic réseau. Il vous permet de capturer en
direct les paquets de données d'un réseau et écrire ces paquets dans un
fichier
          </para>
          <indexterm zone="wireshark dumpcap">
            <primary sortas="b-dumpcap">dumpcap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="editcap">
        <term><command>editcap</command></term>
        <listitem>
          <para>
            édite et traduit le format des fichiers de capture. Il sait comment lire les
fichiers de capture <application>libpcap</application> dont ceux de
<command>tcpdump</command>, <application>Wireshark</application> et autres
outils qui capturent dans ce format
          </para>
          <indexterm zone="wireshark editcap">
            <primary sortas="b-editcap">editcap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="idl2wrs">
        <term><command>idl2wrs</command></term>
        <listitem>
          <para>
            est un programme qui prend un fichier CORBA IDL spécifié et génère le code
source <quote>C</quote> pour un <quote>greffon</quote>
<application>Wireshark</application>. Il se base sur deux programmes Python,
<command>wireshark_be.py</command> et <command>wireshark_gen.py</command>,
qui ne sont pas installés par défaut. Il faut les copier manuellement du
répertoire <filename class="directory">tools</filename> vers le répertoire
<filename class="directory">$PYTHONPATH/site-packages/</filename>
          </para>
          <indexterm zone="wireshark idl2wrs">
            <primary sortas="b-idl2wrs">idl2wrs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mergecap">
        <term><command>mergecap</command></term>
        <listitem>
          <para>
            combine de multiples fichiers de capture en un fichier unique de sortie
          </para>
          <indexterm zone="wireshark mergecap">
            <primary sortas="b-mergecap">mergecap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="randpkt">
        <term><command>randpkt</command></term>
        <listitem>
          <para>
            crée des fichiers de capture de paquets aléatoires
          </para>
          <indexterm zone="wireshark randpkt">
            <primary sortas="b-randpkt">randpkt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rawshark">
        <term><command>rawshark</command></term>
        <listitem>
          <para>
            crée et analyse des données libpcap brutes
          </para>
          <indexterm zone="wireshark rawshark">
            <primary sortas="b-rawshark">rawshark</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="reordercap">
        <term><command>reordercap</command></term>
        <listitem>
          <para>
            réarrange les marqueurs de temps des paquets d'un fichier d'entrée vers un
fichier de sortie
          </para>
          <indexterm zone="wireshark reordercap">
            <primary sortas="b-reordercap">reordercap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sharkd">
        <term><command>sharkd</command></term>
        <listitem>
          <para>
            est un démon qui écoute sur les sockets UNIX
          </para>
          <indexterm zone="wireshark sharkd">
            <primary sortas="b-sharkd">sharkd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="text2pcap">
        <term><command>text2pcap</command></term>
        <listitem>
          <para>
            lit dans une sauvegarde ASCII hexadécimale et écrit les données décrites
dans un fichier de capture de style <application>libpcap</application>
          </para>
          <indexterm zone="wireshark text2pcap">
            <primary sortas="b-text2pcap">text2pcap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tshark">
        <term><command>tshark</command></term>
        <listitem>
          <para>
            est un analyseur de protocole réseau mode TTY. Il vous permet de capturer
directement les paquets de donnée à partir d'un réseau ou lire les paquets à
partir d'un fichier de capture sauvegardé précédemment
          </para>
          <indexterm zone="wireshark tshark">
            <primary sortas="b-tshark">tshark</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="wireshark-prog">
        <term><command>wireshark</command></term>
        <listitem>
          <para>
            est l'interface GTK+ de l'analyseur de protocole réseau. Il vous permet de
parcourir interactivement en direct les paquets à partir d'un réseau ou à
partir d'un fichier de capture sauvegardé précédemment
          </para>
          <indexterm zone="wireshark wireshark-prog">
            <primary sortas="b-wireshark">wireshark</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <!-- seems to have disappeared
      <varlistentry id="wireshark-gtk-prog">

        <term><command>wireshark-gtk</command></term>
        <listitem>
          <para>
            is the Gtk+ GUI network protocol analyzer. It lets you interactively
            browse packet data from a live network or from a previously saved
            capture file (optional).
          </para>
          <indexterm zone="wireshark wireshark-gtk-prog">
            <primary sortas="b-wireshark-gtk">wireshark-gtk</primary>
          </indexterm>
        </listitem>
      </varlistentry>
-->
<varlistentry id="libwireshark">
        <term><filename class="libraryfile">libwireshark.so</filename></term>
        <listitem>
          <para>
            contient les fonctions utilisées par les programmes de
<application>Wireshark</application> pour effectuer le filtrage et la
capture de paquets
          </para>
          <indexterm zone="wireshark libwireshark">
            <primary sortas="c-libwireshark">libwireshark.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libwiretap">
        <term><filename class="libraryfile">libwiretap.so</filename></term>
        <listitem>
          <para>
            est une bibliothèque développée afin de remplacer dans le futur <filename
class='libraryfile'>libpcap</filename>, la bibliothèque Unix standard
actuelle pour la capture de paquets. Pour plus d'informations, consultez le
fichier <filename>README</filename> dans le répertoire source <filename
class='directory'>wiretap</filename>
          </para>
          <indexterm zone="wireshark libwiretap">
            <primary sortas="c-libwiretap">libwiretap.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
