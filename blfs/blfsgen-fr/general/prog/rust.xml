<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY rust-download-http "https://static.rust-lang.org/dist/rustc-&rust-version;-src.tar.xz">
  <!ENTITY rust-download-ftp  "">
  <!ENTITY rust-md5sum        "7b9d89733ba065880f12357062ebc664">
  <!ENTITY rust-size          "136&nbsp;Mo">
  <!ENTITY rust-buildsize     "8.5 GB (323 MB installed); add 6.1 GB if running the tests">
  <!ENTITY rust-time          "13 SBU (including download time; add 16 SBU for tests, both using
parallelism=4)">
]>

<sect1 id="rust" xreflabel="rustc-&rust-version;">
  <?dbhtml filename="rust.html"?>


  <title>Rustc-&rust-version;</title>

  <indexterm zone="rust">
    <primary sortas="a-rust">Rust</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à Rust</title>
    <para>
      Le langage de programmation <application>Rust</application> est conçu pour
être un langage sûr, concurrent et pratique.
    </para>

    <para>
      Ce paquet est mis à jour sur un cycle de publication de six semaines. Comme
c'est un gros paquet long à construire et qu'il n'est actuellement utilisé
que par quelques paquets dans le livre, les éditeurs de BLFS pensent qu'il
ne devrait être mis à jour que lorsque cela est nécessaire (soit pour
corriger des problèmes, soit pour permettre à une nouvelle version d'un
paquet d'être construite).
    </para>

    <para>
      As with many other programming languages, rustc (the rust compiler)  needs a
binary from which to bootstrap. It will download a stage0 binary at the
start of the build, so you cannot compile it without an Internet connection.
    </para>

    <note>
      <para>
        Bien que BLFS installe généralement ses logiciels dans <filename
class="directory">/usr</filename>, lorsque vous mettez à jour vers une
nouvelle version de <application>rust</application> les anciennes
bibliothèques de <filename class="directory">/usr/lib/rustlib</filename>
resteront présentes, avec divers condensats dans leur nom, mais seront
inutiles et gaspilleront de l'espace disque. Les éditeurs recommandent de
placer ces fichiers dans le répertoire <filename
class="directory">/opt</filename>. En particulier, si vous avez une raison
pour reconstruire avec une configuration différente (p. ex. pour utiliser le
LLVM interne après avoir construit avec un LLVM partagé, peut-être pour
compiler des crates pour des architectures non prises en charge par le LLVM
de BLFS) il est possible que l'installation laisse un programme
<command>cargo</command> cassé. Dans une telle situation, vous pouvez soit
supprimer l'installation existante avant, soit utiliser un préfixe
différent, comme /opt/rust-&rust-version;-build2.
      </para>

      <para>
        If you prefer, you can of course change the prefix to <filename
class="directory">/usr</filename>.
      </para>
    </note>

    <para>
      Le système de construction <application>rustbuild</application> actuel
utilisera tous les processeurs, bien qu'il ne passe pas bien à l'échelle et
utilise souvent un seul cœur en attendant la compilation d'une
bibliothèque. Cependant, il peut presque être limité à un nombre de cœurs
donné en combinant l'option <literal>--jobs &lt;N&gt;</literal>
(p. ex. «&nbsp;--jobs 4&nbsp;» pour limiter à 4 processeurs) à chaque
invocation de <command>python3 ./x.py</command> <emphasis>et</emphasis> en
utilisant la variable d'environnement
<envar>CARGO_BUILD_JOBS=&lt;N&gt;</envar>. Pour l'instant cela n'est pas
efficace lors du lancement de certains tests de rustc.
    </para>

    <para>
      La version actuelle du paquet rust num_cpus peut désormais utiliser les
cgroups pour restreindre les processeurs qui peuvent être utilisés. Donc si
votre machine manque de DRAM (typiquement moins de 2&nbsp;Go de DRAM par
cœur), cela peut être une bonne alternative à passer vos CPU
hors-ligne. <phrase revision="sysv">Pour les systèmes sysv, les cgroups
nécessitent <ulink
url="https://sourceforge.net/projects/libcg/">libcgroup</ulink>.</phrase>
<phrase revision="systemd">Cela peut se faire en utilisant la commande
<command>systemd-run</command> avec les options <parameter>-p
User=$(whoami)</parameter> et <parameter>-p
AllowedCPUs=0-<replaceable>x</replaceable></parameter> (avec
<replaceable>x</replaceable> remplacé par le nombre de cœurs CPU que vous
voulez moins un).</phrase>
    </para>

    <para>
      Pour l'instant <application>Rust</application> ne donne aucune garantie de
stabilité de son ABI.
    </para>

    <note>
      <para>
        Rustc construit par défaut pour TOUTES les architectures supportées, avec
une copie embarquée de LLVM. Dans BLFS la construction n'est utile que pour
l'architecture X86. Si vous voulez développer des crates rust, cette
construction peut ne pas vous satisfaire.
      </para>
      <para>
        Les temps de construction de cette version lorsqu'elle est répétée sur la
même machine sont souvent assez cohérents, mais comme avec toutes les
compilations qui utilisent <command>rustc</command> il peut y avoir quelques
exceptions très lentes.
      </para>
    </note>

    &lfs112_checked;

    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement (HTTP)&nbsp;: <ulink url="&rust-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Téléchargement (FTP)&nbsp;: <ulink url="&rust-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5&nbsp;: &rust-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &rust-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &rust-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction&nbsp;: &rust-time;
        </para>
      </listitem>
    </itemizedlist>



    <!--<bridgehead renderas="sect3">
Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&patch-root;/rustc-&rust-version;-llvm9_fixes-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>-->
<bridgehead renderas="sect3">Dépendances de Rust</bridgehead>

    <bridgehead renderas="sect4">Requises</bridgehead>
    <para role="required">
      <xref linkend="cmake"/>
    </para>

    <bridgehead renderas="sect4">Recommandées</bridgehead>
    <para role="recommended">
      <xref linkend="curl"/>, <xref linkend="libssh2"/>, and <xref
linkend="llvm"/> (built with -DLLVM_LINK_LLVM_DYLIB=ON so that rust can link
to system LLVM instead of building its shipped version)
    </para>

    <note>
      <para>
        If a recommended dependency is not installed, a shipped copy in the Rustc
source tarball will be built and used.
      </para>
    </note>

    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <xref linkend="gdb"/> (used by the test suite if it is present) and <ulink
url='https://libgit2.org/'>libgit2</ulink>
    </para>

    <para condition="html" role="usernotes">
      Notes utilisateur&nbsp;: <ulink url="&blfs-wiki;/rust"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation de Rust</title>

    <note>
      <para>
        Actuellement le compilateur Rust produit des instructions SSE2 pour les
systèmes x86 32&nbsp;bits, ce qui casse le code généré sur les systèmes
32&nbsp;bits sans processeur capable d'utiliser SSE2. Tous les modèles de
processeur x86 vendus après 2004 devraient avoir SSE2. Exécutez
<command>lscpu | grep sse2</command> pour tester. Si la sortie affiche
quelque chose, votre CPU prend en charge SSE2 et c'est bon. Sinon vous
devrez essayer de construire ce paquet <emphasis>sur un système compatible
SSE2</emphasis> avec la correction suivante appliquée&nbsp;:
      </para>

      
<screen role="nodump"><!-- computeroutput used deliberately to stop anyone from copying
           blindly -->
<computeroutput>sed 's@pentium4@pentiumpro@' -i \
    compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs</computeroutput></screen>

      <para>
        And copy the resulting <filename
class="directory">/opt/rustc-&rust-version;</filename> to the system without
SSE2 capability. But this change is still under upstream review and not
tested by BLFS editors.
      </para>
    </note>

    <para>
      To install into the <filename class="directory">/opt</filename> directory,
remove any existing <filename>/opt/rustc</filename> symlink and create a new
directory (i.e. with a different name if trying a modified build of the same
version).  As the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>mkdir -pv /opt/rustc-&rust-version;      &amp;&amp;
ln -svfn rustc-&rust-version; /opt/rustc</userinput></screen>

    <note>
      <para>
        Si vous avez installé plusieurs versions de <application>Rust</application>
dans <filename class="directory">/opt</filename>, pour changer de version,
vous n'aurez besoin que de changer le lien symbolique
<filename>/opt/rustc</filename> puis de lancer <command>ldconfig</command>.
      </para>
    </note>

    <para>
      Créez un fichier <filename>config.toml</filename> correct qui configurera la
construction.
    </para>

<!--<para>

     Adapt rustc to allow it to build and function with the changes in LLVM-9:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../rustc-&rust-version;-llvm9_fixes-1.patch</userinput></screen>-->
<screen><userinput>cat &lt;&lt; EOF &gt; config.toml
<literal># see config.toml.example for more possible options
# See the 8.4 book for an old example using shipped LLVM
# e.g. if not installing clang, or using a version before 13.0

# tell x.py to not keep printing an annoying warning
changelog-seen = 2

[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install extended tools: cargo, clippy, etc
extended = true

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustfmt"]

# Use the source code shipped in the tarball for the dependencies.
# The combination of this and the "locked-deps" entry avoids downloading
# many crates from Internet, and makes the Rustc build more stable.
vendor = true

[install]
prefix = "/opt/rustc-&rust-version;"
docdir = "share/doc/rustc-&rust-version;"

[rust]
channel = "stable"
description = "for BLFS &version;"

# BLFS used to not install the FileCheck executable from llvm,
# so disabled codegen tests.  The assembly tests rely on FileCheck
# and cannot easily be disabled, so those will anyway fail if
# FileCheck has not been installed.
#codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

</literal>
EOF</userinput></screen>



    <para>
      Compilez <application>Rust</application> en exécutant les commandes
suivantes&nbsp;:
    </para>



<screen><!-- fixed in 1.58.0, retain as a reminder that fixed crates can be used
<screen>
<userinput>sed -i -e '/^curl /s/0.4.38/0.4.40/' \
       -e '/^curl-sys /s/0.4.48/0.4.50/' \
       src/tools/cargo/Cargo.toml &amp;&amp; -->
<userinput>{ [ ! -e /usr/include/libssh2.h ] ||
  export LIBSSH2_SYS_USE_PKG_CONFIG=1; } &amp;&amp;
python3 ./x.py build</userinput></screen>

    <note>
      <para>
        The test suite will generate some messages in the <phrase
revision="sysv">system log</phrase> <phrase revision="systemd">systemd
journal</phrase> for traps on invalid opcodes, and for segmentation faults.
In themselves these are nothing to worry about, just a way for the test to
be terminated.
      </para>
    </note>

    <para>
      To run the tests (again using all available CPUs) issue:
    </para>

<screen remap="test"><userinput>python3 ./x.py test --verbose --no-fail-fast | tee rustc-testlog</userinput></screen>

    <para>
      If <command>FileCheck</command> from <application>LLVM</application> has not
been installed, all 47 tests from the <quote>assembly</quote> suite will
fail.
    </para>

    <para>
      As with all large test suites, other tests might fail on some machines - if
the number of additional failures is in the single digits, check the log for
'failures:' and review lines above that, particularly the 'stderr:'
lines. Any mention of SIGSEGV or signal 11 in a failing test is a cause for
concern.
    </para>

    <para>
      Si vous avez un <emphasis>autre</emphasis> test qui rapporte un numéro de
problème vous devriez rechercher ce problème. Par exemple lorsque rustc
&gt;= 1.41.1 était construit avec une version de sysllvm avant 10.0 le test
pour le problème 69225 échouait <ulink
url="https://github.com/rust-lang/rust/issues/69225"/> et cela devrait être
vu comme un problème critique (ils ont publié 1.41.1 à cause de ça). La
plupart des autres problèmes ne seront pas critiques.
    </para>

    <para>
      Donc, vous devriez déterminer le nombre d'échecs.
    </para>

    <para>
      The number of tests which passed and failed can be found by running:
    </para>


<screen remap="test"><!-- split into two lines for narrower screen windows -->
<userinput>grep '^test result:' rustc-testlog |
 awk '{sum1 += $4; sum2 += $6} END { print sum1 " passed; " sum2 " failed" }'</userinput></screen>

    <para>
      The other available fields are $8 for those which were ignored
(i.e. skipped), $10 for 'measured' and $12 for 'filtered out' but both those
last two are probably zero.
    </para>

    <para>
      Now, as the &root; user, install the package:
    </para>

    <note>
      <para>
        If <command>sudo</command> or <command>su</command> is invoked for switching
to the &root; user, ensure <envar>LIBSSH2_SYS_USE_PKG_CONFIG</envar> is
correctly passed or the following command may completely rebuild this
package.  For <command>sudo</command>, use the
<option>--preserve-env=LIBSSH2_SYS_USE_PKG_CONFIG</option> option.  For
<command>su</command>, do <emphasis>not</emphasis> use the
<option>-</option> or <option>--login</option>.
      </para>
    </note>

<screen role='root'><userinput>python3 ./x.py install</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explication des commandes</title>			

    <para>
      <command>ln -svfn rustc-&rust-version; /opt/rustc</command>&nbsp;: si ce
n'est pas la première fois que vous utilisez le lien symbolique <filename
class="directory">/opt/rustc</filename>, le réécrit en forçant et utilise le
drapeau «&nbsp;-n&nbsp;» pour éviter d'avoir des résultats bizarre avec
p. ex. <command>ls -l</command>.
    </para>

    <para>
      <command>targets = "X86"</command>: this avoids building all the available
linux cross-compilers (AArch64, MIPS, PowerPC, SystemZ, etc). Unfortunately,
rust insists on installing source files for these below <filename
class="directory">/opt/rustc/lib/src</filename>.
    </para>

    <para>
      <command>extended = true</command>: this installs several tools (specified
by the <literal>tools</literal> entry) alongside <command>rustc</command>.
    </para>

    <para>
      <command>tools = ["cargo", "clippy", "rustfmt"]</command>: if the tools are
not scecified, the absence of <application>Miri</application> now causes the
install to fail. But <application>Miri</application> is not built in the
stable channel. Some of the other tools are unlikely to be useful unless
using (old) code analyzers or editing the standard library.  This set match
those from the 'default' profile in binary command <command>rustup</command>
which are recommended for most users, except that the documentation was
disabled at the start of the '[build]' section.
    </para>

    <para>
      <command>channel = "stable"</command>&nbsp;: cela s'assure que seules les
fonctionnalités stables peuvent être utilisée, la valeur par défaut dans
<filename>config.toml</filename> est d'utiliser les fonctionnalités de
développement, qui ne sont pas appropriées pour une version publique.
    </para>

    
    <!-- comment while using shipped LLVM -->
<para>
      <command>[target.x86_64-unknown-linux-gnu]</command>&nbsp;: la syntaxe de
<filename>config.toml</filename> requiert une entrée
<literal>llvm-config</literal> pour chaque cible pour laquelle system-llvm
doit être utilisé. Modifiez la cible en
<literal>[target.i686-unknown-linux-gnu]</literal> si vous construisez sur
x86 32&nbsp;bits. La section complète peut être omise si vous souhaitez
construire avec la version de llvm incluse ou que vous n'avez pas clang,
mais la construction qui en résultera sera plus grande et prendra plus de
temps.
    </para>



    
    <!--<para>

      <command>sed -i -e '/^curl /s/0.4.38/0.4.40/' ... </command>: two crates
      normally downloaded for this release do not correctly initialise
      <application>curl</application> if using
      <application>openssl-3.0.0</application>. Upstream has fixed that for a
      future release, this sed causes the fixed versions to be used.
    </para>-->
<!-- https://github.com/alexcrichton/ssh2-rs/issues/173 -->
<para>
      <command>export LIBSSH2_SYS_USE_PKG_CONFIG=1</command>: Allow
<command>cargo</command> to link to system libssh2.
    </para>



    <!--<para>

      <command>export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"</command>:
      This adds a link to libffi to any RUSTFLAGS you may already be passing
      to the build. On some systems, linking fails to include libffi unless
      this is used. The reason why this is needed is not clear.
      2023-01-14 : assumed to be no longer needed, but it is some years
      since one person reported needing this, keep it commented for the moment.
    </para>-->
<para>
      <command>--verbose</command>&nbsp;: ce paramètre peut parfois fournir plus
d'informations sur un test qui échoue.
    </para>

    <para>
      <command>--no-fail-fast</command>: this switch ensures that the test suite
will not stop at the first error.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Configuration de Rust</title>

    <sect3 id="rustc-config">
      <title>Informations sur la configuration</title>

      <para>
        Si vous avez installé <application>rustc</application> dans <filename
class="directory">/opt</filename>, vous devez mettre à jour les fichiers de
configuration suivants pour que <application>rustc</application> puisse être
trouvé correctement par les autres paquets et les processus du système.
      </para>

      <para>
        En tant qu'utilisateur <systemitem class="username">root</systemitem>, créez
le fichier <filename>/etc/profile.d/rustc.sh</filename>&nbsp;:
      </para>

<screen role="root"><userinput>cat &gt; /etc/profile.d/rustc.sh &lt;&lt; "EOF"
<literal># Begin /etc/profile.d/rustc.sh

pathprepend /opt/rustc/bin           PATH

# Include /opt/rustc/man in the MANPATH variable to access manual pages
pathappend  /opt/rustc/share/man     MANPATH

# End /etc/profile.d/rustc.sh</literal>
EOF</userinput></screen>

      <para>
        Immédiatement après l'installation, mettez à jour le PATH actuel de votre
shell en tant qu'utilisateur normal&nbsp;:
      </para>

<screen><userinput>source /etc/profile.d/rustc.sh</userinput></screen>

    </sect3>
  </sect2>


  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>

      <seglistitem>			
        <seg>
          cargo-clippy, cargo-fmt, cargo, clippy-driver, rust-gdb, rust-gdbgui,
rust-lldb, rustc, rustdoc, and rustfmt
        </seg>
        <seg>
          librustc-driver-&lt;16-byte-hash&gt;.so, libstd-&lt;16-byte-hash&gt;.so et
libtest-&lt;16-byte-hash&gt;.so
        </seg>
        <seg>
          ~/.cargo, /opt/rustc, lien symbolique vers /opt/rustc-&rust-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="cargo-clippy">
        <term><command>cargo-clippy</command></term>
        <listitem>
          <para>
            fournit des tests de formatage pour un paquet cargo
          </para>
          <indexterm zone="rust cargo-clippy">
            <primary sortas="b-cargo-clippy">cargo-clippy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cargo-fmt">
        <term><command>cargo-fmt</command></term>
        <listitem>
          <para>
            formate tous les fichiers bin et lib de la source courante avec rustfmt
          </para>
          <indexterm zone="rust cargo-fmt">
            <primary sortas="b-cargo-fmt">cargo-fmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>



      <!--  <varlistentry id="cargo-miri">

        <term><command>cargo-miri</command></term>
        <listitem>
          <para>
            is for use by Miri to interpret bin crates and tests. It is
            not installed by default.
          </para>
          <indexterm zone="rust cargo-miri">
            <primary sortas="b-cargo-miri">cargo-miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->
<varlistentry id="cargo">
        <term><command>cargo</command></term>
        <listitem>
          <para>
            est le gestionnaire de paquets de Rust
          </para>
          <indexterm zone="rust cargo">
            <primary sortas="b-cargo">cargo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clippy-driver">
        <term><command>clippy-driver</command></term>
        <listitem>
          <para>
            fournit des tests de formatage pour Rust
          </para>
          <indexterm zone="rust clippy-driver">
            <primary sortas="b-clippy-driver">clippy-driver</primary>
          </indexterm>
        </listitem>
      </varlistentry>



      <!--  <varlistentry id="miri">

        <term><command>miri</command></term>
        <listitem>
          <para>
            is an interpreter for Rust's mid-level intermediate representation
            (MIR). It is not installed by default.
          </para>
          <indexterm zone="rust miri">
            <primary sortas="b-miri">miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rls">
        <term><command>rls</command></term>
        <listitem>
          <para>
            is the Rust Language Server. This can run in the background to
            provide IDEs, editors, and other tools with information about Rust
            programs
          </para>
          <indexterm zone="rust rls">
            <primary sortas="b-rls">rls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-analyzer">
        <term><command>rust-analyzer</command></term>
        <listitem>
          <para>
            is an implementation of Language Server Protocol for the Rust
            programming language.
          </para>
          <indexterm zone="rust rust-analyzer">
            <primary sortas="b-rust-analyzer">rust-analyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-demangler">
        <term><command>rust-demangler</command></term>
        <listitem>
          <para>
            converts a list of Rust mangled symbols into a
            corresponding list of demangled symbols
          </para>
          <indexterm zone="rust rust-demangler">
            <primary sortas="b-rust-demangler">rust-demangler</primary>
          </indexterm>
        </listitem>
      </varlistentry> -->
<varlistentry id="rust-gdb">
        <term><command>rust-gdb</command></term>
        <listitem>
          <para>
            est un script enveloppe pour gdb qui récupère les modules d'affichage Python
installés dans <filename
class="directory">/opt/rustc-&rust-version;/lib/rustlib/etc</filename>
          </para>
          <indexterm zone="rust rust-gdb">
            <primary sortas="b-rust-gdb">rust-gdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-gdbgui">
        <term><command>rust-gdbgui</command></term>
        <listitem>
          <para>
            est un script enveloppe pour une interface graphique de gdb qui se lance
dans un navigateur
          </para>
          <indexterm zone="rust rust-gdbgui">
            <primary sortas="b-rust-gdbgui">rust-gdbgui</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-lldb">
        <term><command>rust-lldb</command></term>
        <listitem>
          <para>
            est un script Python enveloppe pour LLDB (le débogueur de LLVM) qui récupère
les modules d'affichage Python
          </para>
          <indexterm zone="rust rust-lldb">
            <primary sortas="b-rust-lldb">rust=lldb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustc">
        <term><command>rustc</command></term>
        <listitem>
          <para>
            est le compilateur rust
          </para>
          <indexterm zone="rust rustc">
            <primary sortas="b-rustc">rustc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustdoc">
        <term><command>rustdoc</command></term>
        <listitem>
          <para>
            génère de la documentation à partir de code source rust
          </para>
          <indexterm zone="rust rustdoc">
            <primary sortas="b-rustdoc">rustdoc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustfmt">
        <term><command>rustfmt</command></term>
        <listitem>
          <para>
            formatte du code rust
          </para>
          <indexterm zone="rust rustfmt">
            <primary sortas="b-rustfmt">rustfmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstd">
        <term><filename class="libraryfile">libstd-&lt;16-byte-hash&gt;.so</filename></term>
        <listitem>
          <para>
            est la Bibliothèque Standard de Rust, le fondement des logiciels Rust
portables
          </para>
          <indexterm zone="rust libstd">
            <primary sortas="c-libstd">libstd-&lt;16-byte-hash&gt;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

</sect1>
