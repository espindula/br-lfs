<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY gcc-download-http  "&gnu-http;/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.xz">
  <!ENTITY gcc-download-ftp   "&gnu-ftp;/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.xz">
  <!ENTITY gcc-md5sum         "31c86f2ced76acac66992eeedce2fce2">
  <!ENTITY gcc-size           "77&nbsp;Mo">
  <!ENTITY gcc-buildsize      "8,0 Go (2,4 Go installé avec tous les langages listés, plus 1,0 Go pour les
tests)">
  <!-- For me the SBU values are a bit faster on haswell, but much slower on ryzen 3400G,
       so keeping these existing values as an approximation - ken -->
  <!ENTITY gcc-time           "26 SBU (plus 56 SBU pour les tests, tous deux avec parallélisme = 4)">
]>

<sect1 id="gcc" xreflabel="GCC-&gcc-version;">
  <?dbhtml filename="gcc.html" ?>

  <sect1info>
<date>$Date$</date></sect1info>

  <title>GCC-&gcc-version;</title>

  <indexterm zone="gcc">
    <primary sortas="a-gcc-5-0">GCC-&gcc-version;</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à GCC</title>

    <para>
      <!--One additional language, Ada, is available in the collection. It has
      a binary bootstrap requirement for the first installation, so it is
      described on a separate page (<xref linkend="gcc-ada"/>
) but can be added
      here if you are performing a rebuild or upgrade. Since C and C++ are
      installed in LFS, this page is  either for upgrading C and C++, or for
      installing additional compilers.-->
Le paquet <application>GCC</application> contient la collection de
compilateurs GNU. Cette page décrit l'installation des compilateurs pour les
langages suivants&nbsp;: C, C++, D, Fortran, Objective C, Objective C++ et
Go.
      
    </para>

    &lfs110a_checked;

    <caution>
      <para>
        Si vous mettez à jour depuis une version de <application>GCC</application>
antérieure à &gcc-version;, vous devez faire attention en compilant les
modules externes au noyau. Vous devriez vous assurer que le noyau et tous
ses modules natifs sont aussi compilés en utilisant la même version de
<application>GCC</application> que celle utilisée pour construire les
modules externes. Ce problème ne touche pas les mises à jour du noyau natif
(et des modules du noyau), car les instructions ci-dessous sont une
réinstallation complète de <application>GCC</application>. Si vous avez
installé des modules externes, assurez-vous qu'ils soient recompilés en
utilisant la version mise à jour de <application>GCC</application>. Comme
toujours, ne mettez jamais à jour les en-têtes du noyau à partir de celles
utilisées quand on a compilé <application>Glibc</application> dans LFS.
      </para>

      <para>
        Certains en-têtes système doivent être corrigés pour être utilisés avec
GCC. Cela se fait pendant l'installation de GCC et les en-têtes
<quote>corrigés</quote> sont installés dans <filename class="directory">
/usr/lib/gcc/&lt;triplet machine&gt;/&lt;version GCC&gt;/include-fixed
</filename>. Cela est sans danger si GCC est construit pendant la phase
LFS. Mais si vous réinstallez GCC dans BLFS, certains des paquets de BLFS
peuvent être <quote>corrigés</quote>. Si un de ces paquets est réinstallé
ensuite, les en-têtes <quote>corrigés</quote> ne sont pas mis à jour, ce qui
peut occasionner des incohérences de version. Dans ce cas, les en-têtes
<quote>corrigés</quote> doivent être mis à jour en lançant (en tant que
<systemitem class="username">root</systemitem>)&nbsp;: <command>
/usr/libexec/gcc/x86_64-pc-linux-gnu/&gcc-version;/install-tools/mkheaders
</command>. Le triplet de la machine peut être différent sur un système 32
bits.
      </para>
    </caution>

    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement (HTTP)&nbsp;: <ulink url="&gcc-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Téléchargement (FTP)&nbsp;: <ulink url="&gcc-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5 du téléchargement&nbsp;: &gcc-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &gcc-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &gcc-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction&nbsp;: &gcc-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dépendances de GCC</bridgehead>

    <!--
    <bridgehead renderas="sect4">
Recommended</bridgehead>
    <para role="recommended">
      <xref linkend="dejagnu"/>, for tests
    </para>
-->
<bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <xref linkend="gdb"/>, <xref linkend="valgrind"/> (pour les tests) et <ulink
url="https://repo.or.cz/isl.git">ISL</ulink> (pour activer l'optimisation
graphite)
    </para>
    
    <para condition="html" role="usernotes">
      Notes utilisateur&nbsp;: <ulink url="&blfs-wiki;/gcc"/>
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Installation de GCC</title>

    <important>
      <para>
        <!--Having the <application>
Tcl</application>,
        <application>Expect</application> and <application>DejaGnu</application>
        packages installed before beginning the build is highly recommended so
        you can run the full suite of tests.-->
Même si vous ne spécifiez que des langages autres que C et C++ à la commande
<command>./configure</command> ci-dessous, le processus d'installation
écrasera les compilateurs C et C++ et les bibliothèques existantes de
<application>GCC</application>. Il est recommandé de lancer la suite de
tests complète.
      </para>

      <para>
        Ne continuez pas avec la commande <command>make install</command> avant
d'être sûr que la construction a réussi. Vous pouvez comparer vos résultats
de tests avec ceux qui se trouvent sur <ulink
url="https://gcc.gnu.org/ml/gcc-testresults/"/>. Il se peut que vous vouliez
également vous référer aux informations qui se trouvent dans la section
<application>GCC</application> du chapitre 8 du livre LFS (<ulink
url="&lfs-root;/chapter08/gcc.html"/>).
      </para>
    </important>

    <para>
      Les instructions ci-dessous utilisent intentionnellement le processus
<quote>bootstrap</quote>. Le bootstrap est utile pour la robustesse et est
fortement recommandé pour un changement de version des compilateurs. Pour le
désactiver, passez <parameter>--disable-bootstrap</parameter> dans les
options <command>./configure</command> ci-dessous.
    </para>

    <para>
      Comme dans LFS, corrigez un problème cassant libasan.a identifié en
amont&nbsp;:
    </para>

<screen><userinput>sed -e '/static.*SIGSTKSZ/d' \
    -e 's/return kAltStackSize/return SIGSTKSZ * 4/' \
    -i libsanitizer/sanitizer_common/sanitizer_posix_libcdep.cpp</userinput></screen>

    <para>
      Installez <application>GCC</application> en lançant les commandes
suivantes&nbsp;:
    </para>

<screen><userinput>case $(uname -m) in
  x86_64)
    sed -i.orig '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
  ;;
esac

mkdir build                                            &amp;&amp;
cd    build                                            &amp;&amp;

../configure                                           \
    --prefix=/usr                                      \
    --disable-multilib                                 \
    --with-system-zlib                                 \
    --enable-languages=c,c++,d,fortran,go,objc,obj-c++ &amp;&amp;
make</userinput></screen>

    <para>
      Si vous avez installé des paquets supplémentaires comme
<application>Valgrind</application> et <application>GDB</application>, la
partie de la suite de tests qui traite de <application>GCC</application>
lancera plus de tests que dans LFS. Certains d'entre eux signaleront des
FAIL et d'autres XPASS (passage alors qu'un échec était attendu). Pour
gcc-11.1.0, environ 90 échecs auront lieu dans la suite
<quote>guality</quote>, ainsi que divers échecs tout le long du reste de la
suite de tests. Si tous les compilateurs ci-dessus sont construits, il y a
environ 102 échecs inattendus sur plus de 481&nbsp;000 tests. Pour lancer
les tests, lancez&nbsp;:
    </para>

<!-- The command above may error out, so using && may prevent the summary
to be run. -->
<screen><userinput>ulimit -s 32768 &amp;&amp;
make -k check</userinput></screen>


    <para>
      Les tests sont très longs, et les résultats peuvent être très difficiles à
trouver dans les logs, en particulier si vous utilisez des travaux en
parallèle avec make. Vous pouvez avoir un résumé des tests avec&nbsp;:
    </para>

<screen><userinput>../contrib/test_summary</userinput></screen>

    <para>Un petit nombre de tests, moins de 20 sur plus de 450&nbsp;000, échoueront,
mais à moins que ces échecs ne soient excessifs, vous pouvez les ignorer.</para>

    <para>
      Maintenant, en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>make install &amp;&amp;

mkdir -pv /usr/share/gdb/auto-load/usr/lib              &amp;&amp;
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib &amp;&amp;

chown -v -R root:root \
    /usr/lib/gcc/*linux-gnu/&gcc-version;/include{,-fixed}

rm -rf /usr/lib/gcc/$(gcc -dumpmachine)/&gcc-version;/include-fixed/bits/</userinput></screen>

    <para>
      Quelques paquets veulent trouver le préprocesseur C dans <filename
class="directory">/lib</filename> ou peuvent se référer au compilateur C
sous le nom de <command>cc</command>. Les liens symboliques suivants ne sont
pas utiles si vous avez suivi les instructions LFS, puisqu'ils sont déjà
créés. Si vous ne les avez pas sur votre système, tapez en tant
qu'utilisateur <systemitem class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>ln -v -sf ../usr/bin/cpp /lib          &amp;&amp;
ln -v -sf gcc /usr/bin/cc              &amp;&amp;
install -v -dm755 /usr/lib/bfd-plugins &amp;&amp;
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/&gcc-version;/liblto_plugin.so /usr/lib/bfd-plugins/</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explication des commandes</title>

    <para>
      <command>mkdir build; cd build</command>&nbsp;: La documentation de
<application>GCC</application> recommande de construire le paquet dans un
répertoire de construction dédié.
    </para>

    <para>
      <parameter>--disable-multilib</parameter>&nbsp;: Ce paramètre assure que les
fichiers sont créés pour l'architecture spécifique à votre ordinateur.
    </para>

    <para>
      <parameter>--with-system-zlib</parameter>&nbsp;: Utilise la version système
de <application>zlib</application> au lieu de la version fournie.
<application>zlib</application> est utilisé pour compresser et décompresser
les langages intermédiaires de <application>GCC</application> dans les
fichiers objets LTO "(Link Time Optimization)".
    </para>

    <para>
      <parameter>--enable-languages=c,c++,d,fortran,go,objc,obj-c++</parameter>&nbsp;:
Cette commande identifie les langages à construire. Vous pouvez changer
cette commande pour retirer les langages dont vous ne voulez pas. Trois
autres langages peuvent être ajoutés, dont ADA, BRIG (ajoutez
<parameter>brig</parameter> à la liste des langages disponibles), un format
binaire pour HSAIL (Langage Intermédiaire pour Architectures Système
Hétérogènes) et JIT (ajoutez <parameter>jit</parameter> à la liste des
langages disponibles), une bibliothèque qui peut être liée à un interpréteur
qui souhaite générer du code machine <quote>à la volée</quote> à
l'exécution. Ils n'ont pas été testés par les développeurs de BLFS.
    </para>
    

    <!-- It's been three major versions now, and many years. 
    Commenting out unless needed somewhere. -renodr
    <para>
      <option>- -with-default-libstdcxx-abi=gcc4-compatible</option>: Use this
      switch if you are upgrading from a <application>GCC</application>
      version prior to 5.1.0, and you do not want to recompile all the
      libraries written in C++.
    </para>
   -->
<para>
      <command>ulimit -s 32768</command>&nbsp;: Cette commande empêche plusieurs
scripts de tomber à court d'espace dans la pile.
    </para>

    <para>
      <command>make -k check</command>&nbsp;: Cette commande lance une suite de
tests sans s'arrêter si une erreur est rencontrée.
    </para>

    <para>
      <command>../contrib/test_summary</command>&nbsp;: Cette commande produira un
résumé des résultats de la suite de tests. Vous pouvez ajouter <command>|
grep -A7 Summ</command> à la commande pour produire une version du résumé
encore plus condensée. Il se peut que vous souhaitiez aussi rediriger la
sortie vers un fichier pour visualiser et comparer à l'avenir.
    </para>

    <para>
      <command>mv -v /usr/lib/*gdb.py ...</command>&nbsp;: Le processus
d'installation met quelques fichiers utilisé par
<application>gdb</application> dans le répertoire <filename
class="directory">/usr/lib</filename>. Cela génère des messages d'erreur
curieux quand <command>ldconfig</command> est utilisé. Cette commande
déplace les fichiers à un autre endroit.
    </para>

    <para>
      <command>chown -v -R root:root /usr/lib/gcc/*linux-gnu/...</command>&nbsp;:
Si le paquet est construit par un utilisateur différent de root, le
propriétaire du répertoire <filename class='directory'>include</filename>
installé sera incorrect. Ces commandes modifient l'appartenance vers
l'utilisateur et le groupe <systemitem class="username">root</systemitem>.
    </para>

    <para>
      <command>rm -rf .../include-fixed/bits/</command>&nbsp;: supprime un fichier
en erreur dans gcc ajouté par le processus fixincludes.
    </para>

  </sect2>

  <sect2 role="content">
    <title>Contenu</title>

    <para>
      Plusieurs noms de programmes et de bibliothèques et des descriptions ne sont
pas listés ici, mais peuvent être trouvé dans <ulink
url="&lfs-root;/chapter08/gcc.html#contents-gcc"/> puisqu'ils sont
initialement installés dans LFS.
    </para>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>

      <seglistitem>
        <seg>
          gccgo, gdc, gfortran, go et gofmt, liés en dur à des noms spécifiques à
l'architecture
        </seg>
        <seg>
          libgfortran.{so,a}, libgdruntime.{so,a}, libgphobos.{so,a}, libgo.{so,a},
libgobegin.a, libgolibbegin.a, libobjc.{so,a}, et de nombreuses autres
bibliothèques et exécutables.
        </seg>
        <seg>
          /usr/lib/go
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="gccgo">
        <term><command>gccgo</command></term>
        <listitem>
          <para>
            est un compilateur basé sur GCC pour le langage
<application>Go</application>
          </para>
          <indexterm zone="gcc gccgo">
            <primary sortas="b-gccgo">gccgo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="go">
        <term><command>go</command></term>
        <listitem>
          <para>
            est un outil pour la gestion du code source <application>Go</application>
          </para>
          <indexterm zone="gcc go">
            <primary sortas="b-go">go</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gofmt">
        <term><command>gofmt</command></term>
        <listitem>
          <para>
            est un outil pour le formatage du code source <application>Go</application>
          </para>
          <indexterm zone="gcc gofmt">
            <primary sortas="b-gofmt">gofmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gdc">
        <term><command>gdc</command></term>
        <listitem>
          <para>
            est un compilateur basé sur GCC pour le langage <application>D</application>
          </para>
          <indexterm zone="gcc gdc">
            <primary sortas="b-gdc">gdc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gfortran">
        <term><command>gfortran</command></term>
        <listitem>
          <para>
            est un compilateur basé sur GCC pour le langage
<application>Fortran</application>
          </para>
          <indexterm zone="gcc gfortran">
            <primary sortas="b-gfortran">gfortran</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
