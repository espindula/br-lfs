<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY llvm-url "https://github.com/llvm/llvm-project/releases/download/llvmorg-&llvm-version;">

  <!ENTITY llvm-download-http "&llvm-url;/llvm-&llvm-version;.src.tar.xz">
  <!ENTITY llvm-download-ftp  "">
  <!ENTITY llvm-md5sum        "c77db4c71e1eb267358204dffe2c6e10">
  <!ENTITY llvm-size          "50&nbsp;Mo">
  <!ENTITY llvm-buildsize     "2,7&nbsp;Go (848&nbsp;Mo installé, plus 18,3&nbsp;Go pour les tests et
308&nbsp;Mo pour la documentation)">
  <!ENTITY llvm-time          "24&nbsp;SBU (avec Clang et parallélisme = 4, plus 22&nbsp;SBU pour les
tests)">

  <!ENTITY clang-download-http "&llvm-url;/clang-&llvm-version;.src.tar.xz">
  <!ENTITY clang-md5sum        "a6d0141e50b48f5e60c682277dac83b4">
  <!ENTITY clang-size          "18&nbsp;Mo">

  <!ENTITY compiler-rt-download-http "&llvm-url;/compiler-rt-&llvm-version;.src.tar.xz">
  <!ENTITY compiler-rt-md5sum        "12e6777354f0121cbe73ef13342a9302">
  <!ENTITY compiler-rt-size          "2,3&nbsp;Mo">

  <!-- CMake modules and third party dependencies renamed and uploaded
       onto anduin to avoid stupid file names.  -->

  <!ENTITY cmake-llvm-download-http "&sources-anduin-http;/llvm/llvm-cmake-&llvm-version;.src.tar.xz">
  <!ENTITY cmake-llvm-md5sum         "c3647d253f67ce255e1aba014e528f5b">
  <!ENTITY cmake-llvm-size           "6,8&nbsp;Ko">

  <!-- Kept in here for the 15.0.6 revert since it isn't used in instructions
       and should simplify upgrading again. -->
  <!ENTITY llvm-3rdparty-download-http "&sources-anduin-http;/llvm/llvm-third-party-&llvm-version;.src.tar.xz">
  <!ENTITY llvm-3rdparty-md5sum        "d51ad18774cb513b725d0945c667efb3">
  <!ENTITY llvm-3rdparty-size          "376&nbsp;Ko">
]>

<sect1 id="llvm" xreflabel="LLVM-&llvm-version;">
  <?dbhtml filename="llvm.html" ?>


  <title>LLVM-&llvm-version;</title>

  <indexterm zone="llvm">
    <primary sortas="a-LLVM">LLVM</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à LLVM</title>

    <para>
      Le paquet <application>LLVM</application> contient une collection de
compilateur modulaire et réutilisable et des technologies de chaînes
d'outils. Le cœur des bibliothèques Low Level Virtual Machine (LLVM) fournit
un optimiseur moderne indépendant de la source et de la cible, ainsi que le
support de génération de code pour beaucoup des processeurs populaires
(ainsi que quelques autres moins courants&nbsp;!). Ces bibliothèques sont
construites autour d'une représentation du code connu sous le nom de
représentation LLVM intermédiaire ("LLVM IR").
    </para>

    <para>
      <application>Clang</application> fournit de nouvelles interfaces C, C++,
Objective C et Objective C++ pour <application>LLVM</application> et est
requis par certains paquets de bureau comme
<application>firefox</application> et pour <application>Rust</application>
si vous le construisez avec le <application>LLVM</application> du système.
    </para>

    <para>
      Le paquet <application>Compiler RT</application> fournit un nettoyeur à
l'exécution et des bibliothèques de suivi pour les développeurs qui
utilisent <application>Clang</application> et
<application>LLVM</application>.
    </para>

    &lfs113_checked;

    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement (HTTP)&nbsp;: <ulink url="&llvm-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Téléchargement (FTP)&nbsp;: <ulink url="&llvm-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5&nbsp;: &llvm-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &llvm-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &llvm-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction&nbsp;: &llvm-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Téléchargements supplémentaires</bridgehead>
    <para>
      <emphasis role="strong">Modules Cmake pour LLVM</emphasis>
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement&nbsp;: <ulink url="&cmake-llvm-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5&nbsp;: &cmake-llvm-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &cmake-llvm-size;
        </para>
      </listitem>
    </itemizedlist>

    

    <!-- LLVM-15.0.6 revert: Keep for when we use 16 again.
    <para>

      <emphasis role="strong">Third-party dependencies for LLVM build system</emphasis>
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Download: <ulink url="&llvm-3rdparty-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &llvm-3rdparty-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &llvm-3rdparty-size;
        </para>
      </listitem>
    </itemizedlist>
    -->
<bridgehead renderas="sect3">Téléchargements recommandés</bridgehead>
    <para>
      <emphasis role="strong">Clang</emphasis>
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement&nbsp;: <ulink url="&clang-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5&nbsp;: &clang-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &clang-size;
        </para>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          correctif activant <xref linkend="gSSP"/> par défaut dans clang&nbsp;:
<ulink url="&patch-root;/clang-&llvm-version;-enable_default_ssp-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Téléchargements facultatifs</bridgehead>
    <para>
      <emphasis role="strong">Compiler RT</emphasis>
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement&nbsp;: <ulink url="&compiler-rt-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5&nbsp;: &compiler-rt-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &compiler-rt-size;
        </para>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3">Dépendances de LLVM</bridgehead>

    <bridgehead renderas="sect4">Requises</bridgehead>
    <para role="required">
      <xref linkend="cmake"/>
    </para>

    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <!-- for yaml2obj -->
<xref linkend="doxygen"/>, <xref linkend="git"/>, <xref
linkend="graphviz"/>, <xref linkend="libxml2"/>, <xref linkend="pygments"/>,
<xref linkend="rsync"/> (pour les tests), <xref linkend="recommonmark"/>
(pour construire la documentation), <xref linkend="texlive"/> (ou <xref
linkend="tl-installer"/>), <xref linkend="valgrind"/>, <xref
linkend="PyYAML"/>, <xref linkend="zip"/>, <ulink
url="https://ocaml.org/">OCaml</ulink>, <ulink
url="https://pypi.org/project/psutil/">psutil</ulink> (pour les tests) et
<ulink url="https://github.com/Z3Prover/z3">Z3</ulink>
    </para>

    <para condition="html" role="usernotes">Notes utilisateur&nbsp;: <ulink url="&blfs-wiki;/llvm"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation de LLVM</title>

    <para>
      Starting with version 15.0.0, an additional tarball,
<filename>llvm-cmake-&llvm-version;.src.tar.xz</filename> is needed.
Upstream expects it extracted at the same level as the
<filename>llvm-&llvm-version;.src.tar.xz</filename> tarball, and the
extracted directory renamed to <filename
class="directory">cmake</filename>. Extract it and modify the build system
to avoid creating a directory outside of the
<filename>llvm-&llvm-version;.src</filename> hierarchy:
    </para>

    

<!-- LLVM-15 revert: Uncomment this and delete the above commands when
     upgrading back to LLVM-16.
<screen>
<userinput>tar -xf ../llvm-cmake-&llvm-version;.src.tar.xz                              &amp;&amp;
tar -xf ../llvm-third-party-&llvm-version;.src.tar.xz                        &amp;&amp;
sed '/LLVM_COMMON_CMAKE_UTILS/s@../cmake@cmake-&llvm-version;.src@'          \
    -i CMakeLists.txt                                                &amp;&amp;
sed '/LLVM_THIRD_PARTY_DIR/s@../third-party@third-party-&llvm-version;.src@' \
    -i cmake/modules/HandleLLVMOptions.cmake</userinput></screen>
-->
<screen><!-- LLVM-15 revert: Delete the above text when upgrading.
    <para>

      Two additional tarballs
      <filename>llvm-cmake-&llvm-version;.src.tar.xz</filename> and
      <filename>llvm-third-party-&llvm-version;.src.tar.xz</filename> are
      needed by LLVM building system.  The upstream expects them extracted
      at the same level as the
      <filename>llvm-&llvm-version;.src.tar.xz</filename> tarball,
      and the extracted directories renamed to
      <filename class="directory">cmake</filename> and
      <filename class="directory">third-party</filename>.  Extract them and
      modify the build system to avoid creating ambiguously-named
      directories outside the
      <filename>llvm-&llvm-version;.src</filename> hierarchy:
    </para>
    -->
<userinput>tar -xf ../llvm-cmake-&llvm-version;.src.tar.xz &amp;&amp;
sed '/LLVM_COMMON_CMAKE_UTILS/s@../cmake@cmake-&llvm-version;.src@' \
    -i CMakeLists.txt</userinput></screen>



    <para>
      Installez <application>clang</application> dans l'arborescence des sources
en exécutant les commandes suivantes&nbsp;:
    </para>

<screen><userinput>tar -xf ../clang-&llvm-version;.src.tar.xz -C tools &amp;&amp;
mv tools/clang-&llvm-version;.src tools/clang</userinput></screen>

    <para>
      Si vous avez téléchargé <application>compiler-rt</application>, installez-le
dans l'arborescence des sources en exécutant les commandes suivantes&nbsp;:
    </para>

<screen><userinput>tar -xf ../compiler-rt-&llvm-version;.src.tar.xz -C projects &amp;&amp;
mv projects/compiler-rt-&llvm-version;.src projects/compiler-rt</userinput></screen>

    <para>
     Il y a plusieurs scripts Python dans ce paquet qui utilisent
<command>/usr/bin/env python</command> pour accéder au Python du système qui
sur LFS est <xref linkend="python3"/>. Utilisez la commande suivante pour
corriger ces scripts&nbsp;:
    </para>

<screen><userinput>grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'</userinput></screen>

    <para>
      Si vous avez téléchargé <application>clang</application>, appliquez le
correctif suivant pour activer <xref linkend="gSSP"/> par défaut dans les
programmes compilés.
    </para>

<!-- LLVM-15 revert: Uncomment this when going back to LLVM-16.
    <para>

      If you have downloaded <application>compiler-rt</application>,
      fix a test case broken by default SSP in
      <application>clang</application>:
    </para>

<screen><userinput remap="pre">sed 's/clang_dfsan/&amp; -fno-stack-protector/' \
    -i projects/compiler-rt/test/dfsan/origin_unaligned_memtrans.c</userinput></screen>
-->
<screen><!-- need <../<patch>
 instead of -i because -d changes directory
     before applying -i -->
<userinput remap="pre">patch -Np2 -d tools/clang &lt;../clang-&llvm-version;-enable_default_ssp-1.patch</userinput></screen>




    <para>
      Installez <application>LLVM</application> en exécutant les commandes
suivantes&nbsp;:
    </para>

<screen><userinput>mkdir -v build &amp;&amp;
cd       build &amp;&amp;

CC=gcc CXX=g++                                  \
cmake -DCMAKE_INSTALL_PREFIX=/usr               \
      -DLLVM_ENABLE_FFI=ON                      \
      -DCMAKE_BUILD_TYPE=Release                \
      -DLLVM_BUILD_LLVM_DYLIB=ON                \
      -DLLVM_LINK_LLVM_DYLIB=ON                 \
      -DLLVM_ENABLE_RTTI=ON                     \
      -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
      -DLLVM_BINUTILS_INCDIR=/usr/include       \
      -DLLVM_INCLUDE_BENCHMARKS=OFF             \
      -DCLANG_DEFAULT_PIE_ON_LINUX=ON           \
      -Wno-dev -G Ninja ..                      &amp;&amp;
ninja</userinput></screen>

    <para>
      Si vous avez installé <xref linkend="recommonmark"/> et ses dépendances,
vous pouvez générer la documentation html et les pages de manuel avec les
commandes suivantes&nbsp;:
    </para>

<screen remap="doc"><userinput>cmake -DLLVM_BUILD_DOCS=ON            \
      -DLLVM_ENABLE_SPHINX=ON         \
      -DSPHINX_WARNINGS_AS_ERRORS=OFF \
      -Wno-dev -G Ninja ..            &amp;&amp;
ninja docs-llvm-html  docs-llvm-man</userinput></screen>

    <para>
      La documentation de clang peut être aussi construite&nbsp;:
    </para>

<screen remap="doc"><userinput>ninja docs-clang-html docs-clang-man</userinput></screen>

    <para>
      
      <!-- EDITORS - if you have more than 4 cores, take some offline to measure
      the elapsed time for the tests.  Also, libstdc++.a and perhaps libstdc++fs.a
      are used by a couple of the link-static tests. -->
<!-- 16.0.0: https://github.com/llvm/llvm-project/issues/60678 -->
<!-- To editors: it seems there is a more thorough test suite named
           "test-suite-16.0.0.src.tar.xz" on the GitHub release download
           page.  The usage of it is on
           https://llvm.org/docs/TestSuiteGuide.html.  It looks like we've
           never mentioned it in BLFS.  -->
To test the results, issue: <command>ninja check-all</command>. Tests are
built with all <emphasis>available</emphasis> cores, but run using the
number of <emphasis>online</emphasis> processors. (The difference is that
available cores can be limited using <command>taskset</command>, but taking
them offline requires echoing 0 to <filename
class="directory">/sys/devices/system/cpu/cpu&lt;N&gt;/online</filename> by
the <systemitem class="username">root</systemitem> user and makes them
temporarily unusable by all jobs on the machine.)  Note that two tests out
of more than 69,200 are known to fail: <filename>DataFlowSanitizer-x86_64 ::
custom.cpp</filename> and <filename>DataFlowSanitizer-x86_64 ::
release_shadow_space.c</filename>.
      
    </para>

    <para>
      Maintenant, en tant qu'utilisateur &root;&nbsp;:
    </para>

<!-- as of version 13.0.0, the install process seems to install the html
     documentation and the manual pages. The llvm html documentation
     is installed into /usr/share/doc/LLVM/llvm, while the clang html
     documentation is installed into /usr/share/doc/LLVM/clang. So we have
     just to move it. -->
<screen role="root"><userinput>ninja install &amp;&amp;
cp bin/FileCheck /usr/bin</userinput></screen>

    <para>
      Si vous avez construit la documentation de llvm, elle a été installée par la
commande précédente, mais elle doit être déplacée. En tant qu'utilisateur
<systemitem class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"
        remap="doc"><userinput>install -v -d -m755 /usr/share/doc/llvm-&llvm-version;            &amp;&amp;
mv -v /usr/share/doc/LLVM/llvm /usr/share/doc/llvm-&llvm-version; &amp;&amp;
rmdir -v --ignore-fail-on-non-empty /usr/share/doc/LLVM</userinput></screen>

    <para>
      Si vous avez construit la documentation de clang, elle a été installée, mais
doit aussi être déplacée. De nouveau, en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"
        remap="doc"><userinput>install -v -d -m755 /usr/share/doc/llvm-&llvm-version;             &amp;&amp;
mv -v /usr/share/doc/LLVM/clang /usr/share/doc/llvm-&llvm-version; &amp;&amp;
rmdir -v --ignore-fail-on-non-empty /usr/share/doc/LLVM</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explication des commandes</title>

    <para>
      <parameter>-DLLVM_ENABLE_FFI=ON</parameter>&nbsp;: Ce paramètre permet à
<application>LLVM</application> d'utiliser
<application>libffi</application>.
    </para>

    <para>
      <parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter>&nbsp;: ce paramètre
construit les bibliothèques en statique et les lie toutes en une unique
bibliothèque partagée. C'est la méthode recommandée pour la construction de
la bibliothèque partagée.
    </para>

    <para>
      <parameter>-DCMAKE_BUILD_TYPE=Release</parameter>&nbsp;: ce paramètre active
les optimisations du compilateur pour augmenter la vitesse du code et
diminuer sa taille. Il désactive aussi quelques vérifications de
compilation, non nécessaires à un système en production.
    </para>

    <para>
      <parameter>-DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF"</parameter>&nbsp;: ce
paramètre active la construction de la même cible que l'hôte, et aussi pour
le GPU r600 AMD utilisé par les pilotes r600 et radeonsi de Mesa. La cible
BPF est reqise pour construire <xref linkend="v4l-utils"/>. Par défaut tout
est activé. Vous pouvez indiquer une liste de cibles séparées par des
virgules. Les cibles valides sont&nbsp;:  host, X86, Sparc, PowerPC, ARM,
AArch64, Mips, Hexagon, Xcore, MSP430, NVPTX, SystemZ, AMDGPU, BPF,
CppBackend ou all.
    </para>

    <para>
      <parameter>-DLLVM_LINK_LLVM_DYLIB=ON</parameter>&nbsp;: utilisé avec
<parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter>, ce paramètre active la
liaison des outils avec la bibliothèque partagée plutôt que des
bibliothèques statiques. Il réduit aussi légèrement leur taille et s'assure
également que llvm-config utilisera bien libLLVM-&llvm-maj-version;.so.
    </para>

    <para>
      <parameter>-DLLVM_ENABLE_RTTI=ON</parameter>&nbsp;: ce paramètre est utilisé
pour construire LLVM avec des informations de type à l'exécution. Cela est
requis pour la construction de <xref linkend="mesa"/>.
    </para>

    <para>
      <parameter>-DLLVM_BINUTILS_INCDIR=/usr/include</parameter>&nbsp;: ce
paramètre est utilisé pour dire au système de construction où se trouvent
les en-têtes de binutils, installés dans LFS. Cela permet la construction de
<filename class="libraryfile">LLVMgold.so</filename>, qui est nécessaire
pour construire les programmes avec <command>clang</command> et
l'optimisation à l'édition des liens (LTO).
    </para>

    <para>
      <parameter>-DLLVM_INCLUDE_BENCHMARKS=OFF</parameter>&nbsp;: est utilisé pour
désactiver la génération des cibles de construction pour les tests de
rapidité de LLVM. Cette option nécessite du code supplémentaire qui n'est
actuellement pas disponible.
    </para>

    <para>
      <parameter>-DCLANG_DEFAULT_PIE_ON_LINUX=ON</parameter>&nbsp;: rend l'option
<option>-fpie</option> active par défaut lors de la compilation des
programmes. Avec la fonctionnalité <xref linkend="gASLR"/> du noyau, cela
empêche certains types d'attaques basées sur la connaissance de la
disposition de l'espace mémoire.
    </para>

    <para>
      <option>-DBUILD_SHARED_LIBS=ON</option>&nbsp;: S'il est utilisé à la place
de <parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter> et
<parameter>-DLLVM_LINK_LLVM_DYLIB=ON</parameter>, ce paramètre construit les
bibliothèques <application>LLVM</application> (environ 60) en tant que
bibliothèques partagées plutôt que statiques.
    </para>

    <para>
      <option>-DLLVM_ENABLE_DOXYGEN</option>&nbsp;: Active la génération de la
documentation HTML navigable si vous avez installé <xref
linkend="doxygen"/>. Vous devriez lancer <command>make
doxygen-html</command> ensuite, et installer la documentation générée à la
main.
    </para>

  </sect2>

  <sect2 role="content">
    <title>Contenu</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>

      <seglistitem>
        <seg>
          amdgpu-arch, analyze-build, bugpoint, c-index-test, clang, clang++ (symlinks
to clang-&llvm-maj-version;), clang-&llvm-maj-version;, clang-check,
clang-cl, clang-cpp (last two symlinks to clang), clang-extdef-mapping,
clang-format, clang-linker-wrapper, clang-offload-bundler,
clang-offload-packager, clang-refactor, clang-rename, clang-repl,
clang-scan-deps, diagtool, dsymutil, FileCheck, git-clang-format, hmaptool,
intercept-build, llc, lli, llvm-addr2line (symlink to llvm-symbolizer),
llvm-ar, llvm-as, llvm-bcanalyzer, llvm-bitcode-strip (symlink to
llvm-objcopy), llvm-cat, llvm-cfi-verify, llvm-config, llvm-cov,
llvm-c-test, llvm-cvtres, llvm-cxxdump, llvm-cxxfilt, llvm-cxxmap,
llvm-debuginfo-analyzer, llvm-debuginfod, llvm-debuginfod-find, llvm-diff,
llvm-dis, llvm-dlltool (symlink to llvm-ar), llvm-dwarfdump, llvm-dwarfutil,
llvm-dwp, llvm-exegesis, llvm-extract, llvm-gsymutil, llvm-ifs,
llvm-install-name-tool (symlink to llvm-objcopy), llvm-jitlink, llvm-lib
(symlink to llvm-ar), llvm-libtool-darwin, llvm-link, llvm-lipo, llvm-lto,
llvm-lto2, llvm-mc, llvm-mca, llvm-ml, llvm-modextract, llvm-mt, llvm-nm,
llvm-objcopy, llvm-objdump, llvm-opt-report, llvm-otool (symlink to
llv-objdump), llvm-pdbutil, llvm-profdata, llvm-profgen, llvm-ranlib
(symlink to llvm-ar), llvm-rc, llvm-readelf (symlink to llvm-readobj),
llvm-readobj, llvm-reduce, llvm-remark-size-diff, llvm-remarkutil,
llvm-rtdyld, llvm-sim, llvm-size, llvm-split, llvm-stress, llvm-strings,
llvm-strip (symlink to llvm-objcopy), llvm-symbolizer, llvm-tapi-diff,
llvm-tblgen, llvm-tli-checker, llvm-undname, llvm-windres (symlink to
llvm-rc), llvm-xray, nvptx-arch, opt, sancov, sanstats, scan-build,
scan-build-py, scan-view, split-file, and verify-uselistorder
        </seg>
        <seg>
          libLLVM.so, libLLVM*.a (100 libraries), libLTO.so, libRemarks.so,
libclang.so, libclang-cpp.so, libclang*.a (42 libraries), and LLVMgold.so
        </seg>
        <seg>
          /usr/include/{clang,clang-c,llvm,llvm-c},
/usr/lib/{clang,cmake/{clang,llvm},libear,libscanbuild},
/usr/share/{clang,opt-viewer,scan-build,scan-view} et
/usr/share/doc/llvm-&llvm-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="amdgpu-arch">
        <term><command>amdgpu-arch</command></term>
        <listitem>
          <para>
            lists AMD GPUs installed; at runtime it needs <filename
class='libraryfile'>libhsa-runtime64.so</filename> which is not a part of
BLFS
          </para>
          <indexterm zone="llvm amdgpu-arch">
            <primary sortas="b-amdgpu-arch">amdgpu-arch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="analyze-build">
        <term><command>analyze-build</command></term>
        <listitem>
          <para>
            est un outil d'analyse statique
          </para>
          <indexterm zone="llvm analyze-build">
            <primary sortas="b-analyze-build">analyze-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bugpoint">
        <term><command>bugpoint</command></term>
        <listitem>
          <para>
            est l'outil de réduction de cas de test automatique
          </para>
          <indexterm zone="llvm bugpoint">
            <primary sortas="b-bugpoint">bugpoint</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="c-index-test">
        <term><command>c-index-test</command></term>
        <listitem>
          <para>
            est utilisé pour tester l'API libclang et montrer son utilisation
          </para>
          <indexterm zone="llvm c-index-test">
            <primary sortas="b-c-index-test">c-index-test</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang">
        <term><command>clang</command></term>
        <listitem>
          <para>
            est le compilateur <application>Clang</application> C, C++ et Objective-C
          </para>
          <indexterm zone="llvm clang">
            <primary sortas="b-clang">clang</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-check">
        <term><command>clang-check</command></term>
        <listitem>
          <para>
            est un outil pour effectuer une analyse de code statique et afficher des
arbres de syntaxe abstraite (AST)
          </para>
          <indexterm zone="llvm clang-check">
            <primary sortas="b-clang-check">clang-check</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-extdef-mapping">
        <term><command>clang-extdef-mapping</command></term>
        <listitem>
          <para>
            est un outil pour récupérer le nom USR et l'emplacement des définitions
externes dans un fichier source
          </para>
          <indexterm zone="llvm clang-extdef-mapping">
            <primary sortas="b-clang-extdef-mapping">clang-extdef-mapping</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-format">
        <term><command>clang-format</command></term>
        <listitem>
          <para>
            est un outil pour formater du code
C/C++/Java/JavaScript/Objective-C/Protobuf
          </para>
          <indexterm zone="llvm clang-format">
            <primary sortas="b-clang-format">clang-format</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-linker-wrapper">
        <term><command>clang-linker-wrapper</command></term>
        <listitem>
          <para>
            est une enveloppe autour de l'éditeur des liens de l'hôte
          </para>
          <indexterm zone="llvm clang-linker-wrapper">
            <primary sortas="b-clang-linker-wrapper">clang-linker-wrapper</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-offload-bundler">
        <term><command>clang-offload-bundler</command></term>
        <listitem>
          <para>
            est un outil pour rassembler/désassembler des fichiers reçus d'OpenMP
associés avec un fichier source commun
          </para>
          <indexterm zone="llvm clang-offload-bundler">
            <primary sortas="b-clang-offload-bundler">clang-offload-bundler</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-offload-packager">
        <term><command>clang-offload-packager</command></term>
        <listitem>
          <para>
            est un outil pour regrouper plusieurs fichiers objets en un seul binaire,
qui peut ensuite être utilisé pour créer un gros binaire contenant du code
de déchargement
          </para>
          <indexterm zone="llvm clang-offload-packager">
            <primary sortas="b-clang-offload-packager">clang-offload-packager</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-refactor">
        <term><command>clang-refactor</command></term>
        <listitem>
          <para>
            est un outil de réusinage basé sur Clang pour C, C++ et Objective-C
          </para>
          <indexterm zone="llvm clang-refactor">
            <primary sortas="b-clang-refactor">clang-refactor</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-rename">
        <term><command>clang-rename</command></term>
        <listitem>
          <para>
            est un outil pour renommer des symboles dans les programmes C/C++
          </para>
          <indexterm zone="llvm clang-rename">
            <primary sortas="b-clang-rename">clang-rename</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-scan-deps">
        <term><command>clang-scan-deps</command></term>
        <listitem>
          <para>
            est un outil pour scanner les dépendances dans un fichier source
          </para>
          <indexterm zone="llvm clang-scan-deps">
            <primary sortas="b-clang-scan-deps">clang-scan-deps</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="diagtool">
        <term><command>diagtool</command></term>
        <listitem>
          <para>
            est une combinaison d'outils pour gérer les diagnostics de clang
          </para>
          <indexterm zone="llvm diagtool">
            <primary sortas="b-diagtool">diagtool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="FileCheck">
        <term><command>FileCheck</command></term>
        <listitem>
          <para>
            est un outil qui lit deux fichiers (un depuis l'entrée standard, un spécifié
en ligne de command) et utiliser l'un pour vérifier l'autre.
          </para>
          <indexterm zone="llvm FileCheck">
            <primary sortas="b-FileCheck">FileCheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dsymutil">
        <term><command>dsymutil</command></term>
        <listitem>
          <para>
            et un outil utilisé pour manipuler les fichiers de symboles de débogage
DWARF archivés, compatible avec la commande Darwin
<command>dsymutil</command>
          </para>
          <indexterm zone="llvm dsymutil">
            <primary sortas="b-dsymutil">dsymutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-clang-format">
        <term><command>git-clang-format</command></term>
        <listitem>
          <para>
            lance clang-format sur des correctifs générés par git (requiert <xref
linkend="git"/>)
          </para>
          <indexterm zone="llvm git-clang-format">
            <primary sortas="b-git-clang-format">git-clang-format</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="hmaptool">
        <term><command>hmaptool</command></term>
        <listitem>
          <para>
            est un outil Python pour décharger et construire des correspondances
d'en-têtes
          </para>
          <indexterm zone="llvm hmaptool">
            <primary sortas="b-hmaptool">hmaptool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="intercept-build">
        <term><command>intercept-build</command></term>
        <listitem>
          <para>
            génère une base de données des commandes de construction pour un projet
          </para>
          <indexterm zone="llvm intercept-build">
            <primary sortas="b-intercept-build">intercept-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llc">
        <term><command>llc</command></term>
        <listitem>
          <para>
            est le compilateur statique <application>LLVM</application>
          </para>
          <indexterm zone="llvm llc">
            <primary sortas="b-llc">llc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lli">
        <term><command>lli</command></term>
        <listitem>
          <para>
            est utilisé pour exécuter directement des programmes en bytecode
<application>LLVM</application>
          </para>
          <indexterm zone="llvm lli">
            <primary sortas="b-lli">lli</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-addr2line">
        <term><command>llvm-addr2line</command></term>
        <listitem>
          <para>
            est un outil utilisé pour convertir les adresses en noms de fichiers et en
numéro de ligne
          </para>
          <indexterm zone="llvm llvm-addr2line">
            <primary sortas="b-llvm-addr2line">llvm-addr2line</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-ar">
        <term><command>llvm-ar</command></term>
        <listitem>
          <para>
            est le créateur d'archive de <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-ar">
            <primary sortas="b-llvm-ar">llvm-ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-as">
        <term><command>llvm-as</command></term>
        <listitem>
          <para>
            est l'assembleur de <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-as">
            <primary sortas="b-llvm-as">llvm-as</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-bcanalyzer">
        <term><command>llvm-bcanalyzer</command></term>
        <listitem>
          <para>
            est l'analyseur de bytecode <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-bcanalyzer">
            <primary sortas="b-llvm-bcanalyzer">llvm-bcanalyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-bitcode-strip">
        <term><command>llvm-bitcode-strip</command></term>
        <listitem>
          <para>
            supprime le bitcode LLVM d'un objet
          </para>
          <indexterm zone="llvm llvm-bitcode-strip">
            <primary sortas="b-llvm-bitcode-strip">llvm-bitcode-strip</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cat">
        <term><command>llvm-cat</command></term>
        <listitem>
          <para>
            est un outil pour concaténer des modules llvm
          </para>
          <indexterm zone="llvm llvm-cat">
            <primary sortas="b-llvm-cat">llvm-cat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cfi-verify">
        <term><command>llvm-cfi-verify</command></term>
        <listitem>
          <para>
            identifie si les l'intégrité du flot de contrôle protège toutes les
instructions de flot de contrôle indirect dans le fichier objet, DSO ou
binaire fournit
          </para>
          <indexterm zone="llvm llvm-cfi-verify">
            <primary sortas="b-llvm-cfi-verify">llvm-cfi-verify</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-config">
        <term><command>llvm-config</command></term>
        <listitem>
          <para>
            Affiche les options de compilation de <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-config">
            <primary sortas="b-llvm-config">llvm-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cov">
        <term><command>llvm-cov</command></term>
        <listitem>
          <para>
            est utilisé pour émettre des informations de couverture
          </para>
          <indexterm zone="llvm llvm-cov">
            <primary sortas="b-llvm-cov">llvm-cov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-c-test">
        <term><command>llvm-c-test</command></term>
        <listitem>
          <para>
            est un désassembleur de bytecode
          </para>
          <indexterm zone="llvm llvm-c-test">
            <primary sortas="b-llvm-c-test">llvm-c-test</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cvtres">
        <term><command>llvm-cvtres</command></term>
        <listitem>
          <para>
            est un outil pour convertir des fichiers de resource Microsoft en COFF
          </para>
          <indexterm zone="llvm llvm-cvtres">
            <primary sortas="b-llvm-cvtres">llvm-cvtres</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cxxdump">
        <term><command>llvm-cxxdump</command></term>
        <listitem>
          <para>
            est utilisé pour l'afficheur de donnée C++ ABI
          </para>
          <indexterm zone="llvm llvm-cxxdump">
            <primary sortas="b-llvm-cxxdump">llvm-cxxdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cxxfilt">
        <term><command>llvm-cxxfilt</command></term>
        <listitem>
          <para>
            est utilisé pour réassembler les symboles C++ dans le code llvm
          </para>
          <indexterm zone="llvm llvm-cxxfilt">
            <primary sortas="b-llvm-cxxfilt">llvm-cxxfilt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cxxmap">
        <term><command>llvm-cxxmap</command></term>
        <listitem>
          <para>
            est utilisé pour réassembler les symboles C++ mutilés
          </para>
          <indexterm zone="llvm llvm-cxxmap">
            <primary sortas="b-llvm-cxxmap">llvm-cxxmap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-debuginfo-analyzer">
        <term><command>llvm-debuginfo-analyzer</command></term>
        <listitem>
          <para>
            prints a logical representation of low-level debug information
          </para>
          <indexterm zone="llvm llvm-debuginfo-analyzer">
            <primary sortas="b-llvm-debuginfo-analyzer">llvm-debuginfo-analyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-debuginfod">
        <term><command>llvm-debuginfod</command></term>
        <listitem>
          <para>
            est un service qui fournit les informations de débogage sur une API HTTP
pour l'analyse de binaires nettoyés
          </para>
          <indexterm zone="llvm llvm-debuginfod">
            <primary sortas="b-llvm-debuginfod">llvm-debuginfod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-debuginfod-find">
        <term><command>llvm-debuginfod-find</command></term>
        <listitem>
          <para>
            est une interface au démon <command>llvm-debuginfod</command> pour trouver
des artéfact debuginfod
          </para>
          <indexterm zone="llvm llvm-debuginfod-find">
            <primary sortas="b-llvm-debuginfod-find">llvm-debuginfod-find</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-diff">
        <term><command>llvm-diff</command></term>
        <listitem>
          <para>
            est le <command>diff</command> de <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-diff">
            <primary sortas="b-llvm-diff">llvm-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dis">
        <term><command>llvm-dis</command></term>
        <listitem>
          <para>
            est le désassembleur <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-dis">
            <primary sortas="b-llvm-dis">llvm-dis</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dwarfdump">
        <term><command>llvm-dwarfdump</command></term>
        <listitem>
          <para>
            affiche le contenu des sections DWARF dans les fichiers objet
          </para>
          <indexterm zone="llvm llvm-dwarfdump">
            <primary sortas="b-llvm-dwarfdump">llvm-dwarfdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dwarfutil">
        <term><command>llvm-dwarfutil</command></term>
        <listitem>
          <para>
            est un outil pour copier et manipuler des infos de débogage
          </para>
          <indexterm zone="llvm llvm-dwarfutil">
            <primary sortas="b-llvm-dwarfutil">llvm-dwarfutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dwp">
        <term><command>llvm-dwp</command></term>
        <listitem>
          <para>
            fusionne des fichiers DWARF séparés
          </para>
          <indexterm zone="llvm llvm-dwp">
            <primary sortas="b-llvm-dwp">llvm-dwp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-elfabi">
        <term><command>llvm-elfabi</command></term>
        <listitem>
          <para>
            est utilisé pour lire des informations sur l'ABI d'un binaire ELF
          </para>
          <indexterm zone="llvm llvm-elfabi">
            <primary sortas="b-llvm-elfabi">llvm-elfabi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-exegesis">
        <term><command>llvm-exegesis</command></term>
        <listitem>
          <para>
            est un outil de test de performance qui utilise les informations disponibles
dans LLVM pour mesurer les caractéristiques des instructions de la machine
hôte comme la latence ou le décomposition de port
          </para>
          <indexterm zone="llvm llvm-exegesis">
            <primary sortas="b-llvm-exegesis">llvm-exegesis</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-extract">
        <term><command>llvm-extract</command></term>
        <listitem>
          <para>
            est utilisé pour extraire une fonction depuis un module
<application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-extract">
            <primary sortas="b-llvm-extract">llvm-extract</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-gsymutil">
        <term><command>llvm-gsymutil</command></term>
        <listitem>
          <para>
            est utilisé pour traiter des fichiers au format de symbolisme GSYM qui
converti les adresses mémoires en noms de fonction et en numéro de ligne de
fichier. Ces fichiers sont plus petits que les fichiers DWARF et Breakpad
          </para>
          <indexterm zone="llvm llvm-gsymutil">
            <primary sortas="b-llvm-gsymutil">llvm-gsymutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-ifs">
        <term><command>llvm-ifs</command></term>
        <listitem>
          <para>
            est utilisé pour fusionner les interfaces avec les fichiers objets
          </para>
          <indexterm zone="llvm llvm-ifs">
            <primary sortas="b-llvm-ifs">llvm-ifs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-install-name-tool">
        <term><command>llvm-install-name-tool</command></term>
        <listitem>
          <para>
            est utilisé pour réécrire les commandes de chargement vers le format binaire
MachO
          </para>
          <indexterm zone="llvm llvm-install-name-tool">
            <primary sortas="b-llvm-install-name-tool">llvm-install-name-tool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-jitlink">
        <term><command>llvm-jitlink</command></term>
        <listitem>
          <para>
            est utilisé pour analyser des fichiers objet relocalisables pour rendre leur
contenu exécutable dans un processus cible
          </para>
          <indexterm zone="llvm llvm-jitlink">
            <primary sortas="b-llvm-jitlink">llvm-jitlink</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-libtool-darwin">
        <term><command>llvm-libtool-darwin</command></term>
        <listitem>
          <para>
            fournit les fonctions libtool de base sur les systèmes Darwin. C'est surtout
utile si vous générez des binaires pour les systèmes macOS
          </para>
          <indexterm zone="llvm llvm-libtool-darwin">
            <primary sortas="b-llvm-libtool-darwin">llvm-libtool-darwin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-link">
        <term><command>llvm-link</command></term>
        <listitem>
          <para>
            est le linker <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-link">
            <primary sortas="b-llvm-link">llvm-link</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-lipo">
        <term><command>llvm-lipo</command></term>
        <listitem>
          <para>
            est utilisé pour créer des binaires universels à partir de fichiers MachO
          </para>
          <indexterm zone="llvm llvm-lipo">
            <primary sortas="b-llvm-lipo">llvm-lipo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-lto">
        <term><command>llvm-lto</command></term>
        <listitem>
          <para>
            est l'éditeur de lien <application>LLVM</application> LTO (optimisation à
l'édition de lien)
          </para>
          <indexterm zone="llvm llvm-lto">
            <primary sortas="b-llvm-lto">llvm-lto</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-lto2">
        <term><command>llvm-lto2</command></term>
        <listitem>
          <para>
            est un banc de test pour l'interface LTO basée sur la résolution
          </para>
          <indexterm zone="llvm llvm-lto2">
            <primary sortas="b-llvm-lto2">llvm-lto2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-mc">
        <term><command>llvm-mc</command></term>
        <listitem>
          <para>
            est un assembleur / désassembleur de code machine distinct
          </para>
          <indexterm zone="llvm llvm-mc">
            <primary sortas="b-llvm-mc">llvm-mc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-mca">
        <term><command>llvm-mca</command></term>
        <listitem>
          <para>
            est un outil d'analyse de performance pour mesurer statiquement les
performances du code machine
          </para>
          <indexterm zone="llvm llvm-mca">
            <primary sortas="b-llvm-mca">llvm-mca</primary>
          </indexterm>
        </listitem>
      </varlistentry>



      <!--  <varlistentry id="llvm-mcmarkup">

        <term><command>llvm-mcmarkup</command></term>
        <listitem>
          <para>
            is a parser for machine code markup.
          </para>
          <indexterm zone="llvm llvm-mcmarkup">
            <primary sortas="b-llvm-mcmarkup">llvm-mcmarkup</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->
<varlistentry id="llvm-ml">
        <term><command>llvm-ml</command></term>
        <listitem>
          <para>
            est un analyseur pour le balisage de code machine
          </para>
          <indexterm zone="llvm llvm-ml">
            <primary sortas="b-llvm-ml">llvm-ml</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-modextract">
        <term><command>llvm-modextract</command></term>
        <listitem>
          <para>
            est un outil pour extraire un module de fichiers de code binaire
multi-modules
          </para>
          <indexterm zone="llvm llvm-modextract">
            <primary sortas="b-llvm-modextract">llvm-modextract</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-mt">
        <term><command>llvm-mt</command></term>
        <listitem>
          <para>
            est un outil pour générer des fichiers et des catalogues signés à partir
d'un manifeste d'assemblage (utilisé par le SDK de Microsoft)
          </para>
          <indexterm zone="llvm llvm-mt">
            <primary sortas="b-llvm-mt">llvm-mt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-nm">
        <term><command>llvm-nm</command></term>
        <listitem>
          <para>
            est utilisé pour lister les tables de symboles des fichiers objets et
bytecode <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-nm">
            <primary sortas="b-llvm-nm">llvm-nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-objcopy">
        <term><command>llvm-objcopy</command></term>
        <listitem>
          <para>
            est la version de LLVM d'un outil objcopy
          </para>
          <indexterm zone="llvm llvm-objcopy">
            <primary sortas="b-llvm-objcopy">llvm-objcopy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-objdump">
        <term><command>llvm-objdump</command></term>
        <listitem>
          <para>
            est un afficheur de fichiers objets <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-objdump">
            <primary sortas="b-llvm-objdump">llvm-objdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-opt-report">
        <term><command>llvm-opt-report</command></term>
        <listitem>
          <para>
            est un outil pour générer un rapport d'optimisation depuis les fichiers
d'enregistrement d'optimisations YAML
          </para>
          <indexterm zone="llvm llvm-opt-report">
            <primary sortas="b-llvm-opt-report">llvm-opt-report</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-pdbutil">
        <term><command>llvm-pdbutil</command></term>
        <listitem>
          <para>
            est un afficheur de PDB (Program Database). PDB est un format de Microsoft
          </para>
          <indexterm zone="llvm llvm-pdbutil">
            <primary sortas="b-llvm-pdbutil">llvm-pdbutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-profdata">
        <term><command>llvm-profdata</command></term>
        <listitem>
          <para>
            est un petit outil pour manipuler et afficher des fichiers de données de
profil
          </para>
          <indexterm zone="llvm llvm-profdata">
            <primary sortas="b-llvm-profdata">llvm-profdata</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-profgen">
        <term><command>llvm-profgen</command></term>
        <listitem>
          <para>
            génère les informations de profilage SPGO de LLVM
          </para>
          <indexterm zone="llvm llvm-profgen">
            <primary sortas="b-llvm-profgen">llvm-profgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-ranlib">
        <term><command>llvm-ranlib</command></term>
        <listitem>
          <para>
            est utilisé pour générer un index pour une archive
<application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-ranlib">
            <primary sortas="b-llvm-ranlib">llvm-ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-rc">
        <term><command>llvm-rc</command></term>
        <listitem>
          <para>
            est un outil indépendant de la plateforme pour compiler des scripts de
ressources en fichiers de ressources binaires
          </para>
          <indexterm zone="llvm llvm-rc">
            <primary sortas="b-llvm-rc">llvm-rc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-readobj">
        <term><command>llvm-readobj</command></term>
        <listitem>
          <para>
            affiche des informations bas niveau et spécifiques au format à propos de
fichiers objets
          </para>
          <indexterm zone="llvm llvm-readobj">
            <primary sortas="b-llvm-readobj">llvm-readobj</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-reduce">
        <term><command>llvm-reduce</command></term>
        <listitem>
          <para>
            est utilisé pour automatiquement réduire les cas de tests lors du lancement
d'une suite de tests
          </para>
          <indexterm zone="llvm llvm-reduce">
            <primary sortas="b-llvm-reduce">llvm-reduce</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-remark-size-diff">
        <term><command>llvm-remark-size-diff</command></term>
        <listitem>
          <para>
            rapporte les différences en nombre d’instruction et taille de pile entre
deux fichiers remark
          </para>
          <indexterm zone="llvm llvm-remark-size-diff">
            <primary sortas="b-llvm-remark-size-diff">llvm-remark-size-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-remarkutil">
        <term><command>llvm-remarkutil</command></term>
        <listitem>
          <para>
            converts remark files between bitstream and YAML; or prints function
instruction count information in remark files
          </para>
          <indexterm zone="llvm llvm-remark-size-diff">
            <primary sortas="b-llvm-remark-size-diff">llvm-remark-size-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-rtdyld">
        <term><command>llvm-rtdyld</command></term>
        <listitem>
          <para>
            est l'outil MC-JIT <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-rtdyld">
            <primary sortas="b-llvm-rtdyld">llvm-rtdyld</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-size">
        <term><command>llvm-size</command></term>
        <listitem>
          <para>
            est l'afficheur de taille d'objet de <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-size">
            <primary sortas="b-llvm-size">llvm-size</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-split">
        <term><command>llvm-split</command></term>
        <listitem>
          <para>
            est le séparateur de module de <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-split">
            <primary sortas="b-llvm-split">llvm-split</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-stress">
        <term><command>llvm-stress</command></term>
        <listitem>
          <para>
            est utilisé pour générer des fichier <filename
class="extension">.ll</filename> aléatoires
          </para>
          <indexterm zone="llvm llvm-stress">
            <primary sortas="b-llvm-stress">llvm-stress</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-strings">
        <term><command>llvm-strings</command></term>
        <listitem>
          <para>
            affiche les chaînes contenues dans un binaire (fichier objet, exécutable ou
bibliothèque archivée)
          </para>
          <indexterm zone="llvm llvm-strings">
            <primary sortas="b-llvm-strings">llvm-strings</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-symbolizer">
        <term><command>llvm-symbolizer</command></term>
        <listitem>
          <para>
            convertit des adresses en emplacements dans le code source
          </para>
          <indexterm zone="llvm llvm-symbolizer">
            <primary sortas="b-llvm-symbolizer">llvm-symbolizer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-tblgen">
        <term><command>llvm-tblgen</command></term>
        <listitem>
          <para>
            est le générateur de code C++ depuis la description de la cible de
<application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-tblgen">
            <primary sortas="b-llvm-tblgen">llvm-tblgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-tli-checker">
        <term><command>llvm-tli-checker</command></term>
        <listitem>
          <para>
            est le vérificateur TargetLibraryInfo contre SDK de
<application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-tli-checker">
            <primary sortas="b-llvm-tli-checker">llvm-tli-checker</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-undname">
        <term><command>llvm-undname</command></term>
        <listitem>
          <para>
            est un outil pour recomposer les noms
          </para>
          <indexterm zone="llvm llvm-undname">
            <primary sortas="b-llvm-undname">llvm-undname</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-xray">
        <term><command>llvm-xray</command></term>
        <listitem>
          <para>
            est une implémentation du système de traçage des appels de fonction XRay de
Google
          </para>
          <indexterm zone="llvm llvm-xray">
            <primary sortas="b-llvm-xray">llvm-xray</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvptx-arch">
        <term><command>nvptx-arch</command></term>
        <listitem>
          <para>
            lists NVIDIA GPUs installed; at runtime it needs <filename
class='libraryfile'>libcuda.so</filename> which is not a part of BLFS
          </para>
          <indexterm zone="llvm nvptx-arch">
            <primary sortas="b-nvptx-arch">nvptx-arch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="opt">
        <term><command>opt</command></term>
        <listitem>
          <para>
            est l'optimiseur <application>LLVM</application>
          </para>
          <indexterm zone="llvm opt">
            <primary sortas="b-opt">opt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sancov">
        <term><command>sancov</command></term>
        <listitem>
          <para>
            est l'outil de traitement de la couverture du simplificateur
          </para>
          <indexterm zone="llvm sancov">
            <primary sortas="b-sancov">sancov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sanstats">
        <term><command>sanstats</command></term>
        <listitem>
          <para>
            est l'outil de traitement de la couverture du simplificateur
          </para>
          <indexterm zone="llvm sanstats">
            <primary sortas="b-sanstats">sanstats</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scan-build">
        <term><command>scan-build</command></term>
        <listitem>
          <para>
            est un script <application>Perl</application> qui invoque l'analyseur
statique <application>Clang</application>
          </para>
          <indexterm zone="llvm scan-build">
            <primary sortas="b-scan-build">scan-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scan-build-py">
        <term><command>scan-build-py</command></term>
        <listitem>
          <para>
            est un script <application>Python</application> qui invoque l'analyseur
statique de <application>Clang</application>
          </para>
          <indexterm zone="llvm scan-build-py">
            <primary sortas="b-scan-build-py">scan-build-py</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scan-view">
        <term><command>scan-view</command></term>
        <listitem>
          <para>
            est une visonneuse de résultats d'analyse statique de
<application>Clang</application>
          </para>
          <indexterm zone="llvm scan-view">
            <primary sortas="b-scan-view">scan-view</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="split-file">
        <term><command>split-file</command></term>
        <listitem>
          <para>
            sépare un fichier d'entrée en plusieurs parties séparées par des expressions
régulières
          </para>
          <indexterm zone="llvm split-file">
            <primary sortas="b-split-file">split-file</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="verify-uselistorder">
        <term><command>verify-uselistorder</command></term>
        <listitem>
          <para>
            est l'outil de <application>LLVM</application> pour vérifier l'ordre
d'utilisation des listes
          </para>
          <indexterm zone="llvm verify-uselistorder">
            <primary sortas="b-verify-uselistorder">verify-uselistorder</primary>
          </indexterm>
        </listitem>
      </varlistentry>

<!-- Removed in 12.0.0
      <varlistentry id="yaml2obj">

        <term><command>yaml2obj</command></term>
        <listitem>
          <para>
            takes a YAML representation of an object file and converts it
            to a binary file
          </para>
          <indexterm zone="llvm yaml2obj">
            <primary sortas="b-yaml2obj">yaml2obj</primary>
          </indexterm>
        </listitem>
      </varlistentry>
-->
<!--
      <varlistentry id="libllvm">

        <term><filename class="libraryfile">libLLVM-&llvm-version;.so</filename></term>
        <listitem>
          <para>
            contains the <application>LLVM</application> API functions.
          </para>
          <indexterm zone="llvm libllvm">
            <primary sortas="c-libllvm">libLLVM-&llvm-version;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libprofile_rt">
        <term><filename class="libraryfile">libprofile_rt.so</filename></term>
        <listitem>
          <para>
            is the C, C++ and Objective-C runtime library for
            <application>Clang</application>.
          </para>
          <indexterm zone="llvm libprofile_rt">
            <primary sortas="c-libprofile_rt">libprofile_rt.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->



    </variablelist>

  </sect2>

</sect1>
