<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

<!-- Maintainer: before making the tarball, remove all .debuginfo files from
    the directory: this saves more than 70 MB. -->
  <!ENTITY anduin-download             "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;">
  <!ENTITY openjdk-download-binary-x86 "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;/OpenJDK-&openjdk-version;+&openjdk-build;-i686-bin.tar.xz">
  <!ENTITY openjdk-bin-md5sum-x86      "063ba63745bd69c1946a0d1c5d516469">
  <!ENTITY openjdk-bin-size-x86        "153&nbsp;Mo">
  <!ENTITY openjdk-bin-buildsize-x86   "293&nbsp;Mo">

<!-- Not uploaded to anduin, since this file is now available under GNU GPLv2
     licence.-->
<!-- Reuploaded to anduin due to the complexity of the download URL, per Bruce's
     request. - Doug -->
  <!ENTITY openjdk-download-binary-x64 "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;/OpenJDK-&openjdk-version;+&openjdk-build;-x86_64-bin.tar.xz">
  <!ENTITY openjdk-bin-md5sum-x64      "579344d9a426f452539bbd21429549d8">
  <!ENTITY openjdk-bin-size-x64        "159&nbsp;Mo">
  <!ENTITY openjdk-bin-buildsize-x64   "317&nbsp;Mo">
]>

<sect1 id="java" xreflabel="Java-&openjdk-version;">
  <?dbhtml filename="java.html"?>

  <sect1info>
<date>$Date$</date></sect1info>

  <title>Java-&openjdk-version;</title>

  <indexterm zone="java">
    <primary sortas="a-java">Binaire JDK</primary>
  </indexterm>


  <sect2>
    <title>À propos de Java</title>
    <para>
      Java is different from most of the packages in LFS and BLFS. It is a
programming language that works with files of bytecode to obtain
instructions and executes them in a Java Virtual Machine (JVM). An
introductory java program looks like:
    </para>

<screen><literal>public class HelloWorld
{
    public static void main(String[] args)
    {
        System.out.println("Hello, World");
    }
}</literal></screen>

    <para>
      Ce programme est enregistré en tant que
<filename>HelloWorld.java</filename>. Le nom du fichier,
<emphasis>HelloWorld</emphasis>, doit correspondre au nom de la classe. Il
est ensuite convertit en code binaire avec <command>javac
HelloWorld.java</command>. Le fichier de sortie est
<filename>HelloWorld.class</filename>. Le programme est exécuté avec
<command>java HelloWorld</command>. Cela crée une JVM et lance le
code. L'extension «&nbsp;class&nbsp;» ne doit pas être spécifiée.
    </para>

    <para>
      Plusieurs fichiers class peuvent être combiné en un seul fichier avec la
commande <command>jar</command>. C'est similaire à la commande standard
<command>tar</command>. Par exemple, la commande <command>jar cf myjar.jar
*.class</command> combinera tous les fichiers de classes d'un répertoire
dans un seul fichier. Ce qui fait des fichiers de bibliothèque.
    </para>

    <para>
      La JVM peut chercher et utiliser les classes des fichiers jar
automatiquement. Il utilise la variable d'environnement
<envar>CLASSPATH</envar> pour chercher les fichiers jar.  C'est une liste
standard de noms de répertoires séparés par des deux-points comme la
variable d'environnement <envar>PATH</envar>.
    </para>

  </sect2>

  <sect2 id="java-bin" xreflabel="Binaire Java" role="package">
    <title>Information sur le binaire JDK</title>

    <para>
      La création d'une JVM depuis les sources demande un ensemble de dépendances
circulaires. La première chose nécessaire est un ensemble de programmes
appelé Java Development Kit (JDK). Cet ensemble de programmes inclus
<command>java</command>, <command>javac</command>, <command>jar</command>,
et plusieurs autres. Il inclut également plusieurs fichiers
<emphasis>jar</emphasis> de base.
    </para>

    <para>
      Pour commencer, nous initialisons une installation binaire de JDK créée par
les auteurs de BLFS. Elle est installée dans le répertoire
<filename>/opt</filename> pour permettre plusieurs installations, en
incluant une version basée sur les sources.
    </para>

    &lfs111_checked;

    <bridgehead renderas="sect3">Information sur le paquet du binaire</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement du binaire (x86)&nbsp;: <ulink
url="&openjdk-download-binary-x86;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5 du téléchargement&nbsp;: &openjdk-bin-md5sum-x86;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement (binaire)&nbsp;: &openjdk-bin-size-x86;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &openjdk-bin-buildsize-x86;
        </para>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement du binaire (x86_64)&nbsp;: <ulink
url="&openjdk-download-binary-x64;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5 du téléchargement&nbsp;: &openjdk-bin-md5sum-x64;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement (binaire)&nbsp;: &openjdk-bin-size-x64;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &openjdk-bin-buildsize-x64;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dépendances de Java Binary Runtime</bridgehead>
    <para role="required">
      <xref role="runtime" linkend="alsa-lib"/>, <xref role="runtime"
linkend="cups"/>, <xref role="runtime" linkend="giflib"/> et <xref
role="runtime" linkend="xorg7-lib"/>
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Installation de the Java BinaryJDK </title>

    <note>
      <para>
        L'archive
<emphasis>openjdk-&openjdk-version;_linux-x64_bin.tar.gz</emphasis>
s'extraira dans le répertoire <emphasis>jdk-&openjdk-version;</emphasis>.
      </para>
    </note>

    <para>
      Commencez par extraire l'archive du binaire approprié pour votre
architecture et allez dans le répertoire extrait. Installez le binaire
<application>OpenJDK</application> avec les commandes suivantes en tant
qu'utilisateur <systemitem class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>install -vdm755 /opt/OpenJDK-&openjdk-version;-bin &amp;&amp;
mv -v * /opt/OpenJDK-&openjdk-version;-bin         &amp;&amp;
chown -R root:root /opt/OpenJDK-&openjdk-version;-bin</userinput></screen>

    <para>
      La version binaire est maintenant installée. Vous pouvez créer un lien
symbolique vers cette version en tapant, en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>ln -sfn OpenJDK-&openjdk-version;-bin /opt/jdk</userinput></screen>

    <para>
      Vous pouvez maintenant construire <xref linkend="ojdk-conf"/>, où les
instructions considèrent que le lien précédent existe.
    </para>

  </sect2>

</sect1>
