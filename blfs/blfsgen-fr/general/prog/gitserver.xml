<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
  <!ENTITY gitgid "58">
  <!ENTITY gituid "58">
]>

<sect1 id="gitserver" xreflabel="Lancer un serveur Git">
  <?dbhtml filename="gitserver.html"?>

  <sect1info>
<date>$Date$</date></sect1info>

  <title>Lancer un serveur Git</title>

  <sect2 role="package">
    <title>Introduction</title>

    <para>
      Cette section décrit comment mettre en place, administrer et sécuriser un
serveur <application>git</application>. <application>Git</application> a de
nombreuses options disponibles. Pour la documentation détaillée voir <ulink
url="https://git-scm.com/book/en/v2"/>.
    </para>

    <bridgehead renderas="sect3">Dépendances de Server</bridgehead>

    <bridgehead renderas="sect4">Requises</bridgehead>
    <para role="required">
      <xref linkend="git"/> et <xref linkend="openssh"/>
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Paramétrer un serveur Git</title>

    <para>
      Les instructions suivantes installeront un serveur
<application>git</application>. Il sera paramétré pour utiliser
<application>OpenSSH</application> comme méthode d'accès à distance
sécurisée.
    </para>

    <para>
      La configuration du serveur comporte les étapes suivantes&nbsp;:
    </para>

    <sect3>
      <title>1. Mise en place des utilisateurs, des groupes et des permissions</title>

      <para>
        Vous devrez être utilisateur <systemitem class='username'>root</systemitem>
pour la première partie de la configuration. Créez l'utilisateur et le
groupe <systemitem class="username">git</systemitem> et indiquez un hash de
mot de passe inutilisable avec les commandes suivantes&nbsp;:
      </para>

<screen role="root"><userinput>groupadd -g &gitgid; git &amp;&amp;
useradd -c "git Owner" -d /home/git -m -g git -s /usr/bin/git-shell -u &gituid; git &amp;&amp;
sed -i '/^git:/s/^git:[^:]:/git:NP:/' /etc/shadow</userinput></screen>

      <para>
        Enregistrer un hash de mot de passe inutilisable (en remplaçant le
<literal>!</literal> par <literal>NP</literal>) déverrouille le compte mais
empêche de l'utiliser avec un mot de passe. Cela est requis par
<application>sshd</application> pour fonctionner correctement. Ensuite,
créez certains fichiers et répertoires dans le répertoire personnel de
l'utilisateur git qui permettent de donner accès aux dépôts git avec des
clés ssh.
      </para>

<screen role="root"><userinput>install -o git -g git -dm0700 /home/git/.ssh &amp;&amp;
install -o git -g git -m0600 /dev/null /home/git/.ssh/authorized_keys</userinput></screen>

      <para>
        Pour les développeurs qui doivent accéder au dépôt, ajoutez sa clé publique
ssh à <filename>/home/git/.ssh/authorized_keys</filename>. Commencez par
ajouter certaines options pour éviter que les utilisateurs ne puissent
utiliser la connexion à git pour rediriger des ports vers d'autres machines
que le serveur git peut atteindre.
      </para>

<screen role="nodump"><userinput>echo -n "no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty " >> /home/git/.ssh/authorized_keys &amp;&amp;
cat &lt;user-ssh-key&gt; &gt;&gt; /home/git/.ssh/authorized_keys</userinput></screen>

      <para>
        C'est aussi utile d'indiquer le nom par défaut de la branche initiale d'un
nouveau dépôt en modifiant la configuration git. En tant qu'utilisateur
<systemitem class='username'>root</systemitem>, lancez&nbsp;:
      </para>

<screen role="nodump"><userinput>git config --system init.defaultBranch trunk</userinput></screen>

      <para>
        Enfin, ajoutez l'entrée <filename>/usr/bin/git-shell</filename> au fichier
de configuration <filename>/etc/shells</filename>. Ce shell a été indiqué
dans le profil utilisateur de <systemitem class='username'>git</systemitem>
et s'assure que seules les actions liées à git peuvent être exécutées&nbsp;:
      </para>

<screen role="root"><userinput>echo "/usr/bin/git-shell" &gt;&gt; /etc/shells</userinput></screen>

    </sect3>

    <sect3>
      <title>2. Créer un dépôt git</title>

      <para>
        Le dépôt peut être n'importe où sur le système de fichiers. Il est important
que l'utilisateur git puisse lire et écrire à cet emplacement. Nous
utilisons <filename class="directory">/srv/git</filename> comme répertoire
de base. Créez un nouveau dépôt <application>git</application> avec les
commandes suivante (en tant qu'utilisateur <systemitem
class="username">root</systemitem>)&nbsp;:
      </para>

      <note>
        <para>
          Dans les instructions ci-dessous, nous utilisons
<emphasis>project1</emphasis> comme nom de dépôt. Vous devriez nommer votre
dépôt en fonction des détails de votre projet.
        </para>
      </note>

<screen role="root"><userinput>install -o git -g git -m755 -d /srv/git/project1.git &amp;&amp;
cd /srv/git/project1.git                             &amp;&amp;
git init --bare                                      &amp;&amp;
chown -R git:git .</userinput></screen>

    </sect3>

    <sect3>
      <title>3. Remplissez le dépôt à partir du système client</title>

      <note>
        <para>
          Toutes les instructions de cette section et de la suivante devraient être
lancées sur un système utilisateur, pas sur le système serveur.
        </para>
      </note>

      <para>
        Maintenant que le dépôt est créé, il peut être utilisé par les développeurs
pour y mettre des fichiers. Une fois les clés ssh des utilisateurs importées
dans le fichier <filename>authorized_keys</filename> de git, on peut
interagir avec le dépôt.
      </para>

      <para>
        Une configuration minimale devrait être disponible sur le système du
développeur pour spécifier son nom d'utilisateur et l'adresse de
courriel. Créez ce fichier de configuration minimal côté client&nbsp;:
      </para>

<screen role="nodump"><userinput>cat &gt; ~/.gitconfig &lt;&lt;EOF
[user]
        name = &lt;users-name&gt;
        email = &lt;users-email-address&gt;
EOF</userinput></screen>

      <para>
        Sur la machine du développeur, configurez certains fichiers à pousser vers
le dépôt comme contenu initial&nbsp;:
      </para>

      <note>
        <para>
          Le terme <emphasis>gitserver</emphasis> utilisé ci-dessous devrait être le
nom d'hôte (ou l'adresse IP) du serveur git.
        </para>
      </note>

<screen role="nodump"><userinput>mkdir myproject
cd myproject
git init --initial-branch=trunk
git remote add origin git@gitserver:/srv/git/project1.git
cat &gt;README &lt;&lt;EOF
This is the README file
EOF
git add README
git commit -m 'Initial creation of README'
git push --set-upstream origin trunk</userinput></screen>

      <para>Le contenu initial est maintenant poussé sur le serveur et est disponible
pour les autres utilisateurs. Sur la machine actuelle, l'argument
<literal>--set-upstream origin trunk</literal> n'est maintenant plus requis
car le dépôt local est maintenant connecté au dépôt distant. Les poussages
suivants peuvent se faire avec
      </para>

<screen role="nodump"><userinput>git push</userinput></screen>

      <para>
        Les autres développeurs peuvent maintenant cloner le dépôt et faire des
modifications sur le contenu (tant que leurs clés ssh ont été
installées)&nbsp;:
      </para>

<screen role="nodump"><userinput>git clone git@gitserver:/srv/git/project1.git
cd project1
vi README
git commit -am 'Fix for README file'
git push</userinput></screen>

      <note>
        <para>
          C'est une configuration du serveur très basique basée sur l'accès
<application>OpenSSH</application>. Tous les développeurs utilisent
l'utilisateur <systemitem class="username">git</systemitem> pour effectuer
les actions sur le dépôt et les changements commités par les utilisateurs se
distinguent par le nom d'utilisateur local (voir
<filename>~/.gitconfig</filename>) enregistré dans les changements.
        </para>
      </note>

      <para>
        L'accès est restreint aux clés publique ajoutées dans le fichier
<filename>authorized_keys</filename> de git et il n'y a pas de possibilité
pour l'export / clonage public du dépôt. Pour cela, continuez à l'étape 4
pour configurer le serveur git pour l'accès public en lecture seule.
      </para>

      <para>
        Dans l'URL utilisée pour cloner le projet, le chemin absolu (ici
<filename>/srv/git/project1.git</filename>) a été spécifié car le dépôt
n'est pas dans le répertoire personnel de git mais dans <filename
class="directory">/srv/git</filename>. Pour ne pas avoir à exposer la
structure de l'installation du serveur, vous pouvez ajouter un lien
symbolique dans le répertoire personnel de git pour chaque projet, comme
ceci&nbsp;:
      </para>
<screen role="nodump"><userinput>ln -svf /srv/git/project1.git /home/git/</userinput></screen>

      <para>
        Maintenant, le dépôt peut être cloné avec
      </para>
<screen role="nodump"><userinput>git clone git@gitserver:project1.git</userinput></screen>

    </sect3>

    <sect3 id="gitserver-init">
      <title>4. Configurer le serveur</title>

      <para>
        La configuration décrite plus haut rend le dépôt disponible pour les
utilisateurs authentifiés (en fournissant la clé ssh publique). Il y a aussi
un moyen simple de publier le dépôt pour des utilisateurs non authentifiés
&mdash; évidemment sans l'accès en écriture.
      </para>

      <para>
        La combinaison de l'accès via ssh (pour les utilisateurs authentifiés) et
l'export des dépôt pour les utilisateurs non authentifiés via le démon est
en général suffisant pour un site de développement.
      </para>

      <note>
        <para>
          Le démon sera atteignable sur le port <literal>9418</literal> par
défaut. Assurez-vous que votre pare-feu permet l'accès à ce port.
        </para>
      </note>

      <para revision="sysv">
        Pour démarrer le serveur au démarrage, installez le script de démarrage
inclus dans le paquet <xref linkend="bootscripts"/>&nbsp;:
      </para>

      <indexterm zone="gitserver gitserver-init" revision="sysv">
        <primary sortas="f-git">git</primary>
      </indexterm>

<screen role="root" revision="sysv"><userinput>make install-git-daemon</userinput></screen>

      <para revision="systemd">
        Pour démarrer le serveur au démarrage, installez l'unité
<filename>git-daemon.service</filename> du paquet <xref
linkend="systemd-units"/>&nbsp;:
      </para>

      <indexterm zone="gitserver gitserver-init" revision="systemd">
        <primary sortas="f-gitserve">gitserve</primary>
      </indexterm>

<screen role="root" revision="systemd"><userinput>make install-git-daemon</userinput></screen>

      <para>
        Pour permettre à <application>git</application> d'exporter un dépôt, un
fichier nommé <filename>git-daemon-export-ok</filename> est requis dans
chaque répertoire de dépôt sur le serveur. Le fichier n'a pas besoin de
contenu, son existence suffit à activer et son absence à désactiver l'export
du dépôt.
      </para>

<screen role="root"><userinput>touch /srv/git/project1.git/git-daemon-export-ok</userinput></screen>

      <para revision="sysv">
        Le script pour démarrer le démon git utiliser des valeurs par défaut en
interne. Le plus important est le chemin vers le dépôt qui est mis à
<filename class="directory">/srv/git</filename>. Dans le cas où vous avez
créé le dépôt dans un autre répertoire, vous devrez le dire au script de
démarrage. Cela se fait en créant un fichier de configuration nommé
<filename>/etc/sysconfig/git-daemon</filename>. Ce fichier de configuration
sera importé s'il existe, ce qui veut dire qu'il est facultatif. Le fichier
peut ressembler à&nbsp;:</para>
<screen revision="sysv">
# Début de /etc/sysconfig/git-daemon

# Spécifie l'emplacement du dépôt git
GIT_BASE_DIR="/srv/git/"

# Répertoires ajoutés à la liste blanche
DFT_REPO_DIR="$GIT_BASE_DIR"

# Ajoute des options supplémentaires qui seront ajoutées à la commande
# 'git daemon' exécutée dans le script de démarrage
GIT_DAEMON_OPTS=""

# Fin de /etc/sysconfig/git-daemon
</screen>
      <para revision="systemd">
        En plus de l'unité <filename>git-daemon.service</filename>, un fichier de
configuration nommé <filename>/etc/default/git-daemon</filename> a été
installé. Voyez ce fichier de configuration et faite-le correspondre à vos
besoins.
      </para>

      <para>
        Il n'y a que trois options à indiquer dans le fichier de
configuration&nbsp;:
        <itemizedlist>
          <listitem>
            <para>
              GIT_BASE_DIR=&lt;dirname&gt;
            </para>
            <para>Spécifiez l'emplacement des dépôts git. Les chemins relatifs utilisés pour
accéder au démon seront traduits par rapport à ce répertoire.
            </para>
          </listitem>
          <listitem>
            <para>
              DFT_REPO_DIR=&lt;dirname&gt;
            </para>
            <para>Ce répertoire est ajouté à la liste blanche des répertoires autorisés. Cette
variable peut contenir plusieurs noms de répertoires mais elle est
habituellement égale à <literal>GIT_BASE_DIR</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              GIT_DAEMON_OPTS=&lt;options&gt;
            </para>
            <para>
              Au cas où vous ayez besoin d'options spéciales pour la commande <command>git
daemon</command>, vous pouvez les spécifier dans ce paramètre. Un exemple
peut être pour ajuster le numéro de port sur lequel le démon écoute. Dans ce
cas, ajoutez <literal>--port=&lt;port number&gt;</literal> à cette
variable. Pour plus d'information sur les options à indiquer, voyez la
sortie de <command>git daemon --help</command>.
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        Après avoir démarré le démon, les utilisateurs non authentifiés peuvent
cloner les dépôts exportés en utilisant
      </para>
<screen role="nodump"><userinput>git clone git://gitserver/project1.git</userinput></screen>

      <para>
        Comme le répertoire de bsae est <filename
class="directory">/srv/git</filename> par défaut (ou une valeur
personnalisée dans la configuration), <application>git</application>
interprète les chemins (/project1.git) relativement au répertoire de base,
si bien que c'est le dépôt dans <filename
class="directory">/srv/git/project1.git</filename> qui est servi.
      </para>

    </sect3>

  </sect2>

</sect1>
