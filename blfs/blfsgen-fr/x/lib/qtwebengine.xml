<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY qtwebengine-major "5.15">
<!-- URL if there is a public release
  <!ENTITY qtwebengine-download-http "https://download.qt.io/archive/qt/&qtwebengine-major;/&qtwebengine-version;/submodules/qtwebengine-everywhere-src-&qtwebengine-version;.tar.xz">
     URL for a prepared git version -->
  <!ENTITY qtwebengine-download-http "&sources-anduin-http;/qtwebengine/qtwebengine-&qtwebengine-version;.tar.xz">
  <!ENTITY qtwebengine-download-ftp  "">
  <!ENTITY qtwebengine-md5sum        "9c2009c073c4d13f5ed5cc89b8f1e2df">
  <!ENTITY qtwebengine-size          "307&nbsp;Mo">
  <!ENTITY qtwebengine-buildsize     "5,1&nbsp;Go (153&nbsp;Mo installés)">
  <!ENTITY qtwebengine-time          "75&nbsp;SBU (sur une machine rapide, avec parallélisme = 4)">
]>

<sect1 id="qtwebengine" xreflabel="qtwebengine-&qtwebengine-version;">
  <?dbhtml filename="qtwebengine.html"?>


  <title>QtWebEngine-&qtwebengine-version;</title>

  <indexterm zone="qtwebengine">
    <primary sortas="a-qtwebengine">qtwebengine</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à QtWebEngine</title>

    <para>
      <application>QtWebEngine</application> intègre les composantes web de
<application>chromium</application> dans Qt. Il contient sa propre copie de
ninja qu'il utilise lors de la construction s'il ne peut pas trouver une
copie sur le système, et diverses copies de bibliothèques de ffmpeg, icu,
libvpx et zlib (dont libminizip) qui ont été forkées par les développeurs de
<application>chromium</application>.
    </para>

    <para>
      Ce paquet et les navigateurs qui l'utilisent peuvent être utiles si vous
utilisez un site conçu pour google chrome, ou chromium.
    </para>

    <important>
      <para>
        Qt-5.15 reaches End Of Life on 26 May 2023. Extended lifetime Qt5.15 LTS has
been extended until 26th May 2025 for those with subscription licenses.
Because qtwebengine uses chromium code under the LGPL, it is not yet clear
if there will be any more backported CVE fixes for QtWebEngine after the
5.15.14 release (the Extended Lifetime fixes might only be in response to
specific issues raised by subscribers).
      </para>
    </important>

    <warning>
      <para>
        QtWebEngine utilise une copie forkée de chromium, et est donc vulnérable à
plusieurs problèmes qui y ont été trouvés. Les développeurs de Qt ont
toujours préféré publier en même temps que le reste de Qt (plutôt que
d'ajouter des corrections en urgence), mais les versions stables sont
publiée après la version de développement actuelle. Maintenant qu'ils se
préparent à passer à Qt6, les version 5.15.3 et les versions suivantes de
Qt-5.15 ne sont initialement disponibles que pour leurs clients. QtWebEngine
est un peu une exception avec sa licence LGPL, mais récupérer les sources
git (avec le sous-module chromium forké) et l'amener à un point où il est
possible de le compiler sur un système BLFS récent peut demander beaucoup
d'effort et les mises à jour du livre peuvent être retardées.
      </para>

      <para>
        Il semble que les futures versions de la série 5.15 seront aussi publiées
bien après que les vulnérabilités de chromium ne soient connues, mais les
corrections de QtWebEngine se trouvent dans le dépôt git et les rédacteurs
pensent que les vulnérabilités connues des navigateurs devraient être
corrigées.
      </para>

      <para> 
        <!-- for git versions -->
L'archive proposée ci-dessous a été créée à partir de la branche git 5.15 et
la branche 87 du sous-module chromium (qui est une version forkée de
chromium). Voir le fichier GIT-VERSIONS dans l'archive pour des détails sur
les derniers commits.
      </para>
    </warning>

    

    <!-- note for editors on obtaining webengine from git.
      First (if you do not already have a past version)
      git clone git://code.qt.io/qt/qtwebengine.git
      git submodule init -
       that will report qtwebengine-chromium.git registered for src/3rdparty
       now find the main branch names:
      git fetch origin
      git branch -r
       after a release is prepared (even if the rest is not public), the 5.15
       branch now seems to get updated and might be what you want. But in the
       approach to 5.15.6 the backported CVE and other security fixes were only
       applied to 5.15.6.  So, assuming that a 5.15.7 branch now exists,
      git checkout origin/5.15.7
       Confirm that HEAD is where you expected.
       Now go to src/3rdparty
      git fetch origin
      git branch -r
       The required branch is likely to be 87-branch unless there is a newer one
      mentioned in the 5.15 cgit web page (below).
      git checkout origin/87-branch (or whatever)
       Use git log or git tk to look at its HEAD and check it seems appropriate.
       If this doesn't work, use 'git submodule update'

      To decide when it might be worth creating a new tarball, periodically keep
      an eye on https://code.qt.io/cgit/qt/qtwebengine.git/ (currently, the 5.15.6
      branch, 5.15.7 might get used later). The interesting items are CVE fixes
      for known chromium vulnerabilities, as well as numbered Security bugs -
      again, these relate to chromium.

      When I noticed some updates in late March I was searching for one of the
      CVEs mentioned, and google found a link to a review page for Michael Brüning
      at https://codereview.qt.nokia.com/q/owner:michael.bruning%2540qt.io. At that
      time I could see various unmerged items, so I waited. The items for the
      90-based chromium module are not relevant to 5.15-series (possibly they will
      be for qtwebengine-6+). Review queues for other Qt employees might be found
      in a similar way, but remember that everythng EXCEPT qtwebengine and chromium
      is private to Qt until they choose to release it.

      NOTE: the 3rdparty/chromium tree may contain more patches than have been
      merged into the current 5.15.x branch. Any patches after what was in the
      last 'update chromium' merge in qtwebengine occasionally break the build.

      After merging the contents of the qtwebengine and src/3rdparty git extracts,
      in the top level please create a GIT-VERSIONS file summarising the HEAD
      commits of both parts, as a reminder of where we are up to. I've nove added
      a CVE-fixes to keep track of what has been fixed (comits before 5.15.2 did not
      mention the CVEs until they were detailed in a release).

      Now create tarballs - 'git archive' does not work across submodule boundaries,
      so you need to create one archive from the top of qtwebengine/ and another
      from the top of src/3rdparty (chromium, gn, ninja are apparently all part of
      the qtwebengine-chromium module).  Then in a work area untar the qtwebengine
      tarball, go down to src/3rdparty and untar the submodule tarball.
      Decide on what to call the result and create a full xz tarball using tar -cJf.

      NOTE: To use git archive, use something like this:
      git archive - -format tar.gz - -output qtwebengine.tar.gz HEAD
      git archive - -format tar.gz - -output chromium.tar.gz HEAD

      UPDATE: Since we have to host the tarball, and it is over 300MB, it makes
      sense to create a patch for subsequent fixes (for the first version, 314KB
      including the updates to the GIT-VERSIONS file).  For future updates, view
      the current updates patch to see the previous commits. When the new commits
      have been applied, rename the updated version to 'b', but untar the
      unpatched tarball as 'a' and then diff a to b in the usual manner to get
      all updates since the tarball was created.

      For our own releases, probably best to create a fresh tarball.

         end of note for editors -->
&lfs113_checked;

    <warning>
      <para>
        Par défaut, ninja utilisera tous les CPU actifs + 2 (si au moins 4
existent), même s'ils ne sont pas disponibles pour la tâche actuelle parce
que le terminal a été restreint avec «&nbsp;taskset&nbsp;». Dans BLFS, ce
paquet prend plus de temps à construire que n'importe quel autre. Une fois,
la construction de ce paquet a échoué à environ 90 pourcent à cause d'un
problème de mémoire sur un système à 24 cœurs et 32 Go de mémoire.
      </para>

      <para>
        Pour contourner cela, voir les explications des commandes ci-dessous.
      </para>
    </warning>

    <note>
      <para>
        Si vous mettez à jour et avez installé une nouvelle version de <xref
linkend='icu'/> depuis la dernière installation de <xref linkend='qt5'/>,
vous devrez réinstaller Qt5 avant la mise à jour, sinon la liaison finale de
ce paquet échouera avec un avertissement indiquant que la version des
bibliothèques icu requises par libQt5Core.so peuvent entrer en conflit avec
la version utilisée par ce paquet.
      </para>

      <para>
        De manière inhabituelle, le système de construction GN intégré (utilisé pour
créer les fichiers Ninja) a besoin d'une version statique de <filename
class="libraryfile">libstdc++.a</filename> bien que les bibliothèque
installées utilisent bien la version partagée. Si cette bibliothèque
statique n'est pas présente, la construction échouera rapidement. Remarquez
que si vous essayez de construire webengine en tant que partie de
<application>Qt</application> et que la bibliothèque statique n'est pas
disponible, cette construction terminera sans installer webengine ou
échouera pendant l'installation (les deux comportements ont été observés en
5.12.0).
      </para>
    </note>

    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement (HTTP)&nbsp;: <ulink url="&qtwebengine-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Téléchargement (FTP)&nbsp;: <ulink url="&qtwebengine-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5&nbsp;: &qtwebengine-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &qtwebengine-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &qtwebengine-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction&nbsp;: &qtwebengine-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Téléchargements supplémentaires</bridgehead>
    <itemizedlist spacing="compact">
  
      <!--<listitem>

        <para>
          Required patch:
          <!\-\- keep links for releases and git versions as a reminder
               that the tarball names names differ
          <ulink url="&patch-root;/qtwebengine-everywhere-src-&qtwebengine-version;-ICU68-2.patch"/> \-\->

          <ulink url="&patch-root;/qtwebengine-&qtwebengine-version;-5.15.7-1.patch"/>
        </para>
      </listitem>-->
<listitem>
        <para>
          Correctif requis&nbsp;: <ulink
url="&patch-root;/qtwebengine-&qtwebengine-version;-build_fixes-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Correctif requis&nbsp;: <ulink
url="&patch-root;/qtwebengine-&qtwebengine-version;-ffmpeg5_fixes-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Correctif requis&nbsp;: <ulink
url="&patch-root;/qtwebengine-&qtwebengine-version;-icu_73-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dépendances de qtwebengine</bridgehead>

    <bridgehead renderas="sect4">Requises</bridgehead>
      
    <!-- the qmake output tends to be misleading. 'khr' is from Mesa -->
<para role="required">
      <!--  <xref linkend="python2"/>
, and -->
<xref linkend="nodejs"/>, <xref linkend="nss"/>, <xref linkend="pciutils"/>
et <xref linkend='qt5'/>
    </para>

    <bridgehead renderas="sect4">Recommandées</bridgehead>
    <note>
      <para>
        Si ces paquets ne sont pas installés, le processus de construction compilera
et installera ses propres (sans doute plus vieilles) versions, avec pour
effet d'augmenter l'espace disque utilisé et le temps pris par la
construction et l'installation.
      </para>
    </note>

    <para role="recommended">
      <!-- awkward wording - libxslt needs libxml2, if libxml2 is built
           before icu then the *shipped* icu will be used -->
soit <xref linkend="alsa-lib"/> soit <xref linkend="pulseaudio"/> (ou les
deux), <xref linkend="ffmpeg"/>, <xref linkend="icu"/> (construit avant
<xref linkend="libxml2"/>), <xref linkend="libwebp"/>, <xref
linkend="libxslt"/> et <xref linkend="opus"/>
    </para>

    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <xref linkend="libevent"/>, <xref linkend="mitkrb"/>, <xref
linkend="pipewire"/>, <xref linkend="poppler"/>, <ulink
url="https://github.com/open-source-parsers/jsoncpp/releases">jsoncpp</ulink>,
<ulink url="https://github.com/cisco/libsrtp/releases">libsrtp</ulink>,
<ulink url="https://google.github.io/snappy/">snappy</ulink>
    </para>

    <para condition="html" role="usernotes">
      Notes utilisateur&nbsp;: <ulink url="&blfs-wiki;/qtwebengine"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation de qtwebengine</title>







    <!-- following merely commented instead of deleted, in case we need to
      drop back when a future version of python3 is released -->
<!--<note>

      <para>
        Unlike version 5.15.2, the chromium-derived build system now needs
        <command>python</command> to be available and to be python2. In
        BLFS-10.1 the creation of the python symlink was removed as a step
        towards eventually getting rid of python2 (other old packages which
        need python2 usually work by invoking python2). If you are still
        using an earlier version of BLFS where
        <filename>/usr/bin/python</filename> exists, you can skip the
        commands to create the symlink, and to later remove it.
      </para>
    </note>

    <para>
      First, as the <systemitem class="username">root</systemitem>
      user, create the python symlink:
    </para>

<screen role="root"><userinput>ln -svf /usr/bin/python{2,}</userinput></screen>-->
<!--<para>

      Now apply a patch to update from 5.15.6 to the security and other fixes
      contained in the 5.15.7 source:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-5.15.7-1.patch</userinput></screen>-->
<para>
      Appliquez un correctif pour corriger plusieurs problèmes qui empêchent la
construction et pour la forcer à utiliser python3&nbsp;:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-build_fixes-1.patch</userinput></screen>

    <para>
      Apply a patch that resolves problems when building with ffmpeg-5 and later:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-ffmpeg5_fixes-1.patch</userinput></screen>

    <para>
      Apply a patch that resolves problems when building with icu-73 and later:
    </para>

<!-- start of commands for git versions only -->
<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-icu_73-1.patch</userinput></screen>


    <para>
      Bien que le correctif build_fixes s'assure que git n'est pas appelé pendant
la construction, le système de construction a des règles labyrinthiques
d'une extrême complexité, et en particulier essayer de construire sans les
deux répertoires <filename>.git</filename> le fera échouer à construire un
code inattendu et inconstructible qui référence un en-tête privé qui n'a pas
été généré. Évitez cela en créant les répertoires requis&nbsp;:
    </para>

<screen><userinput>mkdir -pv .git src/3rdparty/chromium/.git</userinput></screen>

    <para>
      Comme cette version de qtwebengine est conçue pour une version plus récente
que la version publique actuelle, changez-la pour construire pour
qt-&qt5-version; avec un sed&nbsp;:
    </para>

<!-- end of commands for git versions only -->
<screen><userinput>sed -e '/^MODULE_VERSION/s/5.*/&qt5-version;/' -i .qmake.conf</userinput></screen>


    <para>
      Maintenant, assurez-vous que les en-têtes locaux sont disponibles lorsque
vous ne construisez pas ce paquet en tant que partie de <xref
linkend="qt5"/>&nbsp;:
    </para>

<screen><userinput>find -type f -name "*.pr[io]" |
  xargs sed -i -e 's|INCLUDEPATH += |&amp;$$QTWEBENGINE_ROOT/include |'</userinput></screen>

    <para>
      Ensuite, permettez à la bibliothèques pulseaudio de se lier à la
construction, plutôt qu'à l'exécution. Cela évite un problème avec les
nouvelles versions de pulseaudio&nbsp;:
    </para>

<screen><userinput>sed -e '/link_pulseaudio/s/false/true/' \
    -i src/3rdparty/chromium/media/media_options.gni</userinput></screen>

    <para>
      Ensuite, corrigez les outils de construction pour qu'ils puissent être
lancés avec Python-3.11+&nbsp;:
    </para>

<screen><userinput>sed -e 's/\^(?i)/(?i)^/' \
    -i src/3rdparty/chromium/tools/metrics/ukm/ukm_model.py &amp;&amp;
sed -e "s/'rU'/'r'/" \
    -i src/3rdparty/chromium/tools/grit/grit/util.py</userinput></screen>

    <para>
      Enfin, corrigez un changement dans le système de construction qui permet à
ses développeurs de passer par exemple -j20 à make (pour des tests rapides
de certains composants) mais casse la construction quand LFS utilise la
variable d'environnement NINJAJOBS&nbsp;:
    </para>



<!-- now that we always install this as 5.15.2, this seems to be redundant
    <para>

      If an older version of the package's main library has been installed,
      when the package is built separately it will link to that in preference
      to its own not-yet-installed version, and fail because of missing symbols.
      Prevent that by, as the <systemitem class="username">root</systemitem>
      user, moving the symlink out of the way:
    </para>

<screen role="root"><userinput>if [ -e ${QT5DIR}/lib/libQt5WebEngineCore.so ]; then
  mv -v ${QT5DIR}/lib/libQt5WebEngineCore.so{,.old}
fi</userinput></screen>-->
<!--<para>

      The last fix is needed to build with gcc-12:
    </para>

<screen><userinput>sed -e '/#include/i#include &lt;vector&gt;' \
    -i src/3rdparty/chromium/third_party/skia/src/utils/SkParseColor.cpp</userinput></screen>-->
<screen><!-- editors: See thread at
http://lists.linuxfromscratch.org/pipermail/blfs-dev/2019-December/036996.html
et.seq, particularly 037002.html which shows the commit near the end. -->
<userinput>sed -i 's/NINJAJOBS/NINJA_JOBS/' src/core/gn_run.pro</userinput></screen>





    <para>
      Installez <application>qtwebengine</application> en exécutant les commandes
suivantes&nbsp;:
    </para>

<!--
    <para>

      if you wish to build the HTML documentation, issue:
    </para>

<screen><userinput>make docs</userinput></screen>
-->
<screen><userinput>mkdir build &amp;&amp;
cd    build &amp;&amp;
qmake .. -- -system-ffmpeg -proprietary-codecs -webengine-icu &amp;&amp;
make</userinput></screen>


    <para>
      Ce paquet n'a pas de suite de tests.
    </para>

    <para>
      Maintenant, en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<!-- EDITORS NOTE: If you are updating this package, use INSTALL_ROOT=
         instead of DESTDIR= -->
<!--
    <para>

      If you built the HTML documentation, install it with:
    </para>

<screen role="root"><userinput>make install_docs</userinput></screen>
-->
<screen role="root"><userinput>make install</userinput></screen>

    

    <para>
      Supprimez les références au répertoire de construction dans les
bibliothèques de dépendances (prl) installées en exécutant les commandes
suivantes en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<!--<para>

      Finally, as the <systemitem class="username">root</systemitem>
      user, remove the python symlink:
    </para>

<screen role="root"><userinput>rm -v /usr/bin/python</userinput></screen>-->
<screen role="root"><userinput>find $QT5DIR/ -name \*.prl \
   -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \;</userinput></screen>


  </sect2>

  <sect2 role="commands">
    <title>Explication des commandes</title>

    <para>
      <command>qmake</command>&nbsp;: Ceci construira la copie embarquée de
<application>ninja</application> si elle n'est pas déjà installée et
l'utilisera pour configurer la construction.
    </para>

    <para>
      <command>-- -system-ffmpeg -proprietary-codecs
-webengine-icu</command>&nbsp;: si des options sont passées à qmake elles
doivent apparaître après «&nbsp;--&nbsp;» qui doit suivre les
«&nbsp;..&nbsp;» qui pointent vers le répertoire principal. Les options lui
font utiliser les paquets ffmpeg et icu du système. L'option
«&nbsp;-proprietary-codecs&nbsp;» permettent à ffmpeg de décoder les codecs
H264 et H265. Si vous le construisez en tant que partie de Qt5, le paquet
icu du système est automatiquement utilisé (seulement) par Qt5Core s'il est
disponible, mais à moins que vous utilisiez cette option webengine utilisera
toujours la copie incluse de icu, ce qui demande plus de temps et d'espace
pour la construction.
    </para>

    <para>
      <option>-webengine-jumbo-build 0</option>&nbsp;: si ajoutez cela à la
commande qmake cela causera le rapport de «&nbsp;Jumbo Build Merge
Limit&nbsp;» à «&nbsp;no&nbsp;» au lieu de 8. Cela désactive la construction
lourde. Certaines distributions utilisent cela pour une construction plus
légère sur certaines architectures comme MIPS. Sur x86_64 cela peut faire
gagner un peu de place pendant la construction, mais le temps de
construction augmentera énormément.
    </para>

    <para>
      <option>-webengine-kerberos</option>&nbsp;: ajoutez cela si vous avez
installé <xref linkend="mitkrb"/> et souhaitez vous connecter à partir d'un
navigateur QtWebEngine à un serveur web qui vous demande de vous connecter
par kerberos.
    </para>

    

    <!--
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/SIOCGSTAMP.xml"/>

    -->
<para>
      <option>NINJAJOBS=4 make</option>&nbsp;: Si vous avez corrigé le ninja du
système dans LFS pour qu'il reconnaisse la variable d'environnement
NINJAJOBS, cette commande lancera le ninja du système avec le nombre de
travaux spécifiées (c.-à-d. 4).  Il y a plusieurs raisons pour lesquelles
vous pourriez vouloir faire cela&nbsp;:
    </para>

      <itemizedlist>
        <listitem>
          <para>
            Construire sur un sous-ensemble des CPU permet de mesurer le temps de
construction pour un plus petit nombre de processeurs, et de lancer d'autres
tache gourmandes en CPU en même temps. Pour les rédacteurs sur une machine
avec de nombreux CPU, qui essayent de mesurer le temps pour une machine à 4
cœurs, <option>NINJAJOBS=4 make</option> donnera une approximation
raisonnable (il y a une petite période où N+2 travaux python2 et node
tournent en même temps).
          </para>
        </listitem>
        <listitem>
          <para>
            Sur une machine avec seulement 4 CPU en ligne, l'ordonnancement de N+2
taches pour qtwebengine est plus lent d'environ 3 à 7 %, sans doute à cause
de la taille des fichiers C++ et de leurs nombreux fichiers inclus et
modèles. Donc, dans le doute paramétrez NINJAJOBS aux nombre de CPU.
          </para>
        </listitem>
        <listitem>
          <para>
            Réduire le nombre de cœurs utilisé pour des paquets gourmands en CPU pendant
un long moment peut atténuer des problèmes de température.
          </para>
        </listitem>
        <listitem>
          <para>
            Réduire le nombre de coùrs évitera d'éventuels problèmes de mémoire sur les
systèmes qui n'ont pas suffisamment de mémoire (ou d'espace d'échange) quand
tous les cœurs sont actifs. L'approche suggérée est de limiter le nombre de
cœurs à environ un pour chaque 1,5 Go de RAM et d'espace d'échange combinés.
          </para>
        </listitem>
      </itemizedlist>

  </sect2>

  <sect2 role="configuration">
    <title>Configuration de QtWebEngine</title>

    <sect3 id="qtwebengine-config">
      <title>Informations sur la configuration</title>

      <para>
        Si vous mettez à jour depuis une version mineur plus ancienne de cette
application, vous devrez nettoyer le cache du
<emphasis>navigateur</emphasis> pour que certaines pages fonctionnent,
p. ex. pour <application>falkon</application> ce sera dans <filename
class="directory">~/.cache/falkon/</filename>. vous devrez le faire si le
navigateur commence à rendre la page puis se change en un onglet vide avec
un message disant que quelque chose s'est mal passé, et un bouton pour
réessayer. Même après avoir supprimé l'ancien cache, vous pourriez avoir
besoin de réessayer plusieurs fois pour chaque onglet affecté.
      </para>

      <para>
        Si un navigateur utilisant ce paquet ne s'exécute pas et si lorsqu'il est
lancé depuis un terminal il rapporte «&nbsp;Trace/breakpoint trap&nbsp;»
c'est probablement un problème de configuration du noyau — il n'y a pas
besoin de reconstruire QtWebEngine, voyez la prochaine section, recompilez
le noyau et redémarrez sur le nouveau noyau.
      </para>

    </sect3>

  </sect2>

  <sect2 role="kernel" id="qtwebengine-kernel">
    <title>Configuration du noyau</title>

    <para>
      Ce paquet n'a pas besoin des options facultatives des espaces de noms du
noyau, mais si les espaces de noms utilisateurs sont activés <phrase
revision="systemd">(comme c'est le cas dans certaines unités systemd, en
durcissement)</phrase> les espaces de noms de PID doivent aussi être
activés. Dans ce cas activez les options suivantes dans la configuration du
noyau et recompilez le noyau si nécessaire&nbsp;:
    </para>


<screen><!-- Spaces are significant in <screen>
 sections -->
<literal>General setup ---&gt;
  -*- Namespaces support ---&gt;
    [ ]     User namespace                    [CONFIG_USER_NS]
    [*]     PID namespace                     [CONFIG_PID_NS]</literal></screen>

    <indexterm zone="qtwebengine qtwebengine-kernel">
      <primary sortas="d-qtwebengine">qtwebengine</primary>
    </indexterm>
  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>

      <seglistitem>
        <seg>
          qtwebengine_convert_dict et QtWebEngineProcess (dans $QT5DIR/libexec)
        </seg>
        <seg>
          libQt5Pdf.so, libQt5PdfWidgets.so, libQt5WebEngineCore.so,
libQt5WebEngine.so et libQt5WebEngineWidgets.so
        </seg>
        <seg>
          $QT5DIR/include/QtPdf, $QT5DIR/include/QtPdfWidgets,
$QT5DIR/include/QtWebEngine, $QT5DIR/include/QtWebEngineCore,
$QT5DIR/include/QtWebEngineWidgets, $QT5DIR/qml/QtWebEngine et
$QT5DIR/translations/qtwebengine_locales
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="qtwebengine_convert_dict">
        <term><command>qtwebengine_convert_dict</command></term>
        <listitem>
          <para>
            converti les dictionnaires hunspell (<literal>.dic</literal>) au format
chromium (<literal>.bdic</literal>)
          </para>
          <indexterm zone="qtwebengine qtwebengine_convert_dict">
            <primary sortas="b-qtwebengine_convert_dict">qtwebengine_convert_dict</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="QtWebEngineProcess">
        <term><command>QtWebEngineProcess</command></term>
        <listitem>
          <para>
            est un programme libexec qui lance un processus zygote (qui écoute les
requêtes de spawn d'un processus maître et se fork en réponse)
          </para>
          <indexterm zone="qtwebengine QtWebEngineProcess">
            <primary sortas="b-QtWebEngineProcess">QtWebEngineProcess</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngine-lib">
        <term><filename class="libraryfile">libQtWebEngine.so</filename></term>
        <listitem>
          <para>
            fournit des types QML pour présenter du contenu web dans une application QML
          </para>
          <indexterm zone="qtwebengine libQtWebEngine-lib">
            <primary sortas="c-libQtWebEngine">libQtWebEngine.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngineCore">
        <term><filename class="libraryfile">libQtWebEngineCore.so</filename></term>
        <listitem>
          <para>
            fournit l'API publique partagée par QtWebEngine et QtWebEngineWidgets
          </para>
          <indexterm zone="qtwebengine libQtWebEngineCore">
            <primary sortas="c-libQtWebEngineCore">libQtWebEngineCore.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngineWidgets">
        <term><filename class="libraryfile">libQtWebEngineWidgets.so</filename></term>
        <listitem>
          <para>
            fournit un moteur de navigateur web ainsi que des classes C++ pour présenter
et interagir avec du contenu web
          </para>
          <indexterm zone="qtwebengine libQtWebEngineWidgets">
            <primary sortas="c-libQtWebEngineWidgets">libQtWebEngineWidgets.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>
  </sect2>

</sect1>
