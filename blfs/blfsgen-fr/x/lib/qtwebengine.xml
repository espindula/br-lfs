<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY qtwebengine-major "5.15">
<!-- URL if there is a public release
  <!ENTITY qtwebengine-download-http "https://download.qt.io/archive/qt/&qtwebengine-major;/&qtwebengine-version;/submodules/qtwebengine-everywhere-src-&qtwebengine-version;.tar.xz">
     URL for a prepared git version -->
  <!ENTITY qtwebengine-download-http "&sources-anduin-http;/qtwebengine/qtwebengine-&qtwebengine-version;.tar.xz">
  <!ENTITY qtwebengine-download-ftp  "">
  <!ENTITY qtwebengine-md5sum        "97ee413dccf03d2fc09a7718f39367f7">
  <!ENTITY qtwebengine-size          "306&nbsp;Mo">
  <!ENTITY qtwebengine-buildsize     "5,1 Go (154 Mo installés)">
  <!ENTITY qtwebengine-time          "95 SBU (avec 6 travaux sur un processeur à 4 cœurs)">
]>

<sect1 id="qtwebengine" xreflabel="qtwebengine-&qtwebengine-version;">
  <?dbhtml filename="qtwebengine.html"?>

  <sect1info>
<date>$Date$</date></sect1info>

  <title>QtWebEngine-&qtwebengine-version;</title>

  <indexterm zone="qtwebengine">
    <primary sortas="a-qtwebengine">qtwebengine</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à QtWebEngine</title>

    <para>
      <application>QtWebEngine</application> intègre les composantes web de
<application>chromium</application> dans Qt. Il contient sa propre copie de
ninja qu'il utilise lors de la construction s'il ne peut pas trouver une
copie sur le système, et diverses copies de bibliothèques de ffmpeg, icu,
libvpx et zlib (dont libminizip) qui ont été forkées par les développeurs de
<application>chromium</application>.
    </para>

    <para>
      Ce paquet et les navigateurs qui l'utilisent peuvent être utiles si vous
utilisez un site conçu pour google chrome, ou chromium.
    </para>

    

    <!-- Note for editors re switching between git versions and releases:
      If a public release of Qt 5.15.3 (or later) appears in a meaningful
      time frame, please keep the notes re the git build, as comments, so
      that updating for later fixes will be easier: in the past, updates
      of 'stable' versions (i.e. 5.12 when 5.14, 5.15 were the newest)
      happened much later than updates to the newest version (now Qt6)
      and it seems likely we might again need to use a git version to fix
      future chromium vulnerabilities. -->
<warning>
      
      <!-- FIXME : remove this para before we release 11.0 -->
<para>
        <emphasis>Si vous utilisez une version de développement de LFS avec
binutils-2.37, vous devez reconstruire binutils avec le correctif qui se
trouve maintenant dans LFS, sans quoi la construction échouera avec un
message «&nbsp;error adding symbols: malformed archive&nbsp;».</emphasis>
      </para>
 
      <para>
        QtWebEngine utilise une copie forkée de chromium, et est donc vulnérable à
plusieurs problèmes qui y ont été trouvés. Les développeurs de Qt ont
toujours préféré publier en même temps que le reste de Qt (plutôt que
d'ajouter des corrections en urgence), mais les versions stables sont
publiée après la version de développement actuelle. Maintenant qu'ils se
préparent à passer à Qt6, les version 5.15.3 et les versions suivantes de
Qt-5.15 ne sont initialement disponibles que pour leurs clients. QtWebEngine
est un peu une exception avec sa licence LGPL, mais récupérer les sources
git (avec le sous-module chromium forké) et l'amener à un point où il est
possible de le compiler sur un système BLFS récent peut demander beaucoup
d'effort et les mises à jour du livre peuvent être retardées.
      </para>

      <para>
        Il semble que les futures versions de la série 5.15 seront aussi publiées
bien après que les vulnérabilités de chromium ne soient connues, mais les
corrections de QtWebEngine se trouvent dans le dépôt git et les rédacteurs
pensent que les vulnérabilités connues des navigateurs devraient être
corrigées.
      </para>

      <para> 
        <!-- for git versions -->
L'archive proposée ci-dessous a été créée à partir de la branche git 5.15 et
la branch 87 du sous-module chromium (qui est une version forkée de
chromium). Voir le fichier GIT-VERSIONS dans l'archive (après avoir appliqué
les correctifs) pour des détails sur les derniers commits.
      </para>
    </warning>

    

    <!-- note for editors on obtaining webengine from git.
      First (if you do not already have a past version)
      git clone git://code.qt.io/qt/qtwebengine.git
      git submodule init -
       that will report qtwebengine-chromium.git registered for src/3rdparty
       now find the main branch names:
      git fetch origin
      git branch -r
       after a release is prepared (even if the rest is not public), the 5.15
       branch is probably what you want
      git checkout origin/5.15
       Confirm that HEAD is where you expected.
       Now go to src/3rdparty
      git fetch origin
      git branch -r
       The required branch is likely to be 87-branch unless there is a newer one
      mentioned in the 5.15 cgit web page (below).
      git checkout origin/87-branch (or whatever)
       Use git log or git tk to look at its HEAD and check it seems appropriate.

      To decide when it might be worth creating a new tarball, periodically keep
      an eye on https://code.qt.io/cgit/qt/qtwebengine.git/ (currently, the 5.15
      branch, 5.15.4 might get used later). The interesting items are CVE fixes
      for known chromium vulnerabilities, as well as numbered Security bugs -
      again, these relate to chromium.

      When I noticed some updates in late March I was searching for one of the
      CVEs mentioned, and google found a link to a review page for Michael Brüning
      at https://codereview.qt.nokia.com/q/owner:michael.bruning%2540qt.io. At that
      time I could see various unmerged items, so I waited. The items for the
      69-based chromium module are not relevant to 5.15 (possibly they will
      eventually update 5.12). Review queues for other Qt employees might be found
      in a similar way, but remember that everythng EXCEPT qtwebengine and chromium
      is private to Qt until they choose to release it.

      NOTE: the 3rdparty/chromium tree may contain more patches than have been
      merged into the current 5.15.x branch. Any patches after what was in the
      last 'update chromium' merge in qtwebengine may break the build.  When Qt
      is close to releasing a paid-for 5.15 version, items from 5.15.x get merged
      into 5.15.

      After merging the contents of the qtwebengine and src/3rdparty git extracts,
      in the top level please create a GIT-VERSIONS file summarising the HEAD
      commits of both parts, as a reminder of where we are up to.

      Now create tarballs - 'git archive' does not work across submodule boundaries,
      so you need to create one archive from the top of qtwebengine/ and another
      from the top of src/3rdparty (chromium, gn, ninja are apparently all part of
      the qtwebengine-chromium module).  Then in a work area untar the qtwebengine
      tarball, go down to src/3rdparty and untar the submodule tarball.
      Decide on what to call the result and create a full xz tarball using tar -cJf.

      UPDATE: Since we have to host the tarball, and it is over 300MB, it makes
      sense to create a patch for subsequent fixes (for the first version, 314KB
      including the updates to the GIT-VERSIONS file).  For future updates, view
      the current updates patch to see the previous commits. When the new commits
      have been applied, rename the updated version to 'b', but untar the
      unpatched tarball as 'a' and then diff a to b in the usual manner to get
      all updates since the tarball was created.

      For our own releases, probably best to create a fresh tarball.

         end of note for editors -->
&lfs101_checked;

    <note>
      <para>
        Par défaut, ninja utilisera tous les CPU actifs + 2 (si au moins 4
existent), même s'ils ne sont pas disponibles pour la tâche actuelle parce
que le terminal a été restreint avec «&nbsp;taskset&nbsp;». Pour éviter
cela, voir les explications des commandes ci-dessous.
      </para>

      <para>
        De manière inhabituelle, le système de construction GN intégré (utilisé pour
créer les fichiers Ninja) a besoin d'une version statique de <filename
class="libraryfile">libstdc++.a</filename> bien que les bibliothèque
installées utilisent bien la version partagée. Si cette bibliothèque
statique n'est pas présente, la construction échouera rapidement. Remarquez
que si vous essayez de construire webengine en tant que partie de
<application>Qt</application> et que la bibliothèque statique n'est pas
disponible, cette construction terminera sans installer webengine ou
échouera pendant l'installation (les deux comportements ont été observés en
5.12.0).
      </para>
    </note>

    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement (HTTP)&nbsp;: <ulink url="&qtwebengine-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Téléchargement (FTP)&nbsp;: <ulink url="&qtwebengine-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5 du téléchargement&nbsp;: &qtwebengine-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement&nbsp;: &qtwebengine-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis&nbsp;: &qtwebengine-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction&nbsp;: &qtwebengine-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Téléchargements supplémentaires</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <!-- keep links for releases and git versions as a reminder
               that the tarball names names differ
          <ulink url="&patch-root;/qtwebengine-everywhere-src-&qtwebengine-version;-ICU68-2.patch"/>
 -->
Correctif requis&nbsp;: <ulink
url="&patch-root;/qtwebengine-&qtwebengine-version;-upstream_fixes-2.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Correctif requis&nbsp;: <ulink
url="&patch-root;/qtwebengine-&qtwebengine-version;-build_fixes-4.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dépendances de qtwebengine</bridgehead>

    <bridgehead renderas="sect4">Requises</bridgehead>
      
    <!-- the qmake output tends to be misleading. 'khr' is from Mesa -->
<para role="required">
      <xref linkend="nodejs"/>, <xref linkend="nss"/>, <xref linkend="python2"/>
et <xref linkend='qt5'/>
    </para>

    <bridgehead renderas="sect4">Recommandées</bridgehead>
    <note>
      <para>
        Si ces paquets ne sont pas installés, le processus de construction compilera
et installera ses propres (sans doute plus vieilles) versions, avec pour
effet d'augmenter l'espace disque utilisé et le temps pris par la
construction et l'installation.
      </para>
    </note>

    <para role="recommended">
      soit <xref linkend="alsa-lib"/> soit <xref linkend="pulseaudio"/> (ou les
deux), <xref linkend="ffmpeg"/>, <xref linkend="icu"/>, <xref
linkend="libwebp"/>, <xref linkend="libxslt"/> et <xref linkend="opus"/>
    </para>

    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <xref linkend="libevent"/>, <xref linkend="poppler"/>, <ulink
url="https://github.com/open-source-parsers/jsoncpp/releases">jsoncpp</ulink>,
<ulink url="https://github.com/cisco/libsrtp/releases">libsrtp</ulink>,
<ulink url="http://google.github.io/snappy/">snappy</ulink>
    </para>

    <para condition="html" role="usernotes">
      Notes utilisateur&nbsp;: <ulink url="&blfs-wiki;/qtwebengine"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation de qtwebengine</title>

    <note>
      <para>
        Contrairement à la version 5.15.2, le système de construction dérivé de
chromium a maintenant besoin de <command>python</command> et ce doit être
python2. Dans BLFS-10.1 la création du lien symbolique de python a été
supprimée avant de pouvoir enfin se débarrasser de python2 (d'autres anciens
paquets qui ont besoin de python2 fonctionnent en général en invoquant
python2). Si vous utilisez toujours une ancienne version de BLFS où
<filename>/usr/bin/python</filename> existe, vous pouvez passer les
commandes pour créer le lien symbolique, et plus tard pour le supprimer.
      </para>
    </note>

    <para>
      Tout d'abord, en tant qu'utilisateur <systemitem
class="username">root</systemitem>, créez le lien symbolique pour
python&nbsp;:
    </para>

<screen role="root"><userinput>ln -svf /usr/bin/python{2,}</userinput></screen>

    <para>
      Maintenant appliquez un correctif pour la sécurité et d'autres
corrections&nbsp;:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-upstream_fixes-2.patch</userinput></screen>

    <para>
      Ensuite appliquez un correctif pour corriger plusieurs problèmes qui
empêchent la construction&nbsp;:
    </para>

<!-- start of commands for git versions only -->
<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-build_fixes-4.patch</userinput></screen>


    <para>
      Bien que le premier correctif s'assure que git n'est pas appelé pendant la
construction, le système de construction a des règles labyrinthiques, et en
particulier essayer de construire sans les deux répertoires
<filename>.git</filename> le fera échouer à construire un code inattendu et
inconstructible qui référence un en-tête privé qui n'a pas été
généré. Évitez cela en créant les répertoires requis&nbsp;:
    </para>

<screen><userinput>mkdir -pv .git src/3rdparty/chromium/.git</userinput></screen>

    <para>
      Comme cette version de qtwebengine est conçue pour une version plus récente
que la version publique actuelle, changez-la pour construire pour
qt-&qt5-version; avec un sed&nbsp;:
    </para>

<!-- end of commands for git versions only -->
<screen><userinput>sed -e '/^MODULE_VERSION/s/5.*/&qt5-version;/' -i .qmake.conf</userinput></screen>


    <para>
      Maintenant, assurez-vous que les en-têtes locaux sont disponibles lorsque
vous ne construisez pas ce paquet en tant que partie de <xref
linkend="qt5"/>&nbsp;:
    </para>

<screen><userinput>find -type f -name "*.pr[io]" |
  xargs sed -i -e 's|INCLUDEPATH += |&amp;$$QTWEBENGINE_ROOT/include |'</userinput></screen>

    <para>
      Ensuite, permettez à la bibliothèques pulseaudio de se lier à la
construction, plutôt qu'à l'exécution. Cela évite un problème avec les
nouvelles versions de pulseaudio&nbsp;:
    </para>

<screen><userinput>sed -e '/link_pulseaudio/s/false/true/' \
    -i src/3rdparty/chromium/media/media_options.gni</userinput></screen>

    <para>
      Enfin, corrigez un changement dans le système de construction qui permet à
ses développeurs de passer par exemple -j20 à make (pour des tests rapides
de certains composants) mais casse la construction quand LFS utilise la
variable d'environnement NINJAJOBS&nbsp;:
    </para>



<screen><!-- editors: See thread at
http://lists.linuxfromscratch.org/pipermail/blfs-dev/2019-December/036996.html
et.seq, particularly 037002.html which shows the commit near the end. -->
<userinput>sed -i 's/NINJAJOBS/NINJA_JOBS/' src/core/gn_run.pro</userinput></screen>

    <para>
      Si une version plus ancienne de la bibliothèque principale de ce paquet est
installée et si vous construisez ce paquet séparément, il se liera à
celle-ci plutôt que sa propre version non encore installée, et échouera à
cause de symboles manquants. Évitez cela, en tant qu'utilisateur <systemitem
class="username">root</systemitem>, en déplaçant le lien symbolique&nbsp;:
    </para>

<screen role="root"><userinput>if [ -e ${QT5DIR}/lib/libQt5WebEngineCore.so ]; then
  mv -v ${QT5DIR}/lib/libQt5WebEngineCore.so{,.old}
fi</userinput></screen>

    <para>
      Installez <application>qtwebengine</application> en lançant les commandes
suivantes&nbsp;:
    </para>

<!--
    <para>

      if you wish to build the HTML documentation, issue:
    </para>

<screen><userinput>make docs</userinput></screen>
-->
<screen><userinput>mkdir build &amp;&amp;
cd    build &amp;&amp;

qmake .. -- -system-ffmpeg -webengine-icu &amp;&amp;
make</userinput></screen>


    <para>
      Ce paquet n'est pas fourni avec une suite de tests.
    </para>

    <para>
      Maintenant, en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<!-- EDITORS NOTE: If you are updating this package, use INSTALL_ROOT=
         instead of DESTDIR= -->
<!--
    <para>

      If you built the HTML documentation, install it with:
    </para>

<screen role="root"><userinput>make install_docs</userinput></screen>
-->
<screen role="root"><userinput>make install</userinput></screen>

    

    <para>
      Supprimez les références au répertoire de construction dans les
bibliothèques de dépendances (prl) installées en lançant les commandes
suivantes en tant qu'utilisateur <systemitem
class="username">root</systemitem>&nbsp;:
    </para>

<screen role="root"><userinput>find $QT5DIR/ -name \*.prl \
   -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \;</userinput></screen>

    <para>
      Enfin, en tant qu'utilisateur <systemitem
class="username">root</systemitem>, supprimez le lien symbolique
python&nbsp;:
    </para>

<screen role="root"><userinput>rm -v /usr/bin/python</userinput></screen>
  </sect2>

  <sect2 role="commands">
    <title>Explication des commandes</title>

    <para>
      <command>qmake</command>&nbsp;: Ceci construira la copie embarquée de
<application>ninja</application> si elle n'est pas déjà installée et
l'utilisera pour configurer la construction.
    </para>

    <para>
      <command>-- -system-ffmpeg -webengine-icu</command>&nbsp;: Si des options
sont passées à qmake elles doivent apparaître après «&nbsp;--&nbsp;» qui
doit suivre les «&nbsp;..&nbsp;» qui pointent vers le répertoire
principal. Les options lui font utiliser les paquets ffmpeg et icu du
système. Si vous le construisez en tant que partie de Qt5, le paquet icu du
système est automatiquement utilisé (seulement) par Qt5Core s'il est
disponible, mais à moins que vous utilisiez cette option webengine utilisera
toujours la copie incluse de icu, ce qui demande plus de temps et d'espace
pour la construction.
    </para>

    

    <!--
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" 
       href="../../xincludes/SIOCGSTAMP.xml"/>

    -->
<para>
      <option>NINJAJOBS=4 make</option>&nbsp;: Si vous avez corrigé le ninja du
système dans LFS pour qu'il reconnaisse la variable d'environnement
NINJAJOBS, cette commande lancer le ninja du système avec le nombre de
travaux spécifiées (c.-à-d. 4).  Il y a plusieurs raisons pour lesquelles
vous pourriez vouloir faire cela&nbsp;:
    </para>
      
      <itemizedlist>
        <listitem>
          <para>
            Construire sur un sous-ensemble des CPU permet de mesurer le temps de
construction pour ce nombre de processeurs et de lancer d'autres tâches
gourmandes en CPU sur les autres cœurs.
          </para>
        </listitem>
        <listitem>
          <para>
            Pour améliorer la vitesse de construction sur les machines moins bien dotées
à 4 cœurs. Sur une machine avec un CPU puissant et beaucoup de RAM, N+2
travaux (par défaut avec ninja quand la machine a au moins 4 cœurs) pour le
très grand nombre de fichiers C++ compilés dans ce paquet n'est typiquement
que légèrement plus rapide que de lancer N travaux en même temps. Mais pour
une machine avec moins de mémoire, cela peut être beaucoup plus lent.
          </para>
        </listitem>
        <listitem>
          <para>
            Réduire le nombre de cœurs utilisé pour des paquets gourmands en CPU pendant
un long moment peut atténuer des problèmes de température.
          </para>
        </listitem>
      </itemizedlist>

  </sect2>

  <sect2 role="configuration">
    <title>Configuration de QtWebEngine</title>

    <sect3 id="qtwebengine-config">
      <title>Informations sur la configuration</title>

      <para>
        Si vous mettez à jour depuis une version mineur plus ancienne de cette
application, vous devrez nettoyer le cache du
<emphasis>navigateur</emphasis> pour que certaines pages fonctionnent,
p. ex. pour <application>falkon</application> ce sera dans <filename
class="directory">~/.cache/falkon/</filename>. vous devrez le faire si le
navigateur commence à rendre la page puis se change en un onglet vide avec
un message disant que quelque chose s'est mal passé, et un bouton pour
réessayer. Même après avoir supprimé l'ancien cache, vous pourriez avoir
besoin de réessayer plusieurs fois pour chaque onglet affecté.
      </para>

      <para>
        If a browser using this package fails to run and when run from a term it
reports 'Trace/breakpoint trap' that is probably a kernel configuration
issue - there is no need to rebuild QtWebEngine, see the next section,
recompile the kernel and reboot to the new kernel.
      </para>

    </sect3>

  </sect2>

  <sect2 role="kernel" id="qtwebengine-kernel">
    <title>Configuration du noyau</title>

    <para>
      This package does not require any of the optional kernel namespace items,
but if User namespace is enabled <phrase revision="systemd">(as happens in
some unit files, for hardening)</phrase> PID namespace must also be
enabled. In that case enable the following options in the kernel
configuration and recompile the kernel if necessary:
    </para>


<screen><!-- Spaces are significant in <screen>
 sections -->
<literal>General setup ---&gt;
  -*- Namespaces support ---&gt;
    [ ]     User namespace                    [CONFIG_USER_NS]
    [*]     PID namespace                     [CONFIG_PID_NS]</literal></screen>

    <indexterm zone="qtwebengine qtwebengine-kernel">
      <primary sortas="d-qtwebengine">qtwebengine</primary>
    </indexterm>
  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>

      <seglistitem>
        <seg>
          qtwebengine_convert_dict et QtWebEngineProcess (dans $QT5DIR/libexec)
        </seg>
        <seg>
          libQt5Pdf.so, libQt5PdfWidgets.so, libQt5WebEngineCore.so,
libQt5WebEngine.so et libQt5WebEngineWidgets.so
        </seg>
        <seg>
          $QT5DIR/include/QtPdf, $QT5DIR/include/QtPdfWidgets,
$QT5DIR/include/QtWebEngine, $QT5DIR/include/QtWebEngineCore,
$QT5DIR/include/QtWebEngineWidgets, $QT5DIR/qml/QtWebEngine et
$QT5DIR/translations/qtwebengine_locales
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="qtwebengine_convert_dict">
        <term><command>qtwebengine_convert_dict</command></term>
        <listitem>
          <para>
            converti les dictionnaires hunspell (<literal>.dic</literal>) au format
chromium (<literal>.bdic</literal>)
          </para>
          <indexterm zone="qtwebengine qtwebengine_convert_dict">
            <primary sortas="b-qtwebengine_convert_dict">qtwebengine_convert_dict</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="QtWebEngineProcess">
        <term><command>QtWebEngineProcess</command></term>
        <listitem>
          <para>
            est un programme libexec qui lance un processus zygote (qui écoute les
requêtes de spawn d'un processus maître et se fork en réponse)
          </para>
          <indexterm zone="qtwebengine QtWebEngineProcess">
            <primary sortas="b-QtWebEngineProcess">QtWebEngineProcess</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngine-lib">
        <term><filename class="libraryfile">libQtWebEngine.so</filename></term>
        <listitem>
          <para>
            fournit des types QML pour présenter du contenu web dans une application QML
          </para>
          <indexterm zone="qtwebengine libQtWebEngine-lib">
            <primary sortas="c-libQtWebEngine">libQtWebEngine.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngineCore">
        <term><filename class="libraryfile">libQtWebEngineCore.so</filename></term>
        <listitem>
          <para>
            fournit l'API publique partagée par QtWebEngine et QtWebEngineWidgets
          </para>
          <indexterm zone="qtwebengine libQtWebEngineCore">
            <primary sortas="c-libQtWebEngineCore">libQtWebEngineCore.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngineWidgets">
        <term><filename class="libraryfile">libQtWebEngineWidgets.so</filename></term>
        <listitem>
          <para>
            fournit un moteur de navigateur web ainsi que des classes C++ pour présenter
et interagir avec du contenu web
          </para>
          <indexterm zone="qtwebengine libQtWebEngineWidgets">
            <primary sortas="c-libQtWebEngineWidgets">libQtWebEngineWidgets.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>
  </sect2>

</sect1>
