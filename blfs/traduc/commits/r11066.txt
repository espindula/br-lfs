Révision 11066

fichiers modifiés :
   introduction/welcome/changelog.xml
   postlfs/security/openssl.xml
   general.ent
   x/installing/xorg-config.xml

Log :
Correct some font links. Reword DRI description. Do some general reformatting.

Le robot a traité 32 % du commit anglais
Index: introduction/welcome/changelog.xml
===================================================================
--- introduction/welcome/changelog.xml	(revision 11065)
+++ introduction/welcome/changelog.xml	(revision 11066)
@@ -44,6 +44,20 @@
 
 -->
     <listitem>
+      <para>March 7th, 2013</para>
+      <itemizedlist>
+        <listitem>
+          <para>[bdubbs] - Fix link to Chineese fonts.  Fixes
+          <ulink url="&blfs-ticket-root;3821">#3821</ulink>.</para>
+        </listitem>
+        <listitem>
+          <para>[bdubbs] - Update wording of DRI detection in Xorg
+          configuration.</para>
+        </listitem>
+      </itemizedlist>
+    </listitem>
+    <listitem>
       <para>March 6th, 2013</para>
       <itemizedlist>
         <listitem>

Index: postlfs/security/openssl.xml
===================================================================
--- postlfs/security/openssl.xml	(revision 11065)
+++ postlfs/security/openssl.xml	(revision 11066)
@@ -107,7 +107,11 @@
     </para>
 
 <screen><userinput>patch -Np1 -i ../openssl-&openssl-version;-fix_manpages-1.patch &amp;&amp;
-./config --prefix=/usr --openssldir=/etc/ssl shared zlib-dynamic &amp;&amp;
+./config --prefix=/usr         \
+         --openssldir=/etc/ssl \
+         shared                \
+         zlib-dynamic &amp;&amp;
 make</userinput></screen>
 
     <para>

Index: x/installing/xorg-config.xml
===================================================================
--- x/installing/xorg-config.xml	(revision 11065)
+++ x/installing/xorg-config.xml	(revision 11066)
@@ -47,11 +47,15 @@
 
     <para>
       To check if DRI drivers are installed properly, check the log file
-<filename>/var/log/Xorg.0.log</filename> for statements like:
+      <filename>/var/log/Xorg.0.log</filename> for statements such as:
     </para>
 
 <screen><literal>(II) intel(0): direct rendering: DRI2 Enabled</literal></screen>
 
+    <para>or</para>
+<screen><literal>(II) NOUVEAU(0): Loaded DRI module</literal></screen>
     <note>
       <para>
         DRI configuration may differ if you are using alternate drivers, such
@@ -66,14 +70,14 @@
       is only available to <systemitem class="username">root</systemitem> and members
       of the <systemitem class="groupname">video</systemitem> group.
     </para>
+<!--
     <para>
       To see if hardware acceleration is available for your driver, look in
       <filename>/var/log/Xorg.0.log</filename> for statements like:
     </para>
 
 <screen><literal>(II) intel(0): direct rendering: DRI2 Enabled</literal></screen>
+-->
     <para>
       If your driver is supported, add any users that might use X to that group:
     </para>
@@ -81,8 +85,9 @@
 <screen role="root"><userinput>usermod -a -G video <replaceable>&lt;username&gt;</replaceable></userinput></screen>
 
     <para>
-If you have installed two OpenGL demo programs when you installed
-<xref linkend="mesalib"/>, from an X terminal, run <command>glxinfo</command>
+      Another way to determine if DRI is working properly is to use one of the
+      two optionally installed OpenGL demo programs in <xref
+      linkend="mesalib"/>. From an X terminal, run <command>glxinfo</command>
       and look for the phrase:
     </para>
 
@@ -97,23 +102,24 @@
     </para>
 
     <para>
-If DRI2 is enabled, to confirm that DRI2 hardware acceleration is working you can
-(still in the X terminal) run the command
-<command>glxinfo | egrep "(OpenGL vendor|OpenGL renderer|OpenGL version)"</command>
-- if that reports something <emphasis>other than</emphasis>
-<literal>Software Rasterizer</literal> then you have working acceleration for the
-user who ran the command.
+      To confirm that DRI2 hardware acceleration is working, you can (still in
+      the X terminal) run the command <command>glxinfo | egrep "(OpenGL
+      vendor|OpenGL renderer|OpenGL version)"</command>.
+      If that reports something <emphasis>other than</emphasis>
+      <literal>Software Rasterizer</literal> then you have working
+      acceleration for the user who ran the command.
     </para>
 
     <para>
-If your hardware does not have any DRI2 driver available, it will use Software Rasterizer
-for Direct Rendering. In such cases, it is recommended that you use new, LLVM-accelerated,
-Software Rasterizer called LLVMPipe. In order to build LLVMPipe just make sure that
-<xref linkend="llvm"/> is present at MesaLib build time. Please note that all decoding is
-done on CPU instead of GPU, so expect that things run slower. To check if you are using
-LLVMpipe, run
-<command>glxinfo | egrep "(OpenGL vendor|OpenGL renderer|OpenGL version)"</command>.
-An example output is shown below:
+      If your hardware does not have any DRI2 driver available, it will use a
+      Software Rasterizer for Direct Rendering. In such cases, you can use a new,
+      LLVM-accelerated, Software Rasterizer called LLVMPipe. In order to build
+      LLVMPipe just make sure that <xref linkend="llvm"/> is present at MesaLib
+      build time. Note that all decoding is done on the CPU instead of the GPU,
+      so the display will run slower than with hardware acceleration.  
+      To check if you are using LLVMpipe,
+      review the output ot the glxinfo command above.  An example of the
+      output using the Software Rasterizer is shown below:
     </para>
 
 <screen><computeroutput>OpenGL vendor string: VMware, Inc.
@@ -121,18 +127,19 @@
 OpenGL version string: 2.1 Mesa 9.1-devel (git-cb3b172)</computeroutput></screen>
 
     <para>
-You can always force LLVMPipe by exporting <envar>LIBGL_ALWAYS_SOFTWARE=1</envar>
-environment variable.
+      You can also force LLVMPipe by exporting the <envar>LIBGL_ALWAYS_SOFTWARE=1</envar>
+      environment variable when starting Xorg.
     </para>
 
     <para>
-Again, if you have built Mesa OpenGL demos, you can also run the test program
-<command>glxgears</command>. This program brings up a window with three gears
-turning. The X terminal will display how many frames were drawn every five
-seconds, so this is a reasonable benchmark. The window is scalable, and the
-frames drawn per second is highly dependent on the size of the window. On some
-hardware, <command>glxgears</command> will run synchronized to vertical refresh
-and framerate will be approximately the same as the monitor refresh rate.
+      Again, if you have built the Mesa OpenGL demos, you can also run the test
+      program <command>glxgears</command>. This program brings up a window with
+      three gears turning. The X terminal will display how many frames were
+      drawn every five seconds, so this will give a rough benchmark. The window
+      is scalable, and the frames drawn per second is highly dependent on the
+      size of the window. On some hardware, <command>glxgears</command> will
+      run synchronized with the vertical refresh signal and the frame rate will
+      be approximately the same as the monitor refresh rate.
     </para>
 
     </sect2>
@@ -150,14 +157,14 @@
     <para>
       In order to use PRIME for GPU switching, make sure that you are using Linux
       Kernel 3.4 or later (recommended). You will need latest DRI and DDX drivers
-for your hardware and <application>Xorg Server</application> 1.13 with an
-optional patch applied.
+      for your hardware and <application>Xorg Server</application> 1.13 or later
+      with an optional patch applied.
     </para>
 
     <para>
       <application>Xorg Server</application> should load both GPU drivers automaticaly.
       In order to run a GLX application on a discrete GPU, you will need to export
-<envar>DRI_PRIME=1</envar> environment variable. For example,
+      the <envar>DRI_PRIME=1</envar> environment variable. For example,
 
 <screen><userinput>DRI_PRIME=1 glxinfo | egrep "(OpenGL vendor|OpenGL renderer|OpenGL version)"</userinput></screen>
 
@@ -291,7 +262,7 @@
         </listitem>
         <listitem>
           <para><ulink
-url="http://cle.linux.org.tw/fonts/FireFly">Firefly New Sung font</ulink>
+          url="http://sourceforge.jp/projects/sfnet_chinesepuppy/downloads/ChineseSupport/Fonts/fireflysung-1.3.0.tar.gz">Firefly New Sung font</ulink>
           - This font provides Chinese coverage. This font is listed in the
           aliases in the
           the <filename class="directory">/etc/fonts/fonts.d</filename>
@@ -299,7 +270,7 @@
         </listitem>
         <listitem>
           <para><ulink
-url="http://cle.linux.org.tw/fonts/Arphic">Arphic fonts</ulink> -
+          url="http://packages.debian.org/sid/fonts-arphic-ukai">Arphic fonts</ulink> -
           A similar set of Chinese fonts to the Firefly New Sung font.
           These fonts are listed in the aliases in the
           <filename class="directory">/etc/fonts/fonts.d</filename> directory
@@ -334,10 +305,14 @@
       more information, please visit the <ulink
       url="http://unifont.org/fontguide/">Unicode Font Guide</ulink>.</para>
 
-<para>As an example, consider the installation of the DejaVu fonts.  From
-the unpacked source directory, run the following commands as the
-<systemitem class="username">root</systemitem> user:</para>
+      <para>Rendered examples of many of the above fonts can be found at this
+      <ulink url="http://homepage.ntlworld.com/zarniwhoop/ttf-font-analysis/">
+      font analysis</ulink> site.</para>
 
+      <para>As a font installation example, consider the installation of the 
+      DejaVu fonts.  From the unpacked source directory, run the following 
+      commands as the <systemitem class="username">root</systemitem> user:</para>
 <screen role="root"><userinput>install -v -d -m755 /usr/share/fonts/dejavu &amp;&amp;
 install -v -m644 *.ttf /usr/share/fonts/dejavu &amp;&amp;
 fc-cache -v /usr/share/fonts/dejavu</userinput></screen>

