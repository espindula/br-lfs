Révision 15985

fichiers modifiés :
M       scripts/blfs-chapter04.php
M       scripts/blfs-chapter06.php
M       scripts/blfs-chapter09.php
M       scripts/blfs-include.php

Log :
Updates to currency scripts through chapter 9

Le robot a traité 13 % du commit anglais
Index: scripts/blfs-chapter04.php
===================================================================
--- scripts/blfs-chapter04.php	(révision 15984)
+++ scripts/blfs-chapter04.php	(révision 15985)
@@ -59,7 +59,6 @@
 
 function get_packages( $package, $dirpath )
 {
-global $exceptions;
   global $regex;
   global $book_index;
   global $url_fix;

Index: scripts/blfs-chapter06.php
===================================================================
--- scripts/blfs-chapter06.php	(révision 15984)
+++ scripts/blfs-chapter06.php	(révision 15985)
@@ -1,113 +1,39 @@
 #! /usr/bin/php
 <?php
 
+include 'blfs-include.php';
 $CHAPTER=6;
 $START_PACKAGE='bluefish';
 $STOP_PACKAGE='qemu';
 
-$book = array();
-$book_index = 0;
+$renames = array();
+$renames[ 'zsh1' ] = 'zsh-doc';
 
-$vers = array();
+$ignores = array();
 
-date_default_timezone_set( "GMT" );
-$date = date( "Y-m-d (D) H:i:s" );
+//$current="bluefish";   // For debugging
 
-// Special cases
-$exceptions = array();
 $regex = array();
 $regex[ 'joe' ] = "/^.*Download joe-(\d[\d\.]+).tar.*$/";
 
 $sf = 'sourceforge.net';
 
-$url_fix[ 0 ] = array( 'pkg'     => 'joe',
-'match'   => '^.*$', 
-'replace' => "http://$sf/projects/joe-editor/files" );
+$url_fix = array (
 
-$url_fix[ 1 ] = array( 'pkg'     => 'vim',
-'match'   => '^.*$', 
-'replace' => "http://mirrors-usa.go-parts.com/pub/vim/unix" );
+  array( 'pkg'     => 'joe',
+         'match'   => '^.*$', 
+         'replace' => "http://$sf/projects/joe-editor/files" ),
 
-$url_fix[ 2 ] = array( 'pkg'     => 'zsh',
-'match'   => '^.*$', 
-'replace' => "http://$sf/projects/zsh/files/zsh" );
+  array( 'pkg'     => 'vim',
+         'match'   => '^.*$', 
+         'replace' => "http://mirrors-usa.go-parts.com/pub/vim/unix" ),
 
-$url_fix[ 3 ] = array( 'pkg'     => 'zsh1',
-'match'   => '^.*$', 
-'replace' => "http://$sf/projects/zsh/files/zsh-doc" );
+  array( 'pkg'     => 'tcsh',
+         'match'   => '^.*$', 
+         'replace' => "http://www.sfr-fresh.com/unix/misc" ),
+);
 
-$url_fix[ 4 ] = array( 'pkg'     => 'tcsh',
-'match'   => '^.*$', 
-'replace' => "http://www.sfr-fresh.com/unix/misc" );
-function find_max( $lines, $regex_match, $regex_replace )
-{
-$a = array();
-foreach ( $lines as $line )
-{
-if ( ! preg_match( $regex_match, $line ) ) continue; 
-
-// Isolate the version and put in an array
-$slice = preg_replace( $regex_replace, "$1", $line );
-if ( "x$slice" == "x$line" ) continue;  // Numbers and whitespace 
-array_push( $a, $slice );     
-}
-// SORT_NATURAL requires php-5.4.0 or later
-rsort( $a, SORT_NATURAL );  // Max version is at the top
-return ( isset( $a[0] ) ) ? $a[0] : 0;
-}
-function find_even_max( $lines, $regex_match, $regex_replace )
-{
-$a = array();
-foreach ( $lines as $line )
-{
-if ( ! preg_match( $regex_match, $line ) ) continue; 
-
-// Isolate the version and put in an array
-$slice = preg_replace( $regex_replace, "$1", $line );
-if ( $slice == $line ) continue; 
-// Skip odd numbered minor versions
-list( $major, $minor ) = explode( ".", $slice . ".0", 2 );
-if ( $minor % 2 == 1 ) continue;
-array_push( $a, $slice );     
-}
-// SORT_NATURAL requires php-5.4.0 or later
-rsort( $a, SORT_NATURAL );  // Max version is at the top
-return ( isset( $a[0] ) ) ? $a[0] : 0;
-}
-function http_get_file( $url )
-{
-exec( "curl -L -s -m30 $url", $dir );
-$s   = implode( "\n", $dir );
-$dir = strip_tags( $s );
-return explode( "\n", $dir );
-}
-function max_parent( $dirpath, $prefix )
-{
-// First, remove a directory
-$dirpath  = rtrim  ( $dirpath, "/" );    // Trim any trailing slash
-$position = strrpos( $dirpath, "/" );
-$dirpath  = substr ( $dirpath, 0, $position );
-$lines = http_get_file( $dirpath );
-$regex_match   = "#${prefix}[\d\.]+/#";
-$regex_replace = "#^.*(${prefix}[\d\.]+)/.*$#";
-$max           = find_max( $lines, $regex_match, $regex_replace );
-return "$dirpath/$max"; 
-}
 function get_packages( $package, $dirpath )
 {
   global $exceptions;
@@ -115,7 +41,7 @@
   global $book_index;
   global $url_fix;
 
-//if ( $book_index != 'nano' ) return 0;
+  if ( isset( $current ) && $book_index != "$current" ) return 0;
 
   // Fix up directory path
   foreach ( $url_fix as $u )
@@ -141,19 +67,11 @@
      }
   }
 
-// Check for ftp
-if ( preg_match( "/^ftp/", $dirpath ) ) 
-{ 
-exec( "echo 'ls -1' | ncftp $dirpath", $lines );
-}
-else // http
-{
-// Customize http directories as needed
+  if ( preg_match( "/^ftp/", $dirpath ) ) $dirpath .= "/";
+  $lines = http_get_file( "$dirpath" );
 
-$lines = http_get_file( $dirpath );
-if ( ! is_array( $lines ) ) return $lines;
-} // End fetch
+  if ( ! is_array( $lines ) ) return $lines;
+  
   if ( isset( $regex[ $package ] ) )
   {
      // Custom search for latest package name
@@ -182,19 +100,9 @@
   if ( $book_index == "nano" )
     return find_max( $lines, "/$package/", "/^.*$package-([\d\.]+).tar.*$/" );
 
-if ( $book_index == "zsh" )
-{
-$dir   = find_max( $lines, '/\d\./', '/^\s*([\d\.]+)\s*$/' );
-$lines = http_get_file( "$dirpath/$dir" );
-}
   // zsh docs 
   if ( $book_index == "zsh1" )
-{
-$dir   = find_max( $lines, '/\d\./', '/^\s*([\d\.]+)\s*$/' );
-$lines = http_get_file( "$dirpath/$dir" );
-return find_max( $lines, '/\d\./', '/^.*zsh-([\d\.]+)-doc.tar.*$/' );
-}
+    return find_max( $lines, '/doc/', '/^.*zsh-([\d\.]+)-doc.tar.*$/' );
 
   // Most packages are in the form $package-n.n.n
   // Occasionally there are dashes (e.g. 201-1)
@@ -220,121 +128,22 @@
    return "/\D*(\d.*\d)\D*$/";
 }
 
-function get_current()
-{
-global $vers;
-global $book;
-$wget_file = "/home/bdubbs/public_html/blfs-book-xsl/wget-list";
-$contents = file_get_contents( $wget_file );
-$wget  = explode( "\n", $contents );
-foreach ( $wget as $line )
-{
-if ( $line == "" ) continue;
-if ( preg_match( "/patch$/", $line ) ) continue;     // Skip patches
-$file = basename( $line );
-$url  = dirname ( $line );
-$file = preg_replace( "/\.tar\..z.*$/", "", $file ); // Remove .tar.?z*$
-$file = preg_replace( "/\.tar$/",       "", $file ); // Remove .tar$
-$file = preg_replace( "/\.gz$/",        "", $file ); // Remove .gz$
-$file = preg_replace( "/\.orig$/",      "", $file ); // Remove .orig$
-$file = preg_replace( "/\.src$/",       "", $file ); // Remove .src$
-$file = preg_replace( "/\.tgz$/",       "", $file ); // Remove .tgz$
-$pattern = get_pattern( $line );
-
-$version = preg_replace( $pattern, "$1", $file );   // Isolate version
-$version = preg_replace( "/^-/", "", $version );    // Remove leading #-
-$basename = strstr( $file, $version, true );
-$basename = rtrim( $basename, "-" );
-$index = $basename;
-while ( isset( $book[ $index ] ) ) $index .= "1";
-
-$book[ $index ] = array( 'basename' => $basename,
-'url'      => $url, 
-'version'  => $version );
-if ( preg_match( "/qemu/", $line ) ) break;
-}
-}
-function html()
-{
-global $CHAPTER;
-global $book;
-global $date;
-global $vers;
-$leftnav = file_get_contents( 'leftnav.html' );
-$f = "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
-'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
-<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
-<head>
-<title>BLFS Chapters 6-8 Package Currency Check - $date</title>
-<link rel='stylesheet' href='currency.css' type='text/css' />
-</head>
-<body>
-$leftnav
-<h1>BLFS Chapters 6-8 Package Currency Check</h1>
-<h2>As of $date GMT</h2>
-<table>
-<tr><th>BLFS Package</th> <th>BLFS Version</th> <th>Latest</th> <th>Flag</th></tr>\n";
-// Get the latest version of each package
-foreach ( $vers as $pkg => $v )
-{
-$v    = $book[ $pkg ][ 'version' ];
-$flag = ( $vers[ $pkg ] != $v ) ? "*" : "";
-
-$name = $pkg;
-if ( $pkg == "vim1" ) $name = 'vim-lang';
-if ( $pkg == "zsh1" ) $name = 'zsh-doc';
-$f .= "<tr><td>$name</td>";
-$f .= "<td>$v</td>";
-$f .= "<td>${vers[ $pkg ]}</td>";
-$f .= "<td class='center'>$flag</td></tr>\n";
-}
-$f .= "</table>
-</body>
-</html>\n";
-file_put_contents( "/home/bdubbs/public_html/chapter$CHAPTER.html", $f );
-}
 get_current();  // Get what is in the book
 
-$start = false;
 // Get latest version for each package 
 foreach ( $book as $pkg => $data )
 {
    $book_index = $pkg; 
 
-if ( $book_index == $START_PACKAGE ) $start = true;
-if ( ! $start ) continue;
    $base = $data[ 'basename' ];
    $url  = $data[ 'url' ];
    $bver = $data[ 'version' ];
 
-echo "book index: $book_index  bver=$bver url=$url \n";
+echo "book index: $book_index $bver $url\n";
 
-//$v = get_packages( $base, $url );
-$v = get_packages( $book_index, $url );
+   $v = get_packages( $base, $url );
 
    $vers[ $book_index ] = $v;
-// Stop at the end of the chapter 
-if ( $book_index == $STOP_PACKAGE ) break; 
 }
 
 html();  // Write html output

Index: scripts/blfs-chapter09.php
===================================================================
--- scripts/blfs-chapter09.php	(révision 15984)
+++ scripts/blfs-chapter09.php	(révision 15985)
@@ -1,21 +1,17 @@
 #! /usr/bin/php
 <?php
 
-$CHAPTER=9;
-$START_PACKAGE='apr';
-$STOP_PACKAGE='xapian-core';
+include 'blfs-include.php';
 
-$book = array();
-$book_index = 0;
+$CHAPTER       = '9';
+$START_PACKAGE = 'apr';
+$STOP_PACKAGE  = 'xapian-core';
 
-$vers = array();
+$renames = array();
+$ignores = array();
 
-date_default_timezone_set( "GMT" );
-$date = date( "Y-m-d (D) H:i:s" );
+//$current="json-c";
 
-// Special cases
-$exceptions = array();
 $regex = array();
 $regex[ 'clucene-core'  ] = "/^.*Download clucene-core-([\d\.]+).tar.*$/";
 $regex[ 'expat'         ] = "/^.*Download expat-([\d\.]+).tar.*$/";
@@ -27,8 +23,6 @@
 $regex[ 'libical'       ] = "/^.*v(\d[\d\.]+\d).*$/";
 $regex[ 'xapian-core'   ] = "/^.*is (\d[\d\.]+\d),.*$/";
 
-//$current="talloc";
 $sf = 'sourceforge.net';
 
 $url_fix = array (
@@ -115,79 +109,18 @@
  array( 'pkg'     => 'talloc',
         'match'   => '^.*$', 
         'replace' => "https://www.samba.org/ftp/talloc" ),
-);
 
-function find_max( $lines, $regex_match, $regex_replace )
-{
-$a = array();
-foreach ( $lines as $line )
-{
-if ( ! preg_match( $regex_match, $line ) ) continue; 
-
-// Isolate the version and put in an array
-$slice = preg_replace( $regex_replace, "$1", $line );
-if ( "x$slice" == "x$line" ) continue;  // Numbers and whitespace 
-//echo "slice=$slice\n";
-array_push( $a, $slice );     
-}
+ array( 'pkg'     => 'icu4c',
+        'match'   => '^.*$', 
+        'replace' => "http://download.icu-project.org/files/icu4c" ),
 
-// SORT_NATURAL requires php-5.4.0 or later
-rsort( $a, SORT_NATURAL );  // Max version is at the top
-return ( isset( $a[0] ) ) ? $a[0] : 0;
-}
+ array( 'pkg'     => 'json-c',
+        'match'   => '^.*$', 
+        'replace' => "https://s3.amazonaws.com/json-c_releases" ),
+);
 
-function find_even_max( $lines, $regex_match, $regex_replace )
-{
-$a = array();
-foreach ( $lines as $line )
-{
-if ( ! preg_match( $regex_match, $line ) ) continue; 
-
-// Isolate the version and put in an array
-$slice = preg_replace( $regex_replace, "$1", $line );
-if ( "x$slice" == "x$line" && ! preg_match( "/[\d\.]+/", $slice ) ) continue; 
-
-// Skip odd numbered minor versions
-list( $major, $minor, $rest ) = explode( ".", $slice . ".0" );
-if ( $minor % 2 == 1 ) continue;
-array_push( $a, $slice );     
-}
-// SORT_NATURAL requires php-5.4.0 or later
-rsort( $a, SORT_NATURAL );  // Max version is at the top
-return ( isset( $a[0] ) ) ? $a[0] : 0;
-}
-function http_get_file( $url )
-{
-exec( "curl -L -s -m30 -A Firefox/22.0 $url", $dir );
-$s   = implode( "\n", $dir );
-$dir = strip_tags( $s );
-return explode( "\n", $dir );
-}
-function max_parent( $dirpath, $prefix )
-{
-// First, remove a directory
-$dirpath  = rtrim  ( $dirpath, "/" );    // Trim any trailing slash
-$position = strrpos( $dirpath, "/" );
-$dirpath  = substr ( $dirpath, 0, $position );
-$lines = http_get_file( $dirpath );
-$regex_match   = "#${prefix}[\d\.]+/#";
-$regex_replace = "#^(${prefix}[\d\.]+)/.*$#";
-$max           = find_max( $lines, $regex_match, $regex_replace );
-return "$dirpath/$max"; 
-}
 function get_packages( $package, $dirpath )
 {
-global $exceptions;
   global $regex;
   global $book_index;
   global $url_fix;
@@ -240,7 +173,7 @@
       $position = strrpos( $dirpath, "/" );
       $dirpath  = substr ( $dirpath, 0, $position );
 
-exec( "echo 'ls -1;bye' | ncftp $dirpath", $lines );
+      $lines = http_get_file( "$dirpath/" );
 
       if ( $book_index == "libsigc++" ) 
         $dir = find_max(      $lines, '/^[\d\.]+$/', '/^([\d\.]+)$/' );
@@ -252,16 +185,14 @@
 
     if ( $book_index == "nspr" )
     {
-// Get the max directory and adjust the directory path
-exec( "echo 'ls -1;bye' | ncftp $dirpath", $lines );
-$dir = find_max( $lines, "/v[\d\.]+.*/", "/^.*v([\d\.]+).*/" );
-$dirpath .= "/v$dir/src";
-exec( "echo 'ls -1;bye' | ncftp $dirpath", $lines );
+      // Get the max directory and adjust the directory path
+      $lines = http_get_file( "$dirpath/" );
+      $dir = find_max( $lines, "/v[\d\.]+.*/", "/^.*v([\d\.]+).*/" );
+      $dirpath .= "/v$dir/src";
     }
 
     // Get listing
-if ( substr( $dirpath, -1 ) != "/" ) $dirpath .= "/";
-exec( "echo 'ls -1;bye' | ncftp $dirpath", $lines );
+    $lines = http_get_file( "$dirpath/" );
   }
   else // http
   {
@@ -293,8 +224,11 @@
     }
 
     // Customize http directories as needed
-$lines = http_get_file( $dirpath );
-if ( ! is_array( $lines ) ) return $lines;
+    if ( $book_index != "json-c")
+    {
+      $lines = http_get_file( $dirpath );
+      if ( ! is_array( $lines ) ) return $lines;
+    }
   } // End fetch
 
   if ( isset( $regex[ $package ] ) )
@@ -306,9 +240,6 @@
         $ver = preg_replace( $regex[ $package ], "$1", $l );
         if ( $ver == $l ) continue;
        
-//if ( $book_index == "libatomic_ops" )
-//  $ver = preg_replace( "/_/", ".", $ver );
         return $ver;  // Return first match of regex
      }
 
@@ -318,11 +249,7 @@
   if ( $book_index == "boost_" )
   {
     $dir   = find_max( $lines, '/\d\.\d\d/', '/^\s*([\d\.]+)\s*$/' );
-//print_r($lines);
     $lines = http_get_file( "$dirpath/$dir" );
-//echo "dirpath/dir=$dirpath/$dir\n";
-//print_r($lines);
     return find_max( $lines, '/^.*boost_[\d_]+.tar.*$/', '/^.*boost_([\d_]+).tar.*$/' );
   }
 
@@ -334,27 +261,26 @@
 
   if ( $book_index == "icu4c" )
   {
-$dir = max_parent( $dirpath, "" );
-$lines = http_get_file( "$dir" );
-return find_max( $lines, '/^.*icu4c-.*-src.tgz.*$/', '/^.*icu4c-([\d_]+)-src.*$/' );
+    $dir   = find_max( $lines, '/\d+\.\d/', '/^(\d+\.\d+)\/.*$/' );
+    $lines = http_get_file( "$dirpath/$dir" );
+    return find_max( $lines, '/icu4c/', '/^.*icu4c-([\d_]+)-src.*$/' );
   }
 
   if ( $book_index == "json-c" )
   {
-$url = "https://s3.amazonaws.com/json-c_releases";
-exec( "curl -L -s $url", $data );
+    exec( "curl -L -s $dirpath", $data ); // wget doesn't seem to work here
+    $xml_parser = xml_parser_create();
+    xml_parse_into_struct( $xml_parser, $data[1], $values );
 
-$xml_parser = xml_parser_create();
-xml_parse_into_struct( $xml_parser, $data[1], $values );
-foreach ( $values as $v )
-if ( $v[ 'tag' ] == "KEY" ) array_push( $lines, $v[ 'value' ] );
-return find_max( $lines, '/^.*json-c.*.tar.*$/', '/^.*json-c-([\d\.]+).tar.*$/' );
+    foreach ( $values as $v )
+      if ( $v[ 'tag' ] == "KEY" ) array_push( $lines, $v[ 'value' ] );
+    
+    return find_max( $lines, '/^.*json-c.*.tar.*$/', '/^.*json-c-([\d\.]+).tar.*$/' );
   }
 
   if ( $book_index == "libdbusmenu-qt" )
@@ -384,9 +310,9 @@
   if ( $book_index == "openobex" )
     return find_max( $lines, '/\d\./', '/^\s*([\d\.]+)\s*$/' );
 
-//print_r($lines);
   if ( $book_index == "qjson" )
     return find_max( $lines, '/\d\./', '/^\s*([\d\.]+)\s*$/' );
   if ( $book_index == "slib" )
@@ -406,17 +332,18 @@
 Function get_pattern( $line )
 {
    // Set up specific pattern matches for extracting book versions
-$match = array();
+   $match = array(
+   
+      array( 'pkg'   => 'libatomic_ops', 
+             'regex' => "/\D*(\d.*\d[a-z]{0,1})\D*$/" ),
 
-$match[ 0 ] = array( 'pkg'   => 'libatomic_ops', 
-'regex' => "/\D*(\d.*\d[a-z]{0,1})\D*$/" );
+      array( 'pkg'   => 'icu4c', 
+             'regex' => "/^.*icu4c-([\d_]+)-src.*$/" ),
 
-$match[ 1 ] = array( 'pkg'   => 'icu4c', 
-'regex' => "/^.*icu4c-([\d_]+)-src.*$/" );
+      array( 'pkg'   => 'libxml2', 
+             'regex' => "/libxml2-([\d\.]+).*$/" ),
+   );
 
-$match[ 2 ] = array( 'pkg'   => 'libxml2', 
-'regex' => "/libxml2-([\d\.]+).*$/" );
    foreach( $match as $m )
    {
       $pkg = $m[ 'pkg' ];
@@ -427,127 +354,22 @@
    return "/\D*(\d.*\d)\D*$/";
 }
 
-function get_current()
-{
-global $vers;
-global $book;
-$wget_file = "/home/bdubbs/public_html/blfs-book-xsl/wget-list";
-$contents = file_get_contents( $wget_file );
-$wget  = explode( "\n", $contents );
-foreach ( $wget as $line )
-{
-if ( $line == "" ) continue;
-if ( preg_match( "/patch$/", $line ) ) continue;     // Skip patches
-$file = basename( $line );
-$url  = dirname ( $line );
-$file = preg_replace( "/\.tar\..z.*$/", "", $file ); // Remove .tar.?z*$
-$file = preg_replace( "/\.tar$/",       "", $file ); // Remove .tar$
-$file = preg_replace( "/\.gz$/",        "", $file ); // Remove .gz$
-$file = preg_replace( "/\.orig$/",      "", $file ); // Remove .orig$
-$file = preg_replace( "/\.src$/",       "", $file ); // Remove .src$
-$file = preg_replace( "/\.tgz$/",       "", $file ); // Remove .tgz$
-$pattern = get_pattern( $line );
-
-$version = preg_replace( $pattern, "$1", $file );   // Isolate version
-$version = preg_replace( "/^-/", "", $version );    // Remove leading #-
-$basename = strstr( $file, $version, true );
-$basename = rtrim( $basename, "-" );
-if ( $basename == "v" ) $basename = "libical";
-$index = $basename;
-while ( isset( $book[ $index ] ) ) $index .= "1";
-$book[ $index ] = array( 'basename' => $basename,
-'url'      => $url, 
-'version'  => $version );
-if ( preg_match( "/^wv/", $line ) ) break;
-}
-}
-function html()
-{
-global $CHAPTER;
-global $book;
-global $date;
-global $vers;
-$leftnav = file_get_contents( 'leftnav.html' );
-$f = "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'
-'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
-<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
-<head>
-<title>BLFS Chapter $CHAPTER Package Currency Check - $date</title>
-<link rel='stylesheet' href='currency.css' type='text/css' />
-</head>
-<body>
-$leftnav
-<div id='top'>
-<h1>BLFS Chapter $CHAPTER Package Currency Check</h1>
-<h2>As of $date GMT</h2>
-</div>
-<table id='table'>
-<tr><th>BLFS Package</th> <th>BLFS Version</th> <th>Latest</th> <th>Flag</th></tr>\n";
-// Get the latest version of each package
-foreach ( $vers as $pkg => $v )
-{
-$v    = $book[ $pkg ][ 'version' ];
-$flag = ( $vers[ $pkg ] != $v ) ? "*" : "";
-
-$name = $pkg;
-if ( $pkg == "boost_"    ) $name = 'boost';
-if ( $pkg == "libpaper_" ) $name = 'libpaper';
-$f .= "<tr><td>$name</td>";
-$f .= "<td>$v</td>";
-$f .= "<td>${vers[ $pkg ]}</td>";
-$f .= "<td class='center'>$flag</td></tr>\n";
-}
-$f .= "</table>
-</body>
-</html>\n";
-file_put_contents( "/home/bdubbs/public_html/chapter$CHAPTER.html", $f );
-}
 get_current();  // Get what is in the book
 
-$start = false;
 // Get latest version for each package 
 foreach ( $book as $pkg => $data )
 {
    $book_index = $pkg; 
 
-if ( $book_index == $START_PACKAGE ) $start = true;
-if ( ! $start ) continue;
    $base = $data[ 'basename' ];
    $url  = $data[ 'url' ];
    $bver = $data[ 'version' ];
 
-echo "book index: $book_index  bver=$bver url=$url \n";
+   echo "book index: $book_index $bver $url\n";
 
-//$v = get_packages( $base, $url );
    $v = get_packages( $book_index, $url );
 
    $vers[ $book_index ] = $v;
-// Stop at the end of the chapter 
-if ( $book_index == $STOP_PACKAGE ) break; 
 }
 
 html();  // Write html output

