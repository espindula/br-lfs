Révision 14964

fichiers modifiés :
   general/prog/java.xml
   general/prog/openjdk.xml
   introduction/welcome/changelog.xml
   packages.ent

Log :
Update to OpenJDK-1.8.0_25

Le robot a traité 16 % du commit anglais
Index: general/prog/java.xml
===================================================================
--- general/prog/java.xml	(révision 14963)
+++ general/prog/java.xml	(révision 14964)
@@ -118,13 +118,8 @@
     <bridgehead renderas="sect3">Java Binary Runtime Dependencies</bridgehead>
     <para role="required">
       <xref linkend="alsa-lib"/>,
-<xref linkend="atk"/>,
-<xref linkend="cairo"/>,
       <xref linkend="cups"/>,
-<xref linkend="gdk-pixbuf"/>,
-<xref linkend="giflib"/>,
-<xref linkend="gtk2"/>,
-<xref linkend="lcms2"/>, and
+      <xref linkend="giflib"/>, and
       <xref linkend="xorg7-lib"/>
     </para>
 

Index: general/prog/openjdk.xml
===================================================================
--- general/prog/openjdk.xml	(révision 14963)
+++ general/prog/openjdk.xml	(révision 14964)
@@ -4,52 +4,58 @@
 ]>
 
 <sect1 id="openjdk"
-xreflabel="OpenJDK-&openjdk-version;/IcedTea-&icedtea-version;">
+       xreflabel="OpenJDK-&openjdk-version;">
   <?dbhtml filename="openjdk.html" ?>
 
   <sect1info>
@@ -57,88 +63,105 @@
     <date>$Date$</date>
   </sect1info>
 
-<title>OpenJDK-&openjdk-version;/IcedTea-&icedtea-version;</title>
+  <title>OpenJDK-&openjdk-version;</title>
 
   <indexterm zone="openjdk">
     <primary sortas="a-OpenJDK">OpenJDK</primary>
   </indexterm>
 
   <sect2 role="package">
-<title>Introduction to OpenJDK and IcedTea</title>
+    <title>Introduction to OpenJDK</title>
 
-<para><application>IcedTea</application> provides a build harness for the
-<application>OpenJDK</application> package, Oracle's open-sourced
-<application>Java</application> development environment.  In order to
-provide a completely free runtime environment, similar to Oracle's closed
-distribution, the <application>IcedTea</application> build harness also
-provides free, and arguably better versions of parts of the JDK which
-have not been open-sourced to date. <application>OpenJDK</application> is
-useful for developing <application>Java</application> programs and provides
-a complete runtime environment to run <application>Java</application>
-programs.</para>
+    <para>
+      <application>OpenJDK</application> is an open-source implementation
+      of Oracle's Java Standard Edition platform.
+      <application>OpenJDK</application> is useful for developing
+      <application>Java</application> programs, and provides a complete
+      runtime environment to run <application>Java</application> programs.
+    </para>
 
     &lfs76_checked;
 
-<note><para>The browser plugin and webstart implementation have been split
-off into a separate project. To provide a complete implementation, you will
-need to later install <xref linkend="icedtea-web"/>.</para></note>
+    <note>
+      <para>
+        A browser plugin and webstart implementation, as well as a
+        pulseaudio sound backend are provided by the Icedtea project. To provide
+        a complete implementation, you will need to later install
+        <xref linkend="icedtea-web"/> and <xref linkend="icedtea-sound"/>.
+      </para>
+    </note>
 
-<para>OpenJDK is GPL'd code, however, it should be explained that there has
-been a special exception made for non-free projects to use these classes in
-their proprietary products.  In similar fashion to the LGPL, which
-allows non-free programs to link to libraries provided by free software,
-the <ulink url="http://openjdk.java.net/legal/gplv2+ce.html">GNU
-General Public License, version 2, with the Classpath Exception</ulink>
-allows third party programs to use classes provided by free software
-without the requirement that the third party software also be free. As with
-the LGPL, any modifications made to the free software portions of a
-third party application, must also be made freely available.</para>
+    <para>
+      OpenJDK is GPL'd code, with a special exception made for non-free
+      projects to use these classes in their proprietary products.
+      In similar fashion to the LGPL, which allows non-free programs to link
+      to libraries provided by free software, the
+      <ulink url="http://openjdk.java.net/legal/gplv2+ce.html">GNU
+      General Public License, version 2, with the Classpath Exception</ulink>
+      allows third party programs to use classes provided by free software
+      without the requirement that the third party software also be free. As
+      with the LGPL, any modifications made to the free software portions of a
+      third party application, must also be made freely available.
+    </para>
 
     <note>
-<para>The IcedTea build environment includes a very thorough, open source
-test suite titled <application>JTreg</application>.
-<application>JTreg</application> is intended to test the just built JDK
-for reasonable compatibility with the closed Oracle JDK.  However, in
-order for an independent implementation to claim compatibility, including
-the Oracle sponsored <application>OpenJDK</application> project, it must
-pass a closed <application>JCK/TCK</application> test suite.  No claims
-of compatibility, even partial compatibility,  may be made without
-passing an approved test suite.</para>
+      <para>
+        The <application>OpenJDK</application> source includes a very
+        thorough, open source test suite using the
+        <application>JTreg</application> test harness. The testing instructions
+        below allow to test the just built JDK for reasonable compatibility
+        with the proprietary Oracle JDK. However, in order for an independent
+        implementation to claim compatibility, it must pass a proprietary
+        <application>JCK/TCK</application> test suite. No claims of
+        compatibility, even partial compatibility, may be made without passing
+        an approved test suite.
+      </para>
 
-<para>Oracle does provide free community access, on a case by case basis,
-to a closed toolkit to ensure 100% compatibility with its proprietary JDK.
-The binary version provided here has not been tested against the
-<ulink url="http://openjdk.java.net/groups/conformance/JckAccess/jck-access.html">
-TCK</ulink>. Any version that is built using the instructions given,
-cannot claim to be compatible with the proprietary JDK, without the user
-applying for, and completing the compatibility tests themselves.</para>
+      <para>
+        Oracle does provide free community access, on a case by case basis, to
+        a closed toolkit to ensure 100% compatibility with its proprietary JDK.
+        Neither the binary version provided on the <xref linkend="java"/> page
+        nor the JVM built with the instructions below have been tested against
+        the <ulink
+  url="http://openjdk.java.net/groups/conformance/JckAccess/jck-access.html">
+        TCK</ulink>. Any version that is built using the instructions given,
+        cannot claim to be compatible with the proprietary JDK, without the
+        user applying for, and completing the compatibility tests themselves.
+      </para>
 
      <para>
        With that in mind, the binaries produced using this build method are
@@     @@
     <bridgehead renderas="sect3">Source Package Information</bridgehead>
     <itemizedlist spacing="compact">
       <listitem>
-<para>IcedTea Source Package
+        <para>OpenJDK Root Package
           <simplelist>
-<member>Download: <ulink url="&icedtea-download;"/></member>
-<member>Download MD5 sum: &icedtea-md5sum;</member>
-<member>Download Size: &icedtea-size;</member>
+            <member>Download: <ulink url="&ojdk-download;"/></member>
+            <member>Download MD5 sum: &ojdk-md5sum;</member>
+            <member>Download Size: &ojdk-size;</member>
           </simplelist>
         </para>
       </listitem>
     </itemizedlist>
 
-<para>The following may be downladed separately or be done as a
-part of the <command>make</command> process. For convenience 
-the BLFS editors have made the files available in an LFS website.
-The files are not distributed with versions, but extracted from
-the OpenJDK version control system at specified (tagged) points.</para>
+    <para>
+      The following files may be downladed from the OpenJDK mercurial
+      repository using the addresses <ulink
+      url="&ojdk-repo;&lt;component&gt;/archive/&ojdk-tarball;"/>,
+      where &lt;component&gt; is the name of the JVM component (corba,
+      hostspot, and so on), but that involves renaming the downloaded files,
+      and renaming the extracted directories.
+      For convenience, the BLFS editors have made the files available in an LFS
+      website.
+    </para>
 
     <itemizedlist spacing="compact">
       <listitem>
@@ -160,15 +183,6 @@
         </para>
       </listitem>
       <listitem>
-<para>IcedTea Build Source
-<simplelist>
-<member>Download: <ulink url="&openjdk-download;"/></member>
-<member>Download MD5 sum: &openjdk-md5sum;</member>
-<member>Download Size: &openjdk-size;</member>
-</simplelist>
-</para>
-</listitem>
-<listitem>
         <para>JAXP Source
           <simplelist>
             <member>Download: <ulink url="&jaxp-download;"/></member>
@@ -196,7 +210,7 @@
         </para>
       </listitem>
       <listitem>
-<para>OpenJDK Source
+        <para>JDK Source
           <simplelist>
             <member>Download: <ulink url="&jdk-download;"/></member>
             <member>Download MD5 sum: &jdk-md5sum;</member>
@@ -205,100 +219,64 @@
         </para>
       </listitem>
       <listitem>
-<para>Estimated disk space required: &openjdk-buildsize;</para>
+        <para>Nashorn Source
+          <simplelist>
+            <member>Download: <ulink url="&nashorn-download;"/></member>
+            <member>Download MD5 sum: &nashorn-md5sum;</member>
+            <member>Download Size: &nashorn-size;</member>
+          </simplelist>
+        </para>
       </listitem>
       <listitem>
-<para>Estimated build time: &openjdk-time;</para>
+        <para>Estimated disk space required: &ojdk-buildsize;</para>
       </listitem>
+      <listitem>
+        <para>Estimated build time: &ojdk-time;</para>
+      </listitem>
     </itemizedlist>
 
     <bridgehead renderas="sect3">Additional Downloads</bridgehead>
 
-<bridgehead renderas="sect4">Required Patches</bridgehead>
     <itemizedlist spacing='compact'>
       <listitem>
         <para>
-<ulink
-url="&patch-root;/icedtea-&icedtea-version;-add_cacerts-1.patch"/>
+          Optional package (to get an icon for the
+          <filename>openjdk-8-policytool.desktop</filename> file):
+          <ulink url="&icedtea-web-download;"/>
         </para>
       </listitem>
       <listitem>
         <para>
-<ulink
-url="&patch-root;/icedtea-&icedtea-version;-fixed_paths-1.patch"/>
+          Optional test harness: <ulink url="&jtreg-download;"/>
         </para>
       </listitem>
-<listitem>
-<para>
-<ulink
-url="&patch-root;/icedtea-&icedtea-version;-fix_new_giflib-1.patch"/>
-</para>
-</listitem>
-<listitem>
-<para>
-<ulink
-url="&patch-root;/icedtea-&icedtea-version;-fix_tests-1.patch"/>
-</para>
-</listitem>
     </itemizedlist>
 
-<bridgehead renderas="sect4">Required JAR</bridgehead>
-<itemizedlist spacing='compact'>
-<listitem>
-<para>Rhino Java Script
-<simplelist>
-<member>Download: <ulink url="&rhino-download;"/></member>
-<member>Download MD5 sum: &rhino-md5sum;</member>
-<member>Download Size: &rhino-size;</member>
-</simplelist>
-</para>
-</listitem>
-</itemizedlist>
-<bridgehead renderas="sect4">Optional package (to obtain an icon for the
-<filename>openjdk-7-policytool.desktop</filename> file)</bridgehead>
-<itemizedlist spacing='compact'>
-<listitem>
-<para>
-<ulink url="&icedtea-web-download;"/>
-</para>
-</listitem>
-</itemizedlist>
     <bridgehead renderas="sect3">OpenJDK Dependencies</bridgehead>
 
     <bridgehead renderas="sect4">Required Dependencies</bridgehead>
@@     @@
      An existing binary (<xref linkend="java"/> or an earlier built
       version of this package),
       <xref linkend="alsa-lib"/>,
-<xref linkend="apache-ant"/>,
-<xref linkend="cacerts"/>,
       <xref linkend="cpio"/>,
       <xref linkend="cups"/>,
-<xref linkend="gtk2"/>,
-<xref linkend="giflib"/>,
       <xref linkend="unzip"/>,
-<xref linkend="wget"/>,
       <xref linkend="which"/>,
      <xref linkend="xorg7-lib"/>, and
       <xref linkend="zip"/>
@@     @@
 
     <bridgehead renderas="sect4">Recommended</bridgehead>
     <para role="recommended">
-<xref linkend="junit"/> and
-<xref linkend="nss"/>
+      <xref linkend="cacerts"/> and
+      <xref linkend="giflib"/>
     </para>
 
     <bridgehead renderas="sect4">Optional</bridgehead>
     <para role="optional">
-<xref linkend="libxslt"/>,
-<xref linkend="lsb-release"/>,
-<xref linkend="mercurial"/>,
-<xref linkend="mitkrb"/>,
-<!-- Audio support has beeen moved to icedtea-sound
-<xref linkend="pulseaudio"/>, --> and
-<xref linkend="xorg-server"/> (for the tests)
+      <xref linkend="mercurial"/> and
+      <xref linkend="twm"/> (for the tests)
     </para>
 
     <para condition="html" role="usernotes">User Notes:
@@ -309,119 +287,167 @@
   <sect2 role="installation">
     <title>Installation of OpenJDK</title>
 
-<note><para>The source build of OpenJDK requires <xref
-linkend="apache-ant"/>.  You'll need to build that first to satisfy the
-circular dependency, and return to this section to continue building
-OpenJDK.</para></note>
+    <para>
+      Unlike other packages in BLFS, the <application>OpenJDK</application>
+      source packages are distributed in multiple tar balls. You need to first
+      extract the source root from <filename>&ojdk-tarball;</filename>, change
+      into the extracted directory, then proceed with the following
+      instructions:
+    </para>
 
-<para>Unlike other packages in BLFS, the <application>OpenJDK</application>
-source packages are distributed in multiple downloads. Since the IcedTea
-build harness will be used to build <application>OpenJDK</application>,
-begin by extracting the IcedTea package and changing into the
-extracted directory.</para>
+<screen><userinput>tar -xf ../corba.tar.xz      &amp;&amp;
+tar -xf ../hotspot.tar.xz    &amp;&amp;
+tar -xf ../jaxp.tar.xz       &amp;&amp;
+tar -xf ../jaxws.tar.xz      &amp;&amp;
+tar -xf ../jdk.tar.xz        &amp;&amp;
+tar -xf ../langtools.tar.xz  &amp;&amp;
+tar -xf ../nashorn.tar.xz</userinput></screen>
 
-<para>The IcedTea <application>OpenJDK</application> distribution requires
-that <filename>js.jar</filename> (from the Rhino package) be in place in
-order to provide a java-script implementation for the free JDK. If you have
-not installed the js.jar file in another way, do so with the following
-commands as the <systemitem class="username">root</systemitem> user:</para>
+    <para>
+      If you have downloaded the test harness, unpack it too:
+    </para>
 
-<screen role="root"><userinput>unzip ../rhino1_7R4.zip             &amp;&amp;
-install -v -d -m755 /usr/share/java &amp;&amp;
-install -v -m755 rhino1_7R4/*.jar /usr/share/java</userinput></screen>
+<screen><userinput>tar -xf ../jtreg&jtreg-version;.tar.gz</userinput></screen>
 
-<para>As mentioned previously, <application>OpenJDK</application> is
-composed of several individual projects of the proprietary
-<application>JDK</application> that have been relicensed under an open
-source license.  If you have already downloaded all of the individual
-components, place them into the source tree with the following
-commands:</para>
+<!--TODO: it might be better to add instructions for the cacerts file at
+this place and to use the switch "with-cacerts-file" -->
 
-<screen><userinput>cp -v ../corba.tar.bz2     . &amp;&amp;
-cp -v ../hotspot.tar.bz2   . &amp;&amp;
-cp -v ../jaxp.tar.bz2      . &amp;&amp;
-cp -v ../jaxws.tar.bz2     . &amp;&amp;
-cp -v ../jdk.tar.bz2       . &amp;&amp;
-cp -v ../langtools.tar.bz2 . &amp;&amp;
-cp -v ../openjdk.tar.bz2   .</userinput></screen>
+    <para>
+      Fix an issue with the new (since 5.1.0) giflib API:
+    </para>
 
-<para>Apply a patch to generate a valid cacerts file using the system CA
-certificates:</para>
+<screen><userinput>sed -e 's/DGifCloseFile(gif/&amp;, NULL/' \
+    -e '/DGifOpen/s/c)/c, NULL)/'     \
+    -i jdk/src/share/native/sun/awt/splashscreen/splashscreen_gif.c</userinput></screen>
 
-<screen><userinput>patch -Np1 -i ../icedtea-&icedtea-version;-add_cacerts-1.patch</userinput></screen>
+    <para>
+      Fix a bug in a shell script used to set the flags for
+      <command>make</command>:
+    </para>
 
-<para>Apply a patch to replace fixed paths with ones appropriate for
-BLFS:</para>
+<screen><userinput>sed 's/\([ \t]\)\]\([^\]\)/\1I]\2/g' \
+    -i hotspot/make/linux/makefiles/adjust-mflags.sh</userinput></screen>
 
-<screen><userinput>patch -Np1 -i ../icedtea-&icedtea-version;-fixed_paths-1.patch</userinput></screen>
+    <note>
+      <para>
+        Before proceeding, you should ensure that your environment
+        <envar>PATH</envar> variable contains the location of the Java
+        compilers used for bootstrapping <application>OpenJDK</application>.
+        This is the only requirement for the environment. Modern Java
+        installations do not need <envar>JAVA_HOME</envar> and
+        <envar>CLASSPATH</envar> is not used here. Furthermore, OpenJDK
+        developers recommand to unset <envar>JAVA_HOME</envar>.
+      </para>
 
-<para>Apply a patch to adapt the code to the new giflib API:</para>
+      <para>
+        The build system does not support the <option>-j</option> switch in
+        <envar>MAKEFLAGS</envar>.
+      </para>
+    </note>
 
-<screen><userinput>patch -Np1 -i ../icedtea-&icedtea-version;-fix_new_giflib-1.patch</userinput></screen>
+    <para>Configure and build the package with the following commands
+    (--with-milestone value can be modified to fit user preferences):</para>
 
-<para>Apply a patch to exclude known broken tests from the test
-suite:</para>
+<screen><userinput>unset JAVA_HOME               &amp;&amp;
+sh ./configure                \
+   --with-update-version=&ojdk-upd;   \
+   --with-build-number=&ojdk-bd;    \
+   --with-milestone=BLFS      \
+   --enable-unlimited-crypto  \
+   --with-zlib=system         \
+   --with-giflib=system       &amp;&amp;
+make DEBUG_BINARIES=true all</userinput></screen>
 
-<screen><userinput>patch -Np1 -i ../icedtea-&icedtea-version;-fix_tests-1.patch</userinput></screen>
+    <para>
+      It seems that the test infrastructure of OpenJDK is a work in
+      progress, so that testing the newly built JVM involves several steps.
+      First, it is better to run the test suite in a frame buffer on a
+      different display, using Xvfb:
+    </para>
 
-<note>
-<para>
-Before proceeding, you should ensure that your environment is
-properly set for building <application>OpenJDK</application>. First,
-review the content of the <envar>ANT_HOME</envar> variable.
-Second, the <envar>PATH</envar> variable should contain the paths to
-the <command>java</command> and <command>ant</command> executables.
-Last, the <envar>CLASSPATH</envar> variable should be set as
-explained on the <xref linkend="java"/> and <xref linkend="junit"/>
-pages.
-</para>
-</note>
-<para>Configure and build the package with the following commands
-(--with-pkgversion and --with-version-suffix values can be modified to fit
-user preferences):</para>
+<!-- Careful with the && below:
+"export DISPLAY=... && somecommand &" exports only DISPLAY to "somecommand"
+but not to the current environment, and
+"echo $! .... &&" does not echo the right PID. SO all && suppressed.-->
+<screen role='nodump'><userinput>if [ -n "$DISPLAY" ]; then
+  OLD_DISP=$DISPLAY
+fi
+export DISPLAY=:20
+nohup Xvfb $DISPLAY                              \
+           -fbdir $(pwd)                         \
+           -pixdepths 8 16 24 32 > Xvfb.out 2>&amp;1 &amp;
+echo $! > Xvfb.pid
+echo Waiting for Xvfb to initialize; sleep 1
+nohup twm -display $DISPLAY \
+          -f /dev/null > twm.out 2>&amp;1            &amp;
+echo $! > twm.pid
+echo Waiting for twm to initialize; sleep 1
+xhost +</userinput></screen>
 
-<screen><userinput>unset JAVA_HOME                                               &amp;&amp;
-./autogen.sh                                                  &amp;&amp;
-./configure --with-jdk-home=/opt/OpenJDK-&openjdk-version;-bin         \
---with-version-suffix=BLFS                        \
---enable-nss                                      \
---disable-system-kerberos                         \
---with-parallel-jobs                              &amp;&amp;
-make</userinput></screen>
+    <para>
+      Then, it is necessary to modify some files:
+    </para>
 
-<note><para>If you have not installed the tarballs specified above,
-they will be automatically downloaded here.</para></note>
+<screen role='nodump'><userinput>echo -e "
+jdk_all = :jdk_core           \\
+          :jdk_svc            \\
+          :jdk_beans          \\
+          :jdk_imageio        \\
+          :jdk_sound          \\
+          :jdk_sctp           \\
+          com/sun/awt         \\
+          javax/accessibility \\
+          javax/print         \\
+          sun/pisces          \\
+          com/sun/java/swing" >> jdk/test/TEST.groups &amp;&amp;
+sed -e 's/all:.*jck.*/all: jtreg/' \
+    -i langtools/test/Makefile</userinput></screen>
 
-<para>To test the results, issue: <command>make jtregcheck</command>. The
-included version of <application>jtreg</application> is old, and the test
-suite is also very dependent on the host system and the environment that it
-is run in. You should expect to see anywhere between 40 and 100 failures in
-jdk with up to 10 errors in the tests themselves.  The majority of the
-6000+ tests should pass. The reason for the greatly varying results is due
-to how stringent the testing environment must be. Varying architectures,
-different versions of dependent libraries, unexpected X Window environment
-and window managers, the CA certificates used to generate the
-<filename>cacerts</filename> file, and even any user input or power
-management or screen saver interruptions during the testing can lead to
-various failures. While the known broken tests have been removed, with the
-fix_tests patch above, the graphics tests failures cannot be pre-determined
-(short of removing them all). The best bet for the minimal number of
-failures is to run the test suite in a framebuffer on a different screen
-(Xvfb). Even still, disk I/O can cause failures.</para>
+    <para>
+      Some variables have to be set:
+    </para>
 
-<screen role='nodump'><userinput>export DISPLAY=:20     &amp;&amp;
-Xvfb :20 -screen 0 1x1x24 -ac&amp;
-echo $!>  Xvfb.pid     &amp;&amp;
-make -k jtregcheck     &amp;&amp;
+<screen role='nodump'><userinput>JT_JAVA=$(type -p javac | sed 's@/bin.*@@') &amp;&amp;
+JT_HOME=$(pwd)/jtreg                        &amp;&amp;
+PRODUCT_HOME=$(echo $(pwd)/build/*/images/j2sdk-image)</userinput></screen>
+    <para>
+      The tests are run as follows:
+    </para>
+<screen role='nodump'><userinput>LANG=C make -k -C test                      \
+            JT_HOME=${JT_HOME}              \
+            JT_JAVA=${JT_JAVA}              \
+            PRODUCT_HOME=${PRODUCT_HOME} all &amp;&amp;
+LANG=C ${JT_HOME}/linux/bin/jtreg -a -v:fail,error \
+                -dir:$(pwd)/hotspot/test    \
+                -k:\!ignore                 \
+                -jdk:${PRODUCT_HOME}        \
+                :jdk</userinput></screen>
+    <para>
+      The test results can be compared to
+      <ulink url="http://download.java.net/openjdk/testresults/8/">these
+      results</ulink>.
+      Finally, stop the virtual frame buffer and clean up:
+    </para>
+<screen role='nodump'><userinput>kill -9 `cat twm.pid`  &amp;&amp;
 kill -9 `cat Xvfb.pid` &amp;&amp;
-unset DISPLAY          &amp;&amp;
-rm -f Xvfb.pid</userinput></screen>
+rm -f Xvfb.out twm.out &amp;&amp;
+rm -f Xvfb.pid twm.pid &amp;&amp;
+if [ -n "$OLD_DISP" ]; then
+  DISPLAY=$OLD_DISP
+fi</userinput></screen>
 
     <para>Install the package with the following commands as the
     <systemitem class="username">root</systemitem> user:</para>
 
-<screen role="root"><userinput>chmod 0644 openjdk.build/j2sdk-image/lib/sa-jdi.jar   &amp;&amp;
-cp -R openjdk.build/j2sdk-image /opt/OpenJDK-&openjdk-version; &amp;&amp;
+<screen role="root"><userinput>find build/*/images/j2sdk-image -iname \*.jar -exec chmod a+r {} \; &amp;&amp;
+chmod a+r build/*/images/j2sdk-image/lib/ct.sym &amp;&amp;
+find build/*/images/j2sdk-image -iname \*.diz -delete &amp;&amp;
+find build/*/images/j2sdk-image -iname \*.debuginfo -delete &amp;&amp;
+cp -R build/*/images/j2sdk-image /opt/OpenJDK-&openjdk-version; &amp;&amp;
 chown -R root:root /opt/OpenJDK-&openjdk-version;</userinput></screen>
 
     <para>If desired, you may install a .desktop file corresponding to an entry
@@ -436,12 +462,12 @@
 
 <screen role="root"><userinput>mkdir -pv /usr/share/applications &amp;&amp;
 
-cat &gt; /usr/share/applications/openjdk-7-policytool.desktop &lt;&lt; "EOF" &amp;&amp;
+cat &gt; /usr/share/applications/openjdk-8-policytool.desktop &lt;&lt; "EOF" &amp;&amp;
 <literal>[Desktop Entry]
-Name=OpenJDK Java 7 Policy Tool
-Name[pt_BR]=OpenJDK Java 7 - Ferramenta de Pol&#237;tica
-Comment=OpenJDK Java 7 Policy Tool
-Comment[pt_BR]=OpenJDK Java 7 - Ferramenta de Pol&#237;tica
+Name=OpenJDK Java Policy Tool
+Name[pt_BR]=OpenJDK Java - Ferramenta de Pol&#237;tica
+Comment=OpenJDK Java Policy Tool
+Comment[pt_BR]=OpenJDK Java - Ferramenta de Pol&#237;tica
 Exec=/opt/jdk/bin/policytool
 Terminal=false
 Type=Application
@@ -461,41 +487,78 @@
   <sect2 role="commands">
     <title>Command Explanations</title>
 
-<para><command>./autogen.sh</command>: This command forces rebuilding of
-auto-generated files to account for new options added to
-<filename>configure</filename>.</para>
+    <para>
+      <command>sh configure...</command>: the top level
+      <filename>configure</filename> is a wrapper around the autotools one.
+      It is not executable and must be run through <command>sh</command>.
+    </para>
 
-<para><parameter>--with-jdk-home</parameter>: This switch provides the
-location of the temporary <application>JDK</application>.</para>
+    <para>
+      <option>--with-boot-jdk</option>: This switch provides the
+      location of the temporary <application>JDK</application>. It is normally
+      not needed if <command>java</command> is found in the <envar>PATH</envar>.
+    </para>
 
-<para><option>--with-pkgversion</option>: This switch can be used
-to modify the version string in addition to "IcedTea".</para>
+    <para>
+      <parameter>--with-update-version</parameter>: Currently, the build
+      system does not include the update number in the version string. It has
+      to be specified here.
+    </para>
 
-<para><parameter>--with-version-suffix</parameter>: This switch appends 
-the given text to the JDK version string.</para>
+    <para>
+      <parameter>--with-build-number</parameter>: Again, the build
+      system does not include the build	 number in the version string. It has
+      to be specified here too.
+    </para>
 
-<para><parameter>--enable-nss</parameter>: Enable inclusion of NSS
-security provider.</para>
+    <para>
+      <parameter>--with-milestone</parameter>: Used to customize the
+      version string.
+    </para>
 
-<para><parameter>--disable-system-kerberos</parameter>: Remove this switch,
-if <xref linkend="mitkrb"/> is installed.</para>
+    <para>
+      <parameter>--enable-unlimited-crypto</parameter>: Because of limitations
+      on the usage of cryptography in some countries, there is the possibility
+      to limit the size of encryption keys and the use of some algorithms in a
+      policy file. This switch allows to ship a policy file with no
+      restriction. It is the responsability of the user to ensure proper
+      adherence to the law.
+    </para>
 
-<para><parameter>--with-parallel-jobs</parameter>: Allows to set the number
-of jobs for <command>make</command> equal to the number of processors plus
-one. Note that the default is 2 if this option is not specified. You have to
-explicitely set <option>--with-parallel-jobs=1</option> to disable
-parallel jobs. The SBU given above are with parallel jobs
-disabled.</para>
+    <para>
+      <parameter>--with-zlib=system, --with-giflib=system</parameter>: Allows
+      to use the system libraries instead of the bundled ones.
+    </para>
 
-<para><command>chmod -v 0644 ...sa-jdi.jar</command>: Fix permissions
-in a generated file so all users can access it.</para>
-<!-- Now part of icedtea-sound
-<para><option>- -enable-pulse-java</option>: This switch enables
-building of the pulseaudio libraries (needed to provide a complete
-implementation that is reasonably compatible with the proprietary
-JDK). <xref linkend="pulseaudio"/> needs to be installed.</para>
--->
+    <para>
+      <option>--with-jobs=N</option>: Allows to set the number
+      of jobs for <command>make</command> equal to N. The default is the
+      result of a calculation involving the available memory and the number
+      of processors. The SBU given above are with parallel jobs disabled.
+    </para>
 
+    <para>
+      <option>--with-cacerts-file=...</option>: Specifies where to find a
+      <filename>cacerts</filename> file. Otherwise, an empty one is created.
+      You can get it from an earlier version of the package, or using the
+      script below to generate one.
+    </para>
+    <para>
+      <command>make DEBUG_BINARIES=true all</command>: The build fails
+      if DEBUG_BINARIES is not set to true.
+    </para>
+    <para>
+      <command>find ... -iname '*.jar' -exec chmod a+r {} \;</command>
+      and following line: Fix permission in some library files, in order to
+      allow all users to access them.
+    </para>
+    <para>
+      <command>find ... -iname '*.diz' -delete</command>: This command and the
+      the next one remove redundant files.
+    </para>
   </sect2>
 
   <sect2 role="configuration"
@@ -506,11 +569,14 @@
     <sect3>
       <title>Configuration Information</title>
 
-<para>There are now two <application>OpenJDK</application> SDKs
-installed in <filename>/opt</filename>. You should decide on which one
-you would like to use as the default. For example if you decide to use
-the precompiled <application>OpenJDK</application>, do the following as
-the <systemitem class="username">root</systemitem> user:</para>
+      <para>
+        There are now two <application>OpenJDK</application> SDKs installed
+        in <filename class="directory">/opt</filename>. You should decide on
+        which one you would like to use as the default. For example if you
+        decide to use the precompiled <application>OpenJDK</application>, do
+        the following as the <systemitem class="username">root</systemitem>
+        user:
+      </para>
 
 <screen role="root"><userinput>ln -v -nsf OpenJDK-&openjdk-version;-bin /opt/jdk</userinput></screen>
 
@@ -564,8 +630,12 @@
     user:</para>
 
 <screen role="root"><userinput>cat >> /etc/profile.d/extrapaths.sh &lt;&lt; "EOF" &amp;&amp;
-# Begin Java addition
-<literal>pathappend /opt/jdk/man       MANPATH
+<literal># Begin Java addition
+if ! [ -n $MANPATH ]; then
+  MANPATH=:/opt/jdk/man
+else
+  pathappend /opt/jdk/man       MANPATH
+fi
 # End Java addition</literal>
 EOF
 
@@ -578,6 +648,7 @@
 # End Java addition</literal>
 EOF
 
+mkdir -p /var/cache/man
 mandb -c /opt/jdk/man</userinput></screen>
 
     <para>To test if the man pages are correctly installed, issue
@@ -590,24 +661,14 @@
       <title>Install or update the JRE Certificate Authority Certificates
       (cacerts) file</title>
 
-<para>Use the following procedure to check if the
-<filename>cacerts</filename> file was successfully installed during the
-OpenJDK build. Also, if the <xref linkend="cacerts"/> have been updated,
-the following instructions will generate a new JRE
-<filename>cacerts</filename> file. First, check if the
-<filename>cacerts</filename> have been successfully installed: </para>
+      <para>
+        Use the following procedure to install the
+        <filename>cacerts</filename> or to generate a new one if
+        <xref linkend="cacerts"/> have been updated. First, if it is not
+        already present, generate the <command>mkcacerts</command> script
+        as the <systemitem class="username">root</systemitem> user:
+      </para>
 
-<screen role="root"><userinput>cd /opt/jdk
-bin/keytool -list -keystore jre/lib/security/cacerts</userinput></screen>
-<para>At the prompt "Enter keystore password:", press the "Enter" key if
-there is no keystore password defined. If the
-<filename>cacerts</filename> were installed correctly, you will see a
-list of the certificates with related information for each one. If not,
-you need to manually install them. First, generate the
-<command>mkcacerts</command> script as the
-<systemitem class="username">root</systemitem> user:</para>
 <screen role="root"><userinput>cat &gt; /opt/jdk/bin/mkcacerts &lt;&lt; "EOF"
 <literal>#!/bin/sh
 # Simple script to extract x509 certificates and create a JRE cacerts file.
@@ -859,9 +920,9 @@
       <segtitle>Installed Directory</segtitle>
 
       <seglistitem>
-<seg>appletviewer, apt, extcheck, idlj, jar,
+        <seg>appletviewer, extcheck, idlj, jar,
         jarsigner, java, javac, javadoc, javah, javap, java-rmi.cgi,
-jcmd, jconsole, jdb, jhat, jinfo, jmap, jps,
+        jcmd, jconsole, jdb, jdeps, jhat, jinfo, jjs, jmap, jps,
         jrunscript, jsadebugd, jstack, jstat, jstatd, keytool, mkcacerts,
         native2ascii, orbd, pack200, policytool, rmic, rmid, rmiregistry,
         schemagen, serialver, servertool, tnameserv, unpack200,
@@ -880,23 +941,13 @@
       <varlistentry id="appletviewer">
         <term><command>appletviewer</command></term>
         <listitem>
-<para>allows you to run applets outside of a web browser.</para>
+          <para>allows to run applets outside of a web browser.</para>
           <indexterm zone="openjdk appletviewer">
             <primary sortas="b-appletviewer">appletviewer</primary>
           </indexterm>
         </listitem>
       </varlistentry>
 
-<varlistentry id="apt">
-<term><command>apt</command></term>
-<listitem>
-<para>is an annotation processing tool.</para>
-<indexterm zone="openjdk apt">
-<primary sortas="b-apt">apt</primary>
-</indexterm>
-</listitem>
-</varlistentry>
       <varlistentry id="extcheck">
         <term><command>extcheck</command></term>
         <listitem>
@@ -1040,10 +1091,21 @@
         </listitem>
       </varlistentry>
 
+      <varlistentry id="jdeps">
+        <term><command>jdeps</command></term>
+        <listitem>
+          <para>shows the package-level or class-level dependencies of
+          Java class files.</para>
+          <indexterm zone="openjdk jdeps">
+            <primary sortas="b-jdeps">jdeps</primary>
+          </indexterm>
+        </listitem>
+      </varlistentry>
       <varlistentry id="jhat">
         <term><command>jhat</command></term>
         <listitem>
@@ -1062,6 +1124,18 @@
         </listitem>
       </varlistentry>
 
+      <varlistentry id="jjs">
+        <term><command>jjs</command></term>
+        <listitem>
+          <para>is a command-line tool used to invoke the Nashorn engine. It
+          can be used to interpret one or several script files, or to run
+          an interactive shell.</para>
+          <indexterm zone="openjdk jjs">
+            <primary sortas="b-jjs">jjs</primary>
+          </indexterm>
+        </listitem>
+      </varlistentry>
       <varlistentry id="jmap">
         <term><command>jmap</command></term>
         <listitem>

Index: introduction/welcome/changelog.xml
===================================================================
--- introduction/welcome/changelog.xml	(révision 14963)
+++ introduction/welcome/changelog.xml	(révision 14964)
@@ -48,6 +48,8 @@
       <para>November 19th, 2014</para>
       <itemizedlist>
         <listitem>
+          <para>[pierre] - Update to OpenJDK-1.8.0_25. Fixes
+          <ulink url="&blfs-ticket-root;5686">#5686</ulink>.</para>
           <para>[fernando] - Update to unbound-1.5.0. Fixes
           <ulink url="&blfs-ticket-root;5838">#5838</ulink>.</para>
         </listitem>

