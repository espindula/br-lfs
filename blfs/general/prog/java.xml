<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
  <!ENTITY anduin-download             "http://anduin.linuxfromscratch.org/files/BLFS/OpenJDK-&openjdk-version;">
  <!ENTITY openjdk-download-binary-x86 "&anduin-download;/OpenJDK-&openjdk-version;-i686-bin.tar.xz">
  <!ENTITY openjdk-bin-md5sum-x86      "5a099f50edbd6b0f83b746c907032d5c">
  <!ENTITY openjdk-bin-size-x86        "163 Mo">
  <!ENTITY openjdk-bin-buildsize-x86   "499 Mo">
  <!ENTITY openjdk-download-binary-x64 "&anduin-download;/OpenJDK-&openjdk-version;-x86_64-bin.tar.xz">
  <!ENTITY openjdk-bin-md5sum-x64      "506ca98b2f4064c350ee08ab8f8f5416">
  <!ENTITY openjdk-bin-size-x64        "146 Mo">
  <!ENTITY openjdk-bin-buildsize-x64   "421 Mo">
]>

<sect1 id="java">
  <?dbhtml filename="java.html"?>

  <sect1info>
    <othername>$LastChangedBy: bdubbs $</othername>
    <date>$Date: 2013-07-16 22:07:29 +0200 (mar. 16 juil. 2013) $</date>
  </sect1info>

  <title>About Java</title>

  <indexterm zone="java">
    <primary sortas="a-java">JDK Binary</primary>
  </indexterm>


  <para>Java is different from most of the packages in LFS et BLFS.  It
  is a programming language that works with files of byte codes to obtain
  instructions et executes then in a Java Virtual Machine (JVM).  An 
  introductory java program looks like:</para>

<screen><literal>public class HelloWorld 
{
    public static void main(String[] args) 
    {
        System.out.println("Hello, World");
    }
}</literal></screen>

  <para>This program is saved as <filename>HelloWorld.java</filename>.  The file
  name, <emphasis>HelloWorld</emphasis>, must match the class name.  It
  is then converted into byte code with <command>javac HelloWorld.java</command>.
  The output file is <filename>HelloWorld.class</filename>.  The program is 
  executed with <command>java HelloWorld</command>.  This creates a JVM et 
  runs the code.  The 'class' extention must not be specified.</para>

  <para>Several class files can be combined into one file with the
  <command>jar</command> command.  This is similar to the standard
  <command>tar</command> command.  For instance, the command <command>jar cf myjar.jar
  *.class</command> will combine all class files in a directory into one jar
  file.  These act as library files.</para>

  <para>The JVM can search for et use classes in jar files automatically.  It
  uses the <envar>CLASSPATH</envar> envronment variable to search for jar files.
  This a a standard list of colon-separated directory namesi similar to
  the <envar>PATH</envar> envronment variable.</para>
 
  &lfs73_checked;

  <sect2 id="java-bin">
    <title>Installing a binary JDK</title>

    <para>Creating a JVM from source requires a set of circular dependencies.
    The first thing that's needed is a set of programs called a Java Development
    Kit (JDK).  This set of programs includes <command>java</command>,  
    <command>javac</command>, <command>jar</command>, et severl others. It 
    also includes several base <emphasis>jar</emphasis> files.</para>

    <para>To start, we set up a binary installation of the JDK created
    by the BLFS editors.  It is installed in the <filename>/opt</filename>
    directory to allow for multiple installations, including a source based
    version.</para>

    <bridgehead renderas="sect3">Binary Information sur le paquet </bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>Binary download (x86):
        <ulink url="&openjdk-download-binary-x86;"/></para>
      </listitem>
      <listitem>
        <para>Somme de contrôle MD5 du téléchargement : &openjdk-bin-md5sum-x86;</para>
      </listitem>
      <listitem>
        <para>Taille du téléchargement  (binary): &openjdk-bin-size-x86;</para>
      </listitem>
      <listitem>
        <para>Estimation de l'espace disque requis : &openjdk-bin-buildsize-x86;</para>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <listitem>
        <para>Binary download (x86_64):
        <ulink url="&openjdk-download-binary-x64;"/></para>
      </listitem>
      <listitem>
        <para>Somme de contrôle MD5 du téléchargement : &openjdk-bin-md5sum-x64;</para>
      </listitem>
      <listitem>
        <para>Taille du téléchargement  (binary): &openjdk-bin-size-x64;</para>
      </listitem>
      <listitem>
        <para>Estimation de l'espace disque requis : &openjdk-bin-buildsize-x64;</para>
      </listitem>
    </itemizedlist>
 
    <para>Begin by extracting the appropriate binary tarball for your
    architeciture et changing to the extracted directory. Install the binary
    <application>OpenJDK</application> with the following commands as the
    <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>install -vdm755 /opt/OpenJDK-&openjdk-version;-bin &amp;&amp;
mv -v * /opt/OpenJDK-&openjdk-version;-bin         &amp;&amp;
chown -R root:root /opt/OpenJDK-&openjdk-version;-bin</userinput></screen>

    <para>Configure the temporary <application>OpenJDK</application>
    installation with the following </para>

<screen><userinput>export CLASSPATH=.:/usr/share/java &amp;&amp;
export PATH="$PATH:/opt/OpenJDK-&openjdk-version;-bin/bin"</userinput></screen>

    <para>The binary version is now installed. If you don't want to compile the
    sources, skip ahead to the <xref linkend='openjdk-config'/> section.
    Otherwise, continue to the <xref linkend='junit'/>, <xref
    linkend='apache-ant'/>, et <xref linkend='openjdk'/> sections.</para>
    
  </sect2>

</sect1>
