<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
  <!ENTITY llvm-download-http "http://llvm.org/releases/&llvm-version;/llvm-&llvm-version;.src.tar.xz">
  <!ENTITY llvm-download-ftp  " ">
  <!ENTITY llvm-md5sum        "bf8b3a2c79e61212c5409041dfdbd319">
  <!ENTITY llvm-size          "14 Mo">
  <!ENTITY llvm-buildsize     "1.6 Go (with Clang and tests)">
  <!ENTITY llvm-time          "13 SBU (with Clang, tests and parallelism = 4)">
  <!ENTITY clang-download-http "http://llvm.org/releases/&llvm-version;/cfe-&llvm-version;.src.tar.xz">
  <!ENTITY clang-md5sum        "0acd026b5529164197563d135a8fd83e">
  <!ENTITY clang-size          " 8.7 Mo">
  <!ENTITY rt-version                "&llvm-version;">
  <!ENTITY compiler-rt-download-http "http://llvm.org/releases/&rt-version;/compiler-rt-&rt-version;.src.tar.xz">
  <!ENTITY compiler-rt-md5sum        "1c6975daf30bb3b0473b53c3a1a6ff01">
  <!ENTITY compiler-rt-size          "1.2 Mo">
]>
<sect1 id="llvm" xreflabel="llvm-&llvm-version;">
  <?dbhtml filename="llvm.html" ?>
  <sect1info>
    <othername>$LastChangedBy&nbsp;: bdubbs $</othername>
    <date>$Date&nbsp;: 2013-03-06 04:05:17 +0100 (Wed, 06 Mar 2013) $</date>
  </sect1info>
  <title>LLVM-&llvm-version;</title>
  <indexterm zone="llvm">
    <primary sortas="a-LLVM">LLVM</primary>
  </indexterm>
  <sect2 role="package">
    <title>Introduction à LLVM</title>
    <para>Le paquet <application>LLVM</application> contient une collection de
    compilateur modulaire et réutilisable et des technologies de chaînes d'outils. Le c&oelig;ur
    des bibliothèques <foreignphrase>Low Level Virtual Machine</foreignphrase>
    (LLVM) fournit un optimiseur moderne de source- et cible- indépendant,ainsi
    que le support de génération de code pour beaucoup des processeurs populaires
    (ainsi que quelques autres moins courants!) Ces bibliothèques sont construites autour
    d'une représentation du code bien connu comme précise la représentation LLVM intermédiaire
    ("LLVM IR").</para>
    <para>Les paquets facultatifs <application>Clang</application> et <application>Compiler RT</application> fournissent de
    nouvelles interfaces C, C++, C objet et C++ objet et des bibliothèques d'exécution
    pour <application>LLVM</application>.</para>
    <note>
      <para>
        Ce paquet présente un bogue avec gcc-4.9.0 ou un gcc-4.9.1 non-modifié.
        Pour construire ce paquet, gcc doit être mis à jour si vous avez une de ses versions.
        voir <xref linkend="gcc"/>
        pour les instructions d'installation de <application>gcc</application>.
      </para>
    </note>
    &lfs78_checked;
    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>Téléchargement (HTTP)&nbsp;: <ulink url="&llvm-download-http;"/></para>
      </listitem>
      <listitem>
        <para>Téléchargement (FTP)&nbsp;: <ulink url="&llvm-download-ftp;"/></para>
      </listitem>
      <listitem>
        <para>Somme de contrôle MD5 du téléchargement&nbsp;: &llvm-md5sum;</para>
      </listitem>
      <listitem>
        <para>Taille du téléchargement&nbsp;: &llvm-size;</para>
      </listitem>
      <listitem>
        <para>Estimation de l'espace disque requis&nbsp;: &llvm-buildsize;</para>
      </listitem>
      <listitem>
        <para>Estimation du temps de construction&nbsp;;</para>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3">Téléchargements facultatifs</bridgehead>
      <bridgehead renderas="sect4">Clang</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Téléchargement: <ulink url="&clang-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Somme de contrôle MD5: &clang-md5sum;
          </para>
        </listitem>
        <listitem>
          <para>
            Taille du téléchargement: &clang-size;
          </para>
        </listitem>
      </itemizedlist>
      <bridgehead renderas="sect4">Compiler RT</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Téléchargement: <ulink url="&compiler-rt-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
             Somme de contrôle MD5: &compiler-rt-md5sum;
          </para>
        </listitem>
        <listitem>
          <para>
             Taille du téléchargement: &compiler-rt-size;
          </para>
        </listitem>
      </itemizedlist>
    <bridgehead renderas="sect3">Dépendances de LLVM</bridgehead>
    <bridgehead renderas="sect4">Recommandées</bridgehead>
    <para role="recommended">
       <xref linkend="libffi"/> et
      <xref linkend="python2"/>
    </para>
    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <xref linkend="cmake"/>,
      <xref linkend="doxygen"/>,
      <xref linkend="graphviz"/>,
      <xref linkend="libxml2"/>,
      <xref linkend="texlive"/>  (ou <xref linkend="tl-installer"/>),
      <xref linkend="valgrind"/>,
      <xref linkend="zip"/>,
      <ulink url="http://www.ocaml.org/">OCaml</ulink> et
      <ulink url="http://pypi.python.org/pypi/Sphinx">Sphinx</ulink>
    </para>
    <para condition="html" role="usernotes">Notes utilisateur&nbsp;:
    <ulink url="&blfs-wiki;/llvm"/></para>
  </sect2>
  <sect2 role="installation">
    <title>Installation de LLVM</title>
    <para>Si vous avez téléchargé les paquets facultatifs,
    installez-les dans l'arborescence des sources&nbsp;:</para>
<screen>
<userinput>tar -xf ../cfe-&llvm-version;.src.tar.xz -C tools &amp;&amp;
tar -xf ../compiler-rt-&rt-version;.src.tar.xz -C projects &amp;&amp;
mv tools/cfe-&llvm-version;.src tools/clang &amp;&amp;
mv projects/compiler-rt-&rt-version;.src projects/compiler-rt</userinput>
</screen>
     <para>
      La bibliothèque doit être corrigée pour les installations 32 bits:
    </para>
<screen>
<userinput>sed -r "/ifeq.*CompilerTargetArch/s#i386#i686#g"     -i projects/compiler-rt/make/platform/clang_linux.mk</userinput>
</screen>
    <para>
      Installez <application>LLVM</application> en lançant les commandes suivantes&nbsp;:
    </para>
<screen>
<userinput>sed -e "s:/docs/llvm:/share/doc/llvm-&llvm-version;:"     -i Makefile.config.in &amp;&amp;
mkdir -v build &amp;&amp;
cd       build &amp;&amp;
CC=gcc CXX=g++                          ../configure --prefix=/usr                           --datarootdir=/usr/share                --sysconfdir=/etc                       --enable-libffi                         --enable-optimized                      --enable-shared                         --enable-targets=host,r600              --disable-assertions                    --docdir=/usr/share/doc/llvm-&llvm-version; &amp;&amp;
make</userinput>
</screen>
    <para>
      Si vous avez installé <application>Sphinx</application> et que vous souhaitez
      générer les pages de manuel, tapez la commande suivante:
    </para>
<screen>
<userinput>make -C ../docs -f Makefile.sphinx man</userinput>
</screen>
    <para>
      Pour testez les résultats, tapez: <command>make -k check-all</command>. Quelques tests échouent pour des raisons
      inconnues.
    </para>
    <para>
      Maintenant, en tant qu'utilisateur <systemitem class="username">root</systemitem>&nbsp;:
    </para>
<screen role="root">
<userinput>make install &amp;&amp;
for file in /usr/lib/lib{clang,LLVM,LTO}*.a
do
  test -f $file &amp;&amp; chmod -v 644 $file
done
unset file</userinput>
</screen>
    <para>
      Si vous avez installé <xref linkend="python2"/> et vous avez construit
      <application>Clang</application>, installez
      <application>Clang Analyzer</application> en lançant la commande suivante en tant qu'utilisateur
      <systemitem class="username">root</systemitem> :
    </para>
<screen role="root">
<userinput>install -v -dm755 /usr/lib/clang-analyzer &amp;&amp;
for prog in scan-build scan-view
do
  cp -rfv ../tools/clang/tools/$prog /usr/lib/clang-analyzer/ &amp;&amp;
  ln -sfv ../lib/clang-analyzer/$prog/$prog /usr/bin/
done
unset prog &amp;&amp;
ln -sfv /usr/bin/clang         /usr/lib/clang-analyzer/scan-build/ &amp;&amp;
mv -v   /usr/lib/clang-analyzer/scan-build/scan-build.1         /usr/share/man/man1/</userinput>
</screen>
    <para>
      si vous avez constuit les pages de manuel, installez les en lançant
      la commande suivant en tant qu'utilisateur
      <systemitem class="username">root</systemitem>&nbsp;:
    </para>
<screen role="root">
<userinput>install -v -m644 ../docs/_build/man/* /usr/share/man/man1/</userinput>
</screen>
   </sect2>
   <sect2 role="commands">
    <title>Explication des commandes</title>
    <para>
      <command>sed -e ... Makefile.config.in</command>: Ce sed corrige l'emplacement d'installation de la
      documentation.
    </para>
    <para>
      <parameter>--enable-libffi</parameter>: Ce paramètre initialise
      <application>LLVM</application> pour utiliser
      <application>libffi</application>. Effacez le si vous n'avaz pas installé
      <application>libffi</application>.
    </para>
    <para>
      <parameter>--enable-optimized</parameter>: Ce paramètre active
      les optimisations du compilateur pour augmenter la vitesse du code et diminuer sa taille.
    </para>
    <para>
      <parameter>--enable-shared</parameter>: Ce paramètre active la construction des
      bibliothèques partagées de <application>LLVM</application> qui contiennent
      toutes les bibliothèques statiques liées dans une seule bibliothèque.
    </para>
     <para>
      <parameter>--enable-targets=host</parameter>: Ce paramètre active la construction des
      mêmes cibles que l'hote. et aussi pour le GPU r600 d'AMD utilisé par les pilotes r600 de Mesa
      et radeonsi.Par défaut c'est tous. Vous pouvez utiliser une virgule
      pour séparer la liste. Les cibles valides sont: host, x86, x86_64, sparc, powerpc,
      arm64, arm, aarch64, mips, hexagon, xcore, msp430, nvptx, systemz, r600, amdgpu (équivalent de r600)
      bpf, wasm, et cpp
    </para>
    <para>
     <parameter>--disable-assertions</parameter>: Désactive quelques vérifications de compilation non utile sur un système de production.
    </para>
  </sect2>
  <sect2 role="contenu">
    <title>Contents</title>
    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>
      <seglistitem>
        <seg>
          bugpoint, c-index-test, clang, clang++ (symlink), count, FileCheck,
          clang-check, clang-format, clang-tblgen, llc, lli, lli-child-target,
          llvm-ar, llvm-as, llvm-bcanalyzer, llvm-config, llvm-cov,
          llvm-cxxdump, llvm-diff, llvm-dis, llvm-dsymutil, llvm-dwarfdump,
          llvm-extract, llvm-link, llvm-mc, llvm-mcmarkup, llvm-nm,
          llvm-objdump, llvm-pdbdump, llvm-profdata, llvm-ranlib (lien symbolique),
          llvm-readobj, llvm-rtdyld, llvm-size, llvm-stress, llvm-symbolizer,
          llvm-tblgen,
           macho-dump, not, obj2yaml, opt, scan-build (lien symbolique), scan-view
          (lien symbolique), verify-uselistorder, et yaml2obj
       </seg>
       <seg>
          BugpointPasses.so, libclang.so, libLLVM-&llvm-version;.so,
          libLTO.so,
 LLVMHello.so and numerous
          et de nombreuses bibliothèques dans /usr/lib/llvm
        </seg>
        <seg>
          /usr/include/{clang,clang-c,llvm,llvm-c},
          /usr/lib/{clang,clang-analyzer}, et
          /usr/share/{doc/llvm-&llvm-version;,llvm}
        </seg>
      </seglistitem>
    </segmentedlist>
    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>
      <varlistentry id="bugpoint">
        <term><command>bugpoint</command></term>
        <listitem>
          <para>
            est l'outil automatique de réduction des tests de case
          </para>
          <indexterm zone="llvm bugpoint">
            <primary sortas="b-bugpoint">bugpoint</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="clang">
        <term><command>clang</command></term>
       <listitem>
          <para>
            est le compilateur <application>Clang</application> de C, C++,
            et C objet.
         </para>
          <indexterm zone="llvm clang">
            <primary sortas="b-clang">clang</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llc">
        <term><command>llc</command></term>
        <listitem>
          <para>
            est le compilateur statique de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llc">
            <primary sortas="b-llc">llc</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="lli">
        <term><command>lli</command></term>
        <listitem>
          <para>
            est utilisé pour exécuter directement des programmes depuis le binaire
            <application>LLVM</application> .
          </para>
          <indexterm zone="llvm lli">
            <primary sortas="b-lli">lli</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-ar">
        <term><command>llvm-ar</command></term>
        <listitem>
          <para>
            est l'archiveur <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-ar">
            <primary sortas="b-llvm-ar">llvm-ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-as">
        <term><command>llvm-as</command></term>
        <listitem>
          <para>
            est l'assembleur <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-as">
            <primary sortas="b-llvm-as">llvm-as</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-bcanalyzer">
        <term><command>llvm-bcanalyzer</command></term>
        <listitem>
          <para>
            est l'analyseyr binaire de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-bcanalyzer">
            <primary sortas="b-llvm-bcanalyzer">llvm-bcanalyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-config">
        <term><command>llvm-config</command></term>
        <listitem>
          <para>
            Affiche les options de compilation de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-config">
            <primary sortas="b-llvm-config">llvm-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-cov">
        <term><command>llvm-cov</command></term>
        <listitem>
          <para>
            est utiliser pour émettre des informations de couverture.
          </para>
          <indexterm zone="llvm llvm-cov">
            <primary sortas="b-llvm-cov">llvm-cov</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-cxxdump">
        <term><command>llvm-cxxdump</command></term>
        <listitem>
          <para>
            est utilisé pour l'enregistreur de donnée de l'ABI C++.
          </para>
          <indexterm zone="llvm llvm-cxxdump">
            <primary sortas="b-llvm-cxxdump">llvm-cxxdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-diff">
        <term><command>llvm-diff</command></term>
        <listitem>
          <para>
             est le <command>diff</command> de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-diff">
            <primary sortas="b-llvm-diff">llvm-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-dis">
        <term><command>llvm-dis</command></term>
        <listitem>
          <para>
            est le désassembleur de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-dis">
            <primary sortas="b-llvm-dis">llvm-dis</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-dsymutil">
        <term><command>llvm-dsymutil</command></term>
        <listitem>
          <para>
            outil utilisé pour manipuler les fichiers de symboles de déboguage DWARF archivés
            compatibles avec la commande Darwin <command>dsymutil</command>.
          </para>
          <indexterm zone="llvm llvm-dsymutil">
            <primary sortas="b-llvm-dsymutil">llvm-dsymutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-extract">
        <term><command>llvm-extract</command></term>
        <listitem>
          <para>
            est utilisé pour extraire une fonction d'un module
            <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-extract">
            <primary sortas="b-llvm-extract">llvm-extract</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-link">
        <term><command>llvm-link</command></term>
        <listitem>
          <para>
            est le lieur de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-link">
            <primary sortas="b-llvm-link">llvm-link</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-nm">
        <term><command>llvm-nm</command></term>
        <listitem>
          <para>
            est utilisé pour lister des tables de symboles des fichiers binaires et objet
            de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-nm">
            <primary sortas="b-llvm-nm">llvm-nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-pdbdump">
        <term><command>llvm-pdbdump</command></term>
        <listitem>
          <para>
            est utilisé comme enregsitreur PDB.
          </para>
          <indexterm zone="llvm llvm-pdbdump">
            <primary sortas="b-llvm-pdbdump">llvm-pdbdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>
       <varlistentry id="llvm-ranlib">
        <term><command>llvm-ranlib</command></term>
        <listitem>
          <para>
            est utilisé pour générer un index pour les archives
            <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-ranlib">
            <primary sortas="b-llvm-ranlib">llvm-ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-stress">
        <term><command>llvm-stress</command></term>
        <listitem>
          <para>
            est utilisé pour générer des fichiers aléatoires
            <filename class="extension">.ll</filename>.
          </para>
          <indexterm zone="llvm llvm-stress">
            <primary sortas="b-llvm-stress">llvm-stress</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-tblgen">
        <term><command>llvm-tblgen</command></term>
        <listitem>
          <para>
            est le générateue de description de cible du code C++ de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-tblgen">
            <primary sortas="b-llvm-tblgen">llvm-tblgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="obj2yaml">
        <term><command>obj2yaml</command></term>
        <listitem>
          <para>
            prend un fichier objet, et produit une représentation YAML de ce fichier.
          </para>
          <indexterm zone="llvm obj2yaml">
            <primary sortas="b-obj2yaml">obj2yaml</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="opt">
        <term><command>opt</command></term>
        <listitem>
          <para>
            est l'optimiseur de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm opt">
            <primary sortas="b-opt">opt</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="scan-build">
        <term><command>scan-build</command></term>
        <listitem>
          <para>
            est un script <application>Perl</application> qui appelle l'analyseur statique de
            <application>Clang</application>.
          </para>
          <indexterm zone="llvm scan-build">
            <primary sortas="b-scan-build">scan-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="yaml2obj">
        <term><command>yaml2obj</command></term>
        <listitem>
          <para>
            prend une représentation YAML d'un fichier objet et le converti en fichier binaire.
          </para>
          <indexterm zone="llvm yaml2obj">
            <primary sortas="b-yaml2obj">yaml2obj</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="libllvm">
       <term><filename class="libraryfile">libLLVM-&llvm-version;.so</filename></term>
        <listitem>
          <para>
            contient les fonctions de l'API de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm libllvm">
            <primary sortas="c-libllvm">libLLVM-&llvm-version;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
    </sect2>
</sect1>
