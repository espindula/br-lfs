<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
  <!ENTITY llvm-download-http "http://llvm.org/releases/&llvm-version;/llvm-&llvm-version;.src.tar.gz">
  <!ENTITY llvm-download-ftp  " ">
  <!ENTITY llvm-md5sum        "46ed668a1ce38985120dbf6344cf6116">
  <!ENTITY llvm-size          "16 Mo">
  <!ENTITY llvm-buildsize     "519 Mo (1.1 Go with Clang)">
  <!ENTITY llvm-time          "11.4 SBU and 0.4 for tests (22.7 SBU with Clang)">
  <!ENTITY clang-download-http "http://llvm.org/releases/&llvm-version;/clang-&llvm-version;.src.tar.gz">
  <!ENTITY clang-md5sum        "b378f1e2c424e03289effc75268d3d2c">
  <!ENTITY clang-size          "11 Mo">
  <!ENTITY compiler-rt-download-http "http://llvm.org/releases/&llvm-version;/compiler-rt-&llvm-version;.src.tar.gz">
  <!ENTITY compiler-rt-md5sum        "7938353e3a3bda85733a165e7ac4bb84">
  <!ENTITY compiler-rt-size          "1.8 Mo">
]>
<sect1 id="llvm" xreflabel="llvm-&llvm-version;">
  <?dbhtml filename="llvm.html" ?>
  <sect1info>
    <othername>$LastChangedBy&nbsp;: bdubbs $</othername>
    <date>$Date&nbsp;: 2013-03-06 04:05:17 +0100 (Wed, 06 Mar 2013) $</date>
  </sect1info>
  <title>LLVM-&llvm-version;</title>
  <indexterm zone="llvm">
    <primary sortas="a-LLVM">LLVM</primary>
  </indexterm>
  <sect2 role="package">
    <title>Introduction à LLVM</title>
    <para>Le paquet <application>LLVM</application> contient une collection de
    compilateur modulaire et réutilisable et des technologies de chaînes d'outils. Le c&oelig;ur
    des bibliothèques <foreignphrase>Low Level Virtual Machine</foreignphrase> 
    (LLVM) fournit un optimiseur moderne de source- et cible- indépendant,ainsi
    que le support de génération de code pour beaucoup des processeurs populaires 
    (ainsi que quelques autres moins courants!) Ces bibliothèques sont construites autour 
    d'une représentation du code bien connu comme précise la représentation LLVM intermédiaire 
    ("LLVM IR").</para>
    <para>Les paquets facultatifs <application>Clang</application> et <application>Compiler RT</application> fournissent de
    nouvelles interfaces C, C++, C objet et C++ objet et des bibliothèques d'exécution
    pour <application>LLVM</application>.</para>
   &lfs75_checked;
    <bridgehead renderas="sect3">Informations sur le paquet</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>Téléchargement (HTTP)&nbsp;: <ulink url="&llvm-download-http;"/></para>
      </listitem>
      <listitem>
        <para>Téléchargement (FTP)&nbsp;: <ulink url="&llvm-download-ftp;"/></para>
      </listitem>
      <listitem>
        <para>Somme de contrôle MD5 du téléchargement&nbsp;: &llvm-md5sum;</para>
      </listitem>
      <listitem>
        <para>Taille du téléchargement&nbsp;: &llvm-size;</para>
      </listitem>
      <listitem>
        <para>Estimation de l'espace disque requis&nbsp;: &llvm-buildsize;</para>
      </listitem>
      <listitem>
        <para>Estimation du temps de construction&nbsp;;</para>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3">Téléchargements facultatifs</bridgehead>
      <bridgehead renderas="sect4">Clang</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Téléchargement: <ulink url="&clang-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Somme de contrôle MD5: &clang-md5sum;
          </para>
        </listitem>
        <listitem>
          <para>
            Taille du téléchargement: &clang-size;
          </para>
        </listitem>
      </itemizedlist>
      <bridgehead renderas="sect4">Compiler RT</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Téléchargement: <ulink url="&compiler-rt-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
             Somme de contrôle MD5: &compiler-rt-md5sum;
          </para>
        </listitem>
        <listitem>
          <para>
             Taille du téléchargement: &compiler-rt-size;
          </para>
        </listitem>
      </itemizedlist>
    <bridgehead renderas="sect3">Dépendances de LLVM</bridgehead>
    <bridgehead renderas="sect4">Recommandées</bridgehead>
    <para role="recommended">
       <xref linkend="libffi"/> et
      <xref linkend="python2"/>
    </para>
    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <xref linkend="doxygen"/>,
      <xref linkend="graphviz"/>,
      <xref linkend="libxml2"/>,
      <xref linkend="texlive"/>,
      <xref linkend="zip"/>,
      <ulink url="http://www.ocaml.org/">OCaml</ulink>,
      <ulink url="http://pypi.python.org/pypi/Sphinx">Sphinx</ulink> et
      <ulink url="http://www.valgrind.org/">Valgrind</ulink>
    </para>
    <para condition="html" role="usernotes">Notes utilisateur&nbsp;:
    <ulink url="&blfs-wiki;/llvm"/></para>
  </sect2>
  <sect2 role="installation">
    <title>Installation de LLVM</title>
 
    <para>Si vous avez téléchargé les paquets facultatifs,
    installez-les dans l'arborescence des sources&nbsp;:</para>
<screen>
<userinput>tar -xf ../clang-&llvm-version;.src.tar.gz -C tools &amp;&amp;
tar -xf ../compiler-rt-&llvm-version;.src.tar.gz -C projects &amp;&amp;
mv tools/clang-&llvm-version; tools/clang &amp;&amp;
mv projects/compiler-rt-&llvm-version; projects/compiler-rt</userinput>
</screen>
    <para>
      Installez <application>LLVM</application> en lançant les commandes suivantes&nbsp;:
    </para>
<screen>
<userinput>sed -e 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm-&llvm-version;:' \
    -i Makefile.config.in &amp;&amp;
CC=gcc CXX=g++                         \
./configure --prefix=/usr              \
            --sysconfdir=/etc          \
            --enable-libffi            \
            --enable-optimized         \
            --enable-shared            \
            --disable-assertions       &amp;&amp;
make</userinput>
</screen>
    <para>
      Si vous avez installé <application>Sphinx</application> et que vous souhaitez
      générer les pages de manuel, tapez la commande suivante:
    </para>
<screen>
<userinput>make -C docs -f Makefile.sphinx man</userinput>
</screen>
    <para>
      Pour testez les résultats, tapez: <command>make check</command>.
    </para>
    <para>
      Maintenant, en tant qu'utilisateur <systemitem class="username">root</systemitem>&nbsp;:
    </para>
<screen role="root">
<userinput>make install &amp;&amp;
for file in /usr/lib/lib{clang,LLVM,LTO}*.a
do
  test -f $file &amp;&amp; chmod -v 644 $file
done</userinput>
</screen>
    <para>
      Si vous avez installé <xref linkend="python2"/> et vous avez construit
      <application>Clang</application>, installez
      <application>Clang Analyzer</application> en lançant la commande suivante en tant qu'utilisateur
      <systemitem class="username">root</systemitem> :
    </para>
<screen role="root">
<userinput>install -v -dm755 /usr/lib/clang-analyzer &amp;&amp;
for prog in scan-build scan-view
do
  cp -rfv tools/clang/tools/$prog /usr/lib/clang-analyzer/
  ln -sfv ../lib/clang-analyzer/$prog/$prog /usr/bin/
done &amp;&amp;
ln -sfv /usr/bin/clang /usr/lib/clang-analyzer/scan-build/ &amp;&amp;
mv -v /usr/lib/clang-analyzer/scan-build/scan-build.1 /usr/share/man/man1/</userinput>
</screen>
    <para>
      si vous avez constuit les pages de manuel, installez les en lançant
      la commande suivant en tant qu'utilisateur
      <systemitem class="username">root</systemitem>&nbsp;:
    </para>
<screen role="root">
<userinput>install -v -m644 docs/_build/man/* /usr/share/man/man1/</userinput>
</screen>
   </sect2>
   <sect2 role="commands">
    <title>Explication des commandes</title>
    <para>
      <command>sed -e ...</command>: Ce sed corrige le chemin de la documentation
      installée.
    </para>
    <para>
      <parameter>--enable-libffi</parameter>: Ce paramètre initialise 
      <application>LLVM</application> pour utiliser
      <application>libffi</application>. Effacez le si vous n'avaz pas installé
      <application>libffi</application>.
    </para>
    <para>
      <parameter>--enable-optimized</parameter>: Ce paramètre active
      les optimisations du compilateur pour augmenter la vitesse du code et diminuer sa taille.
    </para>
    <para>
      <parameter>--enable-shared</parameter>: Ce paramètre active la construction des
      bibliothèques partagées de <application>LLVM</application> qui contiennent
      toutes les bibliothèques statiques liées dans une seule bibliothèque.
    </para>
    <para>
     <parameter>--disable-assertions</parameter>: Désactive quelques vérifications de compilation non utile sur un système de production.
    </para>
    <para>
      <parameter>--enable-experimental-targets=R600</parameter>:
      Ce paramètre active la cible R600 qui est requise par 
      <application>Mesa</application> pour construire le pilote 3D radeonsi.
      Il peut être utilisé par le serveur r600 de <application>LLVM</application>
      et par le suiveur d'état de OpenCL dans <application>Mesa</application>. Effacez le
      si vous n'avez pas appliqué les correctifs recommandés.
    </para>
  </sect2>
  
  <sect2 role="contenu">
    <title>Contents</title>
    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>
      <seglistitem>
        <seg>
          bugpoint, c-index-test, clang, clang++ (symlink), clang-check, clang-format, clang-tblgen,
          llc, lli, lli-child-target, llvm-ar, llvm-as, llvm-bcanalyzer, llvm-config, llvm-cov, llvm-diff,
          llvm-dis, llvm-dwarfdump, llvm-extract, llvm-link, llvm-mc, llvm-mcmarkup,
          llvm-nm, llvm-objdump,llvm-ranlib (symlink), llvm-readobj, llvm-rtdyld,
          llvm-size, llvm-stress, llvm-symbolizer, llvm-tblgen, macho-dump, opt,
          scan-build (symlink) et scan-view (symlink)
        </seg>
        <seg>
          BugpointPasses.so, libclang.so, libLLVM-&llvm-version;.so,
          libLTO.so,
 LLVMHello.so and numerous
          et de nombreuses bibliothèques dans /usr/lib/llvm
        </seg>
        <seg>
          /usr/include/clang,
          /usr/include/clang-c,
          /usr/include/llvm,
          /usr/include/llvm-c,
          /usr/lib/clang,
          /usr/lib/clang-analyzer,
          /usr/share/doc/html/clang, et
          /usr/share/doc/llvm-&llvm-version;
        </seg>
      </seglistitem>
    </segmentedlist>
    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>
      <varlistentry id="bugpoint">
        <term><command>bugpoint</command></term>
        <listitem>
          <para>
            est l'outil automatique de réduction des tests de case
          </para>
          <indexterm zone="llvm bugpoint">
            <primary sortas="b-bugpoint">bugpoint</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="clang">
        <term><command>clang</command></term>
       <listitem>
          <para>
            est le compilateur <application>Clang</application> de C, C++,
            et C objet.
         </para>
          <indexterm zone="llvm clang">
            <primary sortas="b-clang">clang</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llc">
        <term><command>llc</command></term>
        <listitem>
          <para>
            est le compilateur statique de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llc">
            <primary sortas="b-llc">llc</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="lli">
        <term><command>lli</command></term>
        <listitem>
          <para>
            est utilisé pour exécuter directement des programmes depuis le binaire
            <application>LLVM</application> .
          </para>
          <indexterm zone="llvm lli">
            <primary sortas="b-lli">lli</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-ar">
        <term><command>llvm-ar</command></term>
        <listitem>
          <para>
            est l'archiveur <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-ar">
            <primary sortas="b-llvm-ar">llvm-ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-as">
        <term><command>llvm-as</command></term>
        <listitem>
          <para>
            est l'assembleur <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-as">
            <primary sortas="b-llvm-as">llvm-as</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-bcanalyzer">
        <term><command>llvm-bcanalyzer</command></term>
        <listitem>
          <para>
            est l'analyseyr binaire de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-bcanalyzer">
            <primary sortas="b-llvm-bcanalyzer">llvm-bcanalyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-config">
        <term><command>llvm-config</command></term>
        <listitem>
          <para>
            Affiche les options de compilation de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-config">
            <primary sortas="b-llvm-config">llvm-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-cov">
        <term><command>llvm-cov</command></term>
        <listitem>
          <para>
            est utiliser pour émettre des informations de couverture.
          </para>
          <indexterm zone="llvm llvm-cov">
            <primary sortas="b-llvm-cov">llvm-cov</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-diff">
        <term><command>llvm-diff</command></term>
        <listitem>
          <para>
             est le <command>diff</command> de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-diff">
            <primary sortas="b-llvm-diff">llvm-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-dis">
        <term><command>llvm-dis</command></term>
        <listitem>
          <para>
            est le désassembleur de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-dis">
            <primary sortas="b-llvm-dis">llvm-dis</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-extract">
        <term><command>llvm-extract</command></term>
        <listitem>
          <para>
            est utilisé pour extraire une fonction d'un module
            <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-extract">
            <primary sortas="b-llvm-extract">llvm-extract</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-link">
        <term><command>llvm-link</command></term>
        <listitem>
          <para>
            est le lieur de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-link">
            <primary sortas="b-llvm-link">llvm-link</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-nm">
        <term><command>llvm-nm</command></term>
        <listitem>
          <para>
            est utilisé pour lister des tables de symboles des fichiers binaires et objet
            de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-nm">
            <primary sortas="b-llvm-nm">llvm-nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>
       <varlistentry id="llvm-ranlib">
        <term><command>llvm-ranlib</command></term>
        <listitem>
          <para>
            est utilisé pour générer un index pour les archives
            <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-ranlib">
            <primary sortas="b-llvm-ranlib">llvm-ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-stress">
        <term><command>llvm-stress</command></term>
        <listitem>
          <para>
            est utilisé pour générer des fichiers aléatoires
            <filename class="extension">.ll</filename>.
          </para>
          <indexterm zone="llvm llvm-stress">
            <primary sortas="b-llvm-stress">llvm-stress</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="llvm-tblgen">
        <term><command>llvm-tblgen</command></term>
        <listitem>
          <para>
            est le générateue de description de cible du code C++ de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm llvm-tblgen">
            <primary sortas="b-llvm-tblgen">llvm-tblgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="opt">
        <term><command>opt</command></term>
        <listitem>
          <para>
            est l'optimiseur de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm opt">
            <primary sortas="b-opt">opt</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="scan-build">
        <term><command>scan-build</command></term>
        <listitem>
          <para>
            est un script <application>Perl</application> qui appelle l'analyseur statique de
            <application>Clang</application>.
          </para>
          <indexterm zone="llvm scan-build">
            <primary sortas="b-scan-build">scan-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="libllvm">
        <term><filename class="libraryfile">libLLVM-&llvm-version;.so</filename></term>
        <listitem>
          <para>
            contient les fonctions de l'API de <application>LLVM</application>.
          </para>
          <indexterm zone="llvm libllvm">
            <primary sortas="c-libllvm">libLLVM-&llvm-version;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
    </sect2>
</sect1>
