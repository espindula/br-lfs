<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
  <!ENTITY ojdk-upd                  "72">
  <!ENTITY ojdk-bd                   "b15">
  <!ENTITY ojdk-tarball              "jdk8u&ojdk-upd;-&ojdk-bd;.tar.bz2">
  <!ENTITY ojdk-repo                 "http://hg.openjdk.java.net/jdk8u/jdk8u">
  <!ENTITY ojdk-download             "&ojdk-repo;/archive/&ojdk-tarball;">
  <!ENTITY anduin-download           "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;">
  <!ENTITY ojdk-md5sum               "161dfcff6fbf49649b35c86fa5bbc2b4">
  <!ENTITY ojdk-size                 "398 Ko">
  <!ENTITY corba-md5sum              "c822b9ac498d5bfbaa82ce6fa1c126a4">
  <!ENTITY hotspot-md5sum            "67a98eef6eed6fde18ec5e422bbdd074">
  <!ENTITY jaxp-md5sum               "fc20a017e3d3598de65240bc9a2ffbbc">
  <!ENTITY jaxws-md5sum              "669f95ee39534dcbbe538cb59bc78742">
  <!ENTITY jdk-md5sum                "58fa5f03c7da51a07c000881ca8e1b1b">
  <!ENTITY langtools-md5sum          "b85df8468b42a7c14c5d55e84339a2dd">
  <!ENTITY nashorn-md5sum            "1f9358090dc4ba710a14f31115de7c5f">
  <!ENTITY total-download-size       "62 Mo">
  <!ENTITY jtreg-version             "4.1-b12-496">
  <!ENTITY jtreg-download            "&anduin-download;/jtreg-&jtreg-version;.tar.gz">
  <!ENTITY jtreg-md5sum              "00eb03c5754b5de953d2cec268f9e73e">
  <!ENTITY jtreg-size                "7.4 Mo">
  <!ENTITY icedtea-web-download      "http://icedtea.classpath.org/download/source/icedtea-web-&icedtea-web-version;.tar.gz">
  <!ENTITY ojdk-buildsize           "3.7 Go (additional 547 Mo for tests)">
  <!ENTITY ojdk-time                "11 SBU (additional 110 SBU for tests)">
]>
<sect1 id="openjdk" xreflabel="OpenJDK-&openjdk-version;">
  <?dbhtml filename="openjdk.html" ?>
  <sect1info>
    <othername>$LastChangedBy&nbsp;: bdubbs $</othername>
    <date>$Date&nbsp;: 2013-01-15 03:50:02 +0100 (Tue, 15 Jan 2013) $</date>
  </sect1info>
  <title>OpenJDK-&openjdk-version;</title>
  <indexterm zone="openjdk">
    <primary sortas="a-OpenJDK">OpenJDK</primary>
  </indexterm>
  <sect2 role="package">
    <title>Introduction à OpenJDK</title>
       <para>
      <application>OpenJDK</application> est une implémentation libre de la plateforme
      d'édition standard Java d' Oracle.
      <application>OpenJDK</application> est utile pour développer des programmes
      <application>Java</application>, et forunir un environnement d'exécution complet pour lancer
      des programmes <application>Java</application>.
    </para>
    &lfs78_checked;
    <note>
      <para>
        Un greffon de navigateur et une implémentation de webstart, aussi bien que le moteur de sons pulseaudio
        sont fournis par le projet Icedtea. Pour fournir une implémentation complète, vous devrez installer
        plus tard
        <xref linkend="icedtea-web"/> et <xref linkend="icedtea-sound"/>.
      </para>
    </note>
    <para>OpenJDK est du code GPL, cependant, il convient de préciser qu'il y a
     eu une exception spéciale pour les projets non-libres d'utiliser ces classes dans
     leurs produits propriétaires. De façon similaire à la LGPL, qui autorise
    des programmes non-libre à lier des bibliothèques fournit par des programmes libres,
    La <ulink url="http://openjdk.java.net/legal/gplv2+ce.html">GNU
    General Public License, version 2, avec l'exception des chemins de classe</ulink>
    autorise des programmes tierces à utiliser des classes fournit par des programmes libres
    sans l'obligation que le programme tierce soit également libre. Comme avec la LGPL,
    toutes les modifications faite dans des parties d'un programme libre d'une application tierce,doit
    également être librement disponible.</para>
    <note>
    <para>Les sources de <application>OpenJDK</application> inclu une très complète, open source
      suite de tests appelée <application>JTreg</application>.
      Les instructions de tests suivantes permettent de tester le JDK juste construit pour une
       compatibilité raisonnable avec le JDK fermé d'Oracle. Cependant, pour qu'une
      implémentation indépendante revendique la compatibilité, incluant le projet
      sponsorisé par Oracle JDK, elle doit passer
      une suite de tests fermée <application>JCK/TCK</application>. Pas de revendication
      de compatibilité, même une compatibilité partielle, peut être faite sans passer
      une suite de tests approuvées.</para>
      <para>Oracle fournit un accès libre communautaire, au cas par cas,
      à des outils fermés pour assurer une compatibilité à 100% avec leur JDK propriétaire.
      Cependant la version binaire fournit sur la page <xref linkend="java"/> comme le JVM construit avec les instructions
      suivantes ont été testée avec
      <ulink url="http://openjdk.java.net/groups/conformance/JckAccess/jck-access.html">
      TCK</ulink>. Toutes les versions qui seront construites en utilisant les instructions données,
      ne pourront pas revendiquer d'être compatible avec le JDK propriétaire,  sans que l'utilisateur demande, et
      réussissent les tests de compatibilités.</para>
      <para>Avec cela en tête, les binaires produits en utilisant cette méthode de construction sont
         régulièrement testé avec le TCK par les membres listés sur le site au dessus.
      En supplément de la licence communautaire, une licence pour l'éducation, non-commerciale
      pour TCK peut être obtenue
      <ulink url="http://www.oracle.com/technetwork/java/index-137188.html">
      ici</ulink>.</para>
    </note>
    <bridgehead renderas="sect3">Information sur le paquet source </bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>Paquet des sources OpenJDK
          <simplelist>
            <member>Téléchargement: <ulink url="&ojdk-download;"/></member>
            <member>Somme de contrôle MD5 du téléchargement&nbsp;: &ojdk-md5sum;</member>
            <member>Taille de téléchargement: &ojdk-size;</member>
          </simplelist>
        </para>
      </listitem>
       <listitem>
        <para>
          En supplément du paquet principal, les instructions suivantes commenent par télécharger
         sept archives de sous-projet, pour une taille totale de &total-download-size;.</para>
      </listitem>
      <listitem>
         <para>Estimation de l'espace disque requis&nbsp;: &ojdk-buildsize;</para>
      </listitem>
      <listitem>
        <para>Estimation du temps de construction&nbsp;: &ojdk-time;</para>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3">Téléchargements supplémentaires</bridgehead>
    <itemizedlist spacing='compact'>
       <listitem>
        <para>test de solidité facultatif
          <simplelist>
            <member>Téléchargement: <ulink url="&jtreg-download;"/></member>
            <member>Somme MD5 de téléchargement: &jtreg-md5sum;</member>
            <member>Taille du téléchargement: &jtreg-size;</member>
          </simplelist>
        </para>
      </listitem>
      <listitem>
        <para>
          Paquet facultatif (pour avoir une icône pour le fichier
          <filename>openjdk-8-policytool.desktop</filename> ):
          <ulink url="&icedtea-web-download;"/>
        </para>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3">Dépendances de OpenJDK</bridgehead>
    <bridgehead renderas="sect4">Dépendances requises</bridgehead>
    <para role="required">
     Un binaire existant ( <xref linkend="java"/> ou une version construite récente de ce paquet,
     Les instructions qui suivent considère que vous utilisez <xref linkend="ojdk-conf"/>)
      <xref linkend="alsa-lib"/>,
       <xref linkend="cpio"/>,
       <xref linkend="cups"/>,
      <xref linkend="unzip"/>,
      <xref linkend="which"/>,
      <xref linkend="xorg7-lib"/> et
      <xref linkend="zip"/>.
    </para>
    <bridgehead renderas="sect4">Recommandées</bridgehead>
    <para role="recommended">
      <xref linkend="cacerts"/>,
      <xref linkend="giflib"/> et
     <xref linkend="wget"/>
    </para>
    <bridgehead renderas="sect4">Facultatives</bridgehead>
    <para role="optional">
      <xref linkend="mercurial"/> et
      un gestionnaire de fenètres X comme <xref linkend="twm"/> (pour les tests)
    </para>
    <para condition="html" role="usernotes">Notes utilisateur&nbsp;:
    <ulink url="&blfs-wiki;/openjdk"/></para>
  </sect2>
  <sect2 role="installation">
    <title>Installation de OpenJDK</title>
     <para>Contrairement aux autres paquets dans BLFS, les sources de <application>OpenJDK</application>
    sont distribuées dans de multiples téléchargements.
    Vous devez commencer par extraire les sources racines depuis le fichier <filename>&ojdk-tarball;</filename>, allez
    dans le répertoire extrait, ensuite continuez avec les instruction suivantes :
     </para>
<screen>
<userinput>cat &gt; subprojects.md5 &lt;&lt; EOF &amp;&amp;
&corba-md5sum;  corba.tar.bz2
&hotspot-md5sum;  hotspot.tar.bz2
&jaxp-md5sum;  jaxp.tar.bz2
&jaxws-md5sum;  jaxws.tar.bz2
&langtools-md5sum;  langtools.tar.bz2
&jdk-md5sum;  jdk.tar.bz2
&nashorn-md5sum;  nashorn.tar.bz2
EOF
for subproject in corba hotspot jaxp jaxws langtools jdk nashorn; do
  wget -c &ojdk-repo;/${subproject}/archive/&ojdk-tarball;        -O ${subproject}.tar.bz2
done &amp;&amp;
md5sum -c subprojects.md5 &amp;&amp;
for subproject in corba hotspot jaxp jaxws langtools jdk nashorn; do
  mkdir -pv ${subproject} &amp;&amp;
  tar -xf ${subproject}.tar.bz2 --strip-components=1 -C ${subproject}
done</userinput>
</screen>
   <para>
      Si vous avez téléchargé la suite de tests facultative, décompressez la également:
    </para>
<screen>
<userinput>tar -xf ../jtreg-&jtreg-version;.tar.gz</userinput>
</screen>
<note>
      <para>
         Avant de continuer, vous devez vous assurer que votre variable d'environnement
         <envar>PATH</envar> contient l'endroit du compilateur Java utilisé pour boostrapper <application>OpenJDK</application>.
         C'est le seul impératif pour l'environnement. Les installations modernes de Java n'ont pas besoin de
         <envar>JAVA_HOME</envar> et <envar>CLASSPATH</envar> n'est pas utilisé ici. De plus les développeur d'OpenJDK
         recommandent de ne pas initialiser  <envar>JAVA_HOME</envar>.
       </para>
      <para>
        Le système de construction ne supporte pas le paramètre <option>-j</option> dans
        <envar>MAKEFLAGS</envar>.
      </para>
    </note>
    <para>Configurez et construisez le paquet avec les commandes suivantes
    (la valeur --with-milestone peut être modifiée selon les préférences de l'utilisateur):</para>
<screen>
<userinput>unset JAVA_HOME               &amp;&amp;
sh ./configure                   --with-update-version=&ojdk-upd;      --with-build-number=&ojdk-bd;       --with-milestone=BLFS         --enable-unlimited-crypto     --with-zlib=system            --with-giflib=system       &amp;&amp;
make DEBUG_BINARIES=true all  &amp;&amp;
find build/*/images/j2sdk-image -iname *.diz -delete
</userinput>
</screen>
    <note>
      <para>
        Les tests impliqueront des communications entre paires de JVM en utilisant des interfaces réseaux, donc
        le réseau doit être démarré. Sinon, pas seulement ces tests échoueront, mais le nettoyage des tests
        laissera des JVM orphelines lancées. Il y en aura beaucoup. Rédémarrer peut être la solution la plus simple.
     </para>
    </note>
    <para>
      Tester la nouvelle version construite
      de JVM implique quelques étapes. En premier, il est mieux de lancer la suite de test dans un
      frame buffer sur un affichage différent, en utilisant
       Xvfb:
    </para>
<screen role='nodump'>
<userinput>if [ -n "$DISPLAY" ]; then
  OLD_DISP=$DISPLAY
fi
export DISPLAY=:20
nohup Xvfb $DISPLAY                                         -fbdir $(pwd)                                    -pixdepths 8 16 24 32 > Xvfb.out 2>&amp;1 &amp;
echo $! > Xvfb.pid
echo Waiting for Xvfb to initialize; sleep 1
nohup twm -display $DISPLAY           -f /dev/null > twm.out 2>&amp;1            &amp;
echo $! > twm.pid
echo Waiting for twm to initialize; sleep 1
xhost +</userinput>
</screen>
    <para>
      Ensuite, il est nécéssaire de modifier quelques fichiers:
    </para>
<screen role='nodump'>
<userinput>echo -e "
jdk_all = :jdk_core           \
          :jdk_svc            \
          :jdk_beans          \
          :jdk_imageio        \
          :jdk_sound          \
          :jdk_sctp           \
          com/sun/awt         \
          javax/accessibility \
          javax/print         \
          sun/pisces          \
          com/sun/java/swing" >> jdk/test/TEST.groups &amp;&amp;
sed -e 's/all:.*jck.*/all: jtreg/'          -e '/^JTREG /s@$(JT_PLATFORM)/@@'      -i langtools/test/Makefile
</userinput>
</screen>
    <para>
      Quelques variables doivent être initialisée:
    </para>
<screen role='nodump'>
<userinput>JT_JAVA=$(type -p javac | sed 's@/bin.*@@') &amp;&amp;
JT_HOME=$(pwd)/jtreg                        &amp;&amp;
PRODUCT_HOME=$(echo $(pwd)/build/*/images/j2sdk-image)</userinput>
</screen>
    <para>
      Les tests sont lancé comme suivant:
    </para>
<screen role='nodump'>
<userinput>LANG=C make -k -C test                                  JT_HOME=${JT_HOME}                          JT_JAVA=${JT_JAVA}                          PRODUCT_HOME=${PRODUCT_HOME} all
LANG=C ${JT_HOME}/bin/jtreg -a -v:fail,error                 -dir:$(pwd)/hotspot/test                     -k:!ignore                                  -jdk:${PRODUCT_HOME}                         :jdk</userinput>
</screen>
    <para>
      Les résultats des tests peuvent être comparé avec ces
      <ulink url="http://download.java.net/openjdk/testresults/8/">résultats</ulink>
      , bien qu'ils soient lancés sur une nouvelle version.
       Quelques échecs peuvent être rencontrés, le nombre dépend de nombreuses
       condition, comme si l'ordinateur est connecté sur un résau. Ausi, certain test
       peuvent dépasser le temps si la machine est sous chargé.
     </para>
    <para>
      Ensuite quelques nettoyages doivent être fait. Les instructions suivantes arrêtent seulement le frame buffer, mais il a été signalé
      que quelque VM java peuvent rester lancées après les tests, il est donc nécessaire de vérifier les processus
      orphelins.
    </para>
<screen role='nodump'>
<userinput>kill -9 `cat twm.pid`  &amp;&amp;
kill -9 `cat Xvfb.pid` &amp;&amp;
rm -f Xvfb.out twm.out &amp;&amp;
rm -f Xvfb.pid twm.pid &amp;&amp;
if [ -n "$OLD_DISP" ]; then
  DISPLAY=$OLD_DISP
fi</userinput>
</screen>
<para>Installez le paquet avec les commandes suivantes en tant qu'utilisateur
    <systemitem class="username">root</systemitem>&nbsp;:</para>
<screen role="root">
<userinput>cp -RT build/*/images/j2sdk-image /opt/OpenJDK-&openjdk-version; &amp;&amp;
chown -R root:root /opt/OpenJDK-&openjdk-version;</userinput>
</screen>
    <para>
      Il y a maintenant deux SDK d'<application>OpenJDK</application> installé dans
      <filename class="directory">/opt</filename>. Vous pouvez décider de laquelle vous voulez utiliser
      par défaut. Normalement, vous devez opter pour la version
      <application>OpenJDK</application> que vous venez d'installer. Dans ce cas, faite la ligne suivante en tant qu'utilisateur
      <systemitem class="username">root</systemitem> :
    </para>
<screen role="root">
<userinput>ln -v -nsf OpenJDK-&openjdk-version; /opt/jdk</userinput>
</screen>
    <para>Si vous le souhaitez, vous pouvez installer un fichier .desktop
correspondant à une netrée dans le menu du bureau pour <command>policytool</command>. En premier,
vous devez obtenir un icone de <xref linkend="icedtea-web"/>:</para>
<screen>
<userinput>tar -xf ../icedtea-web-&icedtea-web-version;.tar.gz          icedtea-web-&icedtea-web-version;/javaws.png         --strip-components=1</userinput>
</screen>
<para>
Maintenant, en tant
qu'utilisateur <systemitem class="username">root</systemitem> :</para>
<screen role="root">
<userinput>mkdir -pv /usr/share/applications &amp;&amp;
cat &gt; /usr/share/applications/openjdk-8-policytool.desktop &lt;&lt; "EOF" &amp;&amp;
<literal>[Desktop Entry]
Name=OpenJDK Java Policy Tool
Name[pt_BR]=OpenJDK Java - Ferramenta de Pol&#237;tica
Comment=OpenJDK Java Policy Tool
Comment[pt_BR]=OpenJDK Java - Ferramenta de Pol&#237;tica
Exec=/opt/jdk/bin/policytool
Terminal=false
Type=Application
Icon=javaws
Categories=Settings;</literal>
EOF
install -v -Dm0644 javaws.png /usr/share/pixmaps/javaws.png</userinput>
</screen>
    <para>Le choix de pt_BR est juste un exemple. Vous pouvez ajouter des traductions en ajoutant
    les lignes correspondantes à votre locale, par exemple
    fr_FR, avec les valeurs
    <quote>Name[fr_FR]=</quote> et <quote>Comment[fr_FR]=</quote> données par votre traduction. </para>
</sect2>
  <sect2 role="commands">
    <title>Explications des commandes</title>
    <para>
      <command>sh configure...</command>: Le niveau supérieur de
      <filename>configure</filename> est une enveloppe pour autotools.
      Ce n'est pas un éxécutable et il doit être lancé avec <command>sh</command>.
    </para>
    <para><option>--with-boot-jdk</option>&nbsp;: Ce paramètre fournit l'emplacement
    du <application>JDK</application> temporaire.Ce n'est normalement pas nécéssaire si <command>java</command>
    est trouvé dans le <envar>PATH</envar>.
</para>
    <para>
      <parameter>--with-update-version</parameter>: Actuellement, le système de construction n'inclu pas le numéro de mise
      à jour dans la chaine de version. Il est spécifié ici.
    </para>
    <para>
      <parameter>--with-build-number</parameter>: De nouveau, le sysètme de construction n'inclu pas le numéro de
      construction dans la chaîne de version. Il est spécifié ici également.
    </para>
    <para>
      <parameter>--with-milestone</parameter>: Utilisé pour personnaliser la chaîne de version.
    </para>
    <para>
      <parameter>--enable-unlimited-crypto</parameter>: A cause des limitations de l'usage de la cryptographie
      dans certain pays, il y a le possibilité de limiter la taille des clés de codage et l'utilisation de certains
      algorythmes dans un fichier de filtrage. Ce paramètre permet de garder un fichier de filtrage sans restriction. Il
      est de la responsabilité de l'utilisateur de s'assurer de son propre respect de la loi.
    </para>
    <para>
      <parameter>--with-zlib=system, --with-giflib=system</parameter>: Permet
      d'utiliser les bibliothèques du système au lieu de celles livrées.
    </para>
    <para>
      <option>--with-jobs=N</option>: Permet d'initialiser le nombre de travaux pour <command>make</command>
      à N. Par défaut, il s'agit du résultat du calcul prenant en compte la mémoire disponible et le nomvre de processeurs
      . Notez que si vous spécifiez N=1, certaines parallélisations peuvent être utilisées pendant la construction.
     Les SBU donnés sont avec les travaux parallèles désactivés, sur un simple processeur, simple coeur, sur une machine virtuelle.
    </para>
    <para>
      <option>--with-cacerts-file=...</option>: Spécifie ou trouver un fichier
      <filename>cacerts</filename>, typiquement <filename>
      /opt/jdk/jre/lib/security</filename>. sinon, un fichier vide est créé. Vous pouvez l'avoir eu avec une précédente
      version du paquet, ou utiliser le script suivant pour le générer.
    </para>
    <para>
      <command>make DEBUG_BINARIES=true all</command>: La constuction échoue sur les
       machines 32 bits si
       DEBUG_BINARIES n'est pas initialisé à true.
    </para>
    <para>
      <command>find ... -iname '*.diz' -delete</command>: Cette comande suppriment les fichier redondants.
    </para>
  </sect2>
  <sect2 role="configuration" id="openjdk-config" xreflabel="Configuration d'OpenJDK" >
    <title>Configuration de OpenJDK</title>
    <sect3>
      <title>Information de configuration</title>
    <para>Normallement, l'environnement JAVA a été configurée après l'installation de la version binaire,
     et peut être utilisé avec le paquet fraichement construit aussi bien. Regardez
    <xref linkend="ojdk-conf"/> dans le cas ou vous voudriez modifier quelque chose.
    </para>
<para>Pour tester que les pages de man sont correctement installées, tapez <command>source /etc/profile</command> et <command>man java</command> pour afficher les pages de man respectives.</para>
    </sect3>
    <sect3 id='ojdk-certs' xreflabel="Certificats de l'autorité de certification JRE">
      <title>Installez ou mettez à jour les fichiers "JRE Certificate Authority Certificates" (cacerts)</title>
      <para>
        <application>OpenJDK</application> utilise son propre format pour les certificats CA. Ces certificats sont placés
        dans un fichier nommé <filename>
        /opt/jdk/jre/lib/security/cacerts</filename>. Ce fichier peut être généré depuis un fichier installé
        en utilisant les instructions de la page
        <xref linkend="cacerts"/>, en utilisant la procedure suivante
        Commencez par générer le script <command>mkcacerts</command>
      en tant qu'utilisateur <systemitem class="username">root</systemitem> :
      </para>
<screen role="root">
<userinput>cat &gt; /opt/jdk/bin/mkcacerts &lt;&lt; "EOF"
<literal>#!/bin/sh
# Simple script to extract x509 certificates and create a JRE cacerts file.
function get_args()
    {
        if test -z "${1}" ; then
            showhelp
            exit 1
        fi
        while test -n "${1}" ; do
            case "${1}" in
                -f | --cafile)
                    check_arg $1 $2
                    CAFILE="${2}"
                    shift 2
                    ;;
                -d | --cadir)
                    check_arg $1 $2
                    CADIR="${2}"
                    shift 2
                    ;;
                -o | --outfile)
                    check_arg $1 $2
                    OUTFILE="${2}"
                    shift 2
                    ;;
                -k | --keytool)
                    check_arg $1 $2
                    KEYTOOL="${2}"
                    shift 2
                    ;;
                -s | --openssl)
                    check_arg $1 $2
                    OPENSSL="${2}"
                    shift 2
                    ;;
                -h | --help)
                    showhelp
                    exit 0
                    ;;
                *)
                    showhelp
                    exit 1
                    ;;
            esac
        done
    }
function check_arg()
    {
        echo "${2}" | grep -v "^-" > /dev/null
        if [ -z "$?" -o ! -n "$2" ]; then
            echo "Error:  $1 requires a valid argument."
            exit 1
        fi
    }
# The date binary is not reliable on 32bit systems for dates after 2038
function mydate()
    {
        local y=$( echo $1 | cut -d" " -f4 )
        local M=$( echo $1 | cut -d" " -f1 )
        local d=$( echo $1 | cut -d" " -f2 )
        local m
        if [ ${d} -lt 10 ]; then d="0${d}"; fi
        case $M in
            Jan) m="01";;
            Feb) m="02";;
            Mar) m="03";;
            Apr) m="04";;
            May) m="05";;
            Jun) m="06";;
            Jul) m="07";;
            Aug) m="08";;
            Sep) m="09";;
            Oct) m="10";;
            Nov) m="11";;
            Dec) m="12";;
        esac
        certdate="${y}${m}${d}"
    }
function showhelp()
    {
        echo "`basename ${0}` creates a valid cacerts file for use with IcedTea."
        echo ""
        echo "        -f  --cafile     The path to a file containing PEM"
        echo "                         formated CA certificates. May not be"
        echo "                         used with -d/--cadir."
        echo ""
        echo "        -d  --cadir      The path to a directory of PEM formatted"
        echo "                         CA certificates. May not be used with"
        echo "                         -f/--cafile."
        echo ""
        echo "        -o  --outfile    The path to the output file."
        echo ""
        echo "        -k  --keytool    The path to the java keytool utility."
        echo ""
        echo "        -s  --openssl    The path to the openssl utility."
        echo ""
        echo "        -h  --help       Show this help message and exit."
        echo ""
        echo ""
    }
# Initialize empty variables so that the shell does not pollute the script
CAFILE=""
CADIR=""
OUTFILE=""
OPENSSL=""
KEYTOOL=""
certdate=""
date=""
today=$( date +%Y%m%d )
# Process command line arguments
get_args ${@}
# Handle common errors
if test "${CAFILE}x" == "x" -a "${CADIR}x" == "x" ; then
    echo "ERROR!  You must provide an x509 certificate store!"
    echo "'$(basename ${0}) --help' for more info."
    echo ""
    exit 1
fi
if test "${CAFILE}x" != "x" -a "${CADIR}x" != "x" ; then
    echo "ERROR!  You cannot provide two x509 certificate stores!"
    echo "'$(basename ${0}) --help' for more info."
    echo ""
    exit 1
fi
if test "${KEYTOOL}x" == "x" ; then
    echo "ERROR!  You must provide a valid keytool program!"
    echo "'$(basename ${0}) --help' for more info."
    echo ""
    exit 1
fi
if test "${OPENSSL}x" == "x" ; then
    echo "ERROR!  You must provide a valid path to openssl!"
    echo "'$(basename ${0}) --help' for more info."
    echo ""
    exit 1
fi
if test "${OUTFILE}x" == "x" ; then
    echo "ERROR!  You must provide a valid output file!"
    echo "'$(basename ${0}) --help' for more info."
    echo ""
    exit 1
fi
# Get on with the work
# If using a CAFILE, split it into individual files in a temp directory
if test "${CAFILE}x" != "x" ; then
    TEMPDIR=`mktemp -d`
    CADIR="${TEMPDIR}"
    # Get a list of staring lines for each cert
    CERTLIST=`grep -n "^-----BEGIN" "${CAFILE}" | cut -d ":" -f 1`
    # Get a list of ending lines for each cert
    ENDCERTLIST=`grep -n "^-----END" "${CAFILE}" | cut -d ":" -f 1`
    # Start a loop
    for certbegin in `echo "${CERTLIST}"` ; do
        for certend in `echo "${ENDCERTLIST}"` ; do
            if test "${certend}" -gt "${certbegin}"; then
                break
            fi
        done
        sed -n "${certbegin},${certend}p" "${CAFILE}" > "${CADIR}/${certbegin}.pem"
        keyhash=`${OPENSSL} x509 -noout -in "${CADIR}/${certbegin}.pem" -hash`
        echo "Generated PEM file with hash:  ${keyhash}."
    done
fi
# Write the output file
for cert in `find "${CADIR}" -type f -name "*.pem" -o -name "*.crt"`
do
    # Make sure the certificate date is valid...
    date=$( ${OPENSSL} x509 -enddate -in "${cert}" -noout | sed 's/^notAfter=//' )
    mydate "${date}"
    if test "${certdate}" -lt "${today}" ; then
        echo "${cert} expired on ${certdate}! Skipping..."
        unset date certdate
        continue
    fi
    unset date certdate
    ls "${cert}"
    tempfile=`mktemp`
    certbegin=`grep -n "^-----BEGIN" "${cert}" | cut -d ":" -f 1`
    certend=`grep -n "^-----END" "${cert}" | cut -d ":" -f 1`
    sed -n "${certbegin},${certend}p" "${cert}" > "${tempfile}"
    echo yes | env LC_ALL=C "${KEYTOOL}" -import                                                              -alias `basename "${cert}"`                                          -keystore "${OUTFILE}"                                               -storepass 'changeit'                                                -file "${tempfile}"
    rm "${tempfile}"
done
if test "${TEMPDIR}x" != "x" ; then
    rm -rf "${TEMPDIR}"
fi
exit 0</literal>
EOF
chmod -c 0755 /opt/jdk/bin/mkcacerts</userinput>
</screen>
  <note>
    <para>
      Faire un très grand copier/coller directement dans un terminal peut donner un fichier corrompu.Copier depuis un éditeur
     peut contourner ce problème.
    </para>
  </note>
    <para>
    Générez le fichier <filename>cacerts</filename> de <application>OpenJDK</application> en tant qu'utilisateur
    <systemitem class="username">root</systemitem> :</para>
<screen role="root">
<userinput>if [ -f /opt/jdk/jre/lib/security/cacerts ]; then
  mv /opt/jdk/jre/lib/security/cacerts      /opt/jdk/jre/lib/security/cacerts.bak
fi &amp;&amp;
/opt/jdk/bin/mkcacerts                         -d "/etc/ssl/certs/"                   -k "/opt/jdk/bin/keytool"              -s "/usr/bin/openssl"                  -o "/opt/jdk/jre/lib/security/cacerts"</userinput>
</screen>
    <para>Utilisez les commandes suivantes pour vérifier si le fichier
    <filename>cacerts</filename> a été installé avec succès:</para>
<screen role="root">
<userinput>cd /opt/jdk
bin/keytool -list -keystore jre/lib/security/cacerts</userinput>
</screen>
    <para>A l'invite "Enter keystore password:", appuyez sur "Enter" s'il n'y a pas de mots de passe
    de défini. Si le fichier <filename>cacerts</filename>
    est installé correctement, vous verrez une liste de certificats avec des informations relatives à chacun.
    Sinon, vous devez les réinstaller.</para>
    </sect3>
  </sect2>
  <sect2 role="content">
    <title>Contenu</title>
    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoire installé</segtitle>
      <seglistitem>
        <seg>appletviewer, extcheck, idlj, jar,
        jarsigner, java, javac, javadoc, javah, javap, java-rmi.cgi,
        jcmd, jconsole, jdb, jdeps, jhat, jinfo, jjs, jmap, jps,
        jrunscript, jsadebugd, jstack, jstat, jstatd, keytool,
        native2ascii, orbd, pack200, policytool, rmic, rmid, rmiregistry,
        schemagen, serialver, servertool, tnameserv, unpack200,
        wsgen, wsimport, et xjc</seg>
        <seg>/opt/OpenJDK-&openjdk-version;/lib/*, and
        /opt/OpenJDK-&openjdk-version;/jre/lib/*</seg>
        <seg>/opt/OpenJDK-&openjdk-version;</seg>
      </seglistitem>
    </segmentedlist>
    <variablelist>
      <bridgehead renderas="sect3">Description courte</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>
      <varlistentry id="appletviewer">
        <term><command>appletviewer</command></term>
        <listitem>
          <para>autorise de lancer des applets en dehors du navigateur web.</para>
          <indexterm zone="openjdk appletviewer">
            <primary sortas="b-appletviewer">appletviewer</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="extcheck">
        <term><command>extcheck</command></term>
        <listitem>
          <para>vérifie un fichier jar spécifié pour les conflits de titre et de version avec toutes les extensions installés dans
          le logiciel <application>OpenJDK</application>.</para>
          <indexterm zone="openjdk extcheck">
            <primary sortas="b-extcheck">extcheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="idlj">
        <term><command>idlj</command></term>
        <listitem>
          <para>génère les liaisons Java depuis un fichier IDL donné.</para>
          <indexterm zone="openjdk idlj">
            <primary sortas="b-idlj">idlj</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jar">
        <term><command>jar</command></term>
        <listitem>
          <para>combine des fichiers différents en une seule archive jar.</para>
          <indexterm zone="openjdk jar">
            <primary sortas="b-jar">jar</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jarsigner">
        <term><command>jarsigner</command></term>
        <listitem>
          <para>signe les fichiers jar et vérifie la signature et l'intégrité d'un fichier jar signé.</para>
          <indexterm zone="openjdk jarsigner">
            <primary sortas="b-jarsigner">jarsigner</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="java-prog">
        <term><command>java</command></term>
        <listitem>
          <para>lance une application Java en démarrant l'environnement d'exécution Java,
             chargeant une classe spécifiée et invoquant sa méthode main.</para>
          <indexterm zone="openjdk java-prog">
            <primary sortas="b-java-prog">java</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="javac">
        <term><command>javac</command></term>
        <listitem>
          <para>lit les définitions de classe et d'interface, écrit un langage de programmation Java,
             et les compiles en des fichiers de classe bytecode.</para>
          <indexterm zone="openjdk javac">
            <primary sortas="b-javac">javac</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="javadoc">
        <term><command>javadoc</command></term>
        <listitem>
          <para>analyse les déclarations et les commentaires de documentation dans un ensemble de fichiers
             source Java et produit l'ensemble correspondant des pages HTML décrivant les classes, les interfaces
             les méthodes de constructions et les champs.</para>
          <indexterm zone="openjdk javadoc">
            <primary sortas="b-javadoc">javadoc</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="javah">
        <term><command>javah</command></term>
        <listitem>
          <para>génère les entêtes C et les fichiers sources qui sont nécéssaires pour implémenter
             des méthodes natives.</para>
          <indexterm zone="openjdk javah">
            <primary sortas="b-javah">javah</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="javap">
        <term><command>javap</command></term>
        <listitem>
          <para>désassemble un fichier de classe Java.</para>
          <indexterm zone="openjdk javap">
            <primary sortas="b-javap">javap</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="java-rmi.cgi">
        <term><command>java-rmi.cgi</command></term>
        <listitem>
          <para>est le client RMI de Java.</para>
          <indexterm zone="openjdk java-rmi.cgi">
            <primary sortas="b-java-rmi.cgi">java-rmi.cgi</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jcmd">
        <term><command>jcmd</command></term>
        <listitem>
          <para>est un utilitaire pour envoyer les demandes de diagnostique à une machine virtuelle Java.</para>
          <indexterm zone="openjdk jcmd">
            <primary sortas="b-jcmd">jcmd</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jconsole">
        <term><command>jconsole</command></term>
        <listitem>
          <para>est un outil graphique de la console pour surveiller et gérer les applications Java locales et distantes et les machines virtuelles.</para>
          <indexterm zone="openjdk jconsole">
            <primary sortas="b-jconsole">jconsole</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jdb">
        <term><command>jdb</command></term>
        <listitem>
          <para>est un simple débogueur en ligne de commande pour les classes Java.</para>
          <indexterm zone="openjdk jdb">
            <primary sortas="b-jdb">jdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jdeps">
        <term><command>jdeps</command></term>
        <listitem>
          <para>montre les dépendances (package-level ou class-level) des fichiers de classes Java.
          </para>
          <indexterm zone="openjdk jdeps">
            <primary sortas="b-jdeps">jdeps</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jhat">
        <term><command>jhat</command></term>
        <listitem>
          <para>analyse un fichier Java de heap dump et permet de le voir dans un navigateur web.</para>
          <indexterm zone="openjdk jhat">
            <primary sortas="b-jhat">jhat</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jinfo">
        <term><command>jinfo</command></term>
        <listitem>
          <para>affiche les informations de configuration de Java pour un processus Java donné,
             un fichier core, ou un serveur de déboguage distant.</para>
          <indexterm zone="openjdk jinfo">
            <primary sortas="b-jinfo">jinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jjs">
        <term><command>jjs</command></term>
        <listitem>
          <para>est un outil en ligne de commande utilisé pour appeler le moteur Nashorn. Il
          peut être utilisé pour interpréter un ou plusieurs fichiers de script, ou les lancer dans un
          shell intéractif.</para>
          <indexterm zone="openjdk jjs">
            <primary sortas="b-jjs">jjs</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jmap">
        <term><command>jmap</command></term>
        <listitem>
          <para>affiche les cartes mémoires des objets partagés ou les détails mémoire d'un processus donné, d'un fichier core, ou d'un serveur de déboguage distant.</para>
          <indexterm zone="openjdk jmap">
            <primary sortas="b-jmap">jmap</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jps">
        <term><command>jps</command></term>
        <listitem>
          <para>liste les JVM instrumenté sur le système cible.</para>
          <indexterm zone="openjdk jps">
            <primary sortas="b-jps">jps</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jrunscript">
        <term><command>jrunscript</command></term>
        <listitem>
          <para>est un script shell en ligne de commandes.</para>
          <indexterm zone="openjdk jrunscript">
            <primary sortas="b-jrunscript">jrunscript</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jsadebugd">
        <term><command>jsadebugd</command></term>
        <listitem>
          <para>s'attache à un processus Java ou à un fichier core et agit en tant que serveur de déboguage.</para>
          <indexterm zone="openjdk jsadebugd">
            <primary sortas="b-jsadebugd">jsadebugd</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jstack">
        <term><command>jstack</command></term>
        <listitem>
          <para>affiche la pile des traces JAVA, des treads Java pour pour un processus Java donné,
             un fichier core, ou un serveur de déboguage distant.</para>
          <indexterm zone="openjdk jstack">
            <primary sortas="b-jstack">jstack</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jstat">
        <term><command>jstat</command></term>
        <listitem>
          <para>affiche les statistiques de performance pour une JVM instrumentée.</para>
          <indexterm zone="openjdk jstat">
            <primary sortas="b-jstat">jstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="jstatd">
        <term><command>jstatd</command></term>
        <listitem>
          <para>est une application serveur RMI qui surveille la création et l'arrêt des JVM instrumentés.</para>
          <indexterm zone="openjdk jstatd">
            <primary sortas="b-jstatd">jstatd</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="keytool">
        <term><command>keytool</command></term>
        <listitem>
          <para>est un utilitaire de gestion des clés et certificats.</para>
          <indexterm zone="openjdk keytool">
            <primary sortas="b-keytool">keytool</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="mkcacerts">
        <term><command>mkcacerts</command></term>
        <listitem>
          <para> est un script simple pour extraire les certificats x509 et créer
           un fichier cacerts JRE en utilisant
          <command>keytool</command>.</para>
          <indexterm zone="openjdk mkcacerts">
            <primary sortas="b-mkcacerts">mkcacerts</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="native2ascii">
        <term><command>native2ascii</command></term>
        <listitem>
          <para> converti les fichiers qui contiennent des caractères non-supporté par l'encodage en des fichiers
             contenant des caractères Latin-1 ou Unicode.</para>
          <indexterm zone="openjdk native2ascii">
            <primary sortas="b-native2ascii">native2ascii</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="orbd">
        <term><command>orbd</command></term>
        <listitem>
          <para>est utilisé pour activer les clients pour trouver de façon transparente et invoquer
             les objets persistants sur les serveurs dans un environnement CORBA.</para>
          <indexterm zone="openjdk orbd">
            <primary sortas="b-orbd">orbd</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="pack200">
        <term><command>pack200</command></term>
        <listitem>
          <para>est une application Java qui transforme un fichier jar en un fichier compressé pack200
             un utilisant un comptacteur gzip.</para>
          <indexterm zone="openjdk pack200">
            <primary sortas="b-pack200">pack200</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="policytool">
        <term><command>policytool</command></term>
        <listitem>
          <para>crée et gère les fichiers de politique graphiquement.</para>
          <indexterm zone="openjdk policytool">
            <primary sortas="b-policytool">policytool</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="rmic">
        <term><command>rmic</command></term>
        <listitem>
          <para>génère des fichiers de classes tampon et squelette pour des objets distants depuis le nom des classes JAVA compilées qui
             contiennent des implémentations d'objets distants.</para>
          <indexterm zone="openjdk rmic">
            <primary sortas="b-rmic">rmic</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="rmid">
        <term><command>rmid</command></term>
        <listitem>
          <para>démarre le démon d'activation du système.</para>
          <indexterm zone="openjdk rmid">
            <primary sortas="b-rmid">rmid</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="rmiregistry">
        <term><command>rmiregistry</command></term>
        <listitem>
          <para>crée et démarre un registre d'objet distant sur le port spécifié de l'hôte actuel.</para>
          <indexterm zone="openjdk rmiregistry">
            <primary sortas="b-rmiregistry">rmiregistry</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="schemagen">
        <term><command>schemagen</command></term>
        <listitem>
          <para>est un générateur de schéma de liaison Java XML.</para>
          <indexterm zone="openjdk schemagen">
            <primary sortas="b-schemagen">schemagen</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="serialver">
        <term><command>serialver</command></term>
        <listitem>
          <para>retourne l'UID pour une ou plusieurs classes sous une forme appropriée pour la copie dans une classe évolutive.</para>
          <indexterm zone="openjdk serialver">
            <primary sortas="b-serialver">serialver</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="servertool">
        <term><command>servertool</command></term>
        <listitem>
          <para>fournit une interface facile à utiliser pour les programmeurs d'applications pour
             inscrire, désinscrire, démarrer et arrêter un serveur.</para>
          <indexterm zone="openjdk servertool">
            <primary sortas="b-servertool">servertool</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="tnameserv">
        <term><command>tnameserv</command></term>
        <listitem>
          <para>démarre le serveur de nom Java IDL.</para>
          <indexterm zone="openjdk tnameserv">
            <primary sortas="b-tnameserv">tnameserv</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="unpack200">
        <term><command>unpack200</command></term>
        <listitem>
          <para>est une implémentation native qui transforme un fichier produit par <application>pack200</application>
          en un fichier jar.</para>
          <indexterm zone="openjdk unpack200">
            <primary sortas="b-unpack200">unpack200</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="wsgen">
        <term><command>wsgen</command></term>
        <listitem>
          <para>génère des artifactes portables JAX-WS  utilisés dans les services web JAX-WS.</para>
          <indexterm zone="openjdk wsgen">
            <primary sortas="b-wsgen">wsgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="wsimport">
        <term><command>wsimport</command></term>
        <listitem>
          <para>génère des artifactes JAX-WS portables.</para>
          <indexterm zone="openjdk wsimport">
            <primary sortas="b-wsimport">wsimport</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <varlistentry id="xjc">
        <term><command>xjc</command></term>
        <listitem>
          <para>est un compilateur de liaison Java XML.</para>
          <indexterm zone="openjdk xjc">
            <primary sortas="b-xjc">xjc</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
</sect1>
