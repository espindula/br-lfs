<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY lua-download-http "http://www.lua.org/ftp/lua-&lua-version;.tar.gz">
  <!ENTITY lua-download-ftp  " ">
  <!ENTITY lua-md5sum        "efbb645e897eae37cad4344ce8b0a614">
  <!ENTITY lua-size          "246 Ko">
  <!ENTITY lua-buildsize     "3.5 Mo">
  <!ENTITY lua-time          "0.1 SBU">
]>

<sect1 id="lua" xreflabel="Lua-&lua-version;">
  <?dbhtml filename="lua.html"?>

  <sect1info>
    <othername>$LastChangedBy: igor $</othername>
    <date>$Date: 2013-06-19 13:58:39 +0200 (mer. 19 juin 2013) $</date>
  </sect1info>

  <title>Lua-&lua-version;</title>

  <indexterm zone="lua">
    <primary sortas="a-Lua">Lua</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction à Lua</title>

    <para>
      <application>Lua</application> is a powerful light-weight programming
      language designed for extending applications. It is also frequently used
      as a general-purpose, stand-alone language. <application>Lua</application>
      combines simple procedural syntax with powerful data description
      constructs based on associative arrays et extensible semantics. It is
      dynamically typed, interpreted from bytecodes, et has automatic memory
      management with garbage collection, making it ideal for configuration,
      scripting, et rapid prototyping. A fundamental concept in the design of
      <application>Lua</application> is to provide meta-mechanisms for
      implementing features, instead of providing a host of features directly in
      the language. For example, although <application>Lua</application> is not
      a pure object-oriented language, it does provide meta-mechanisms for
      implementing classes et inheritance. <application>Lua</application>'s
      meta-mechanisms bring an economy of concepts et keep the language small,
      while allowing the semantics to be extended in unconventional ways.
      Extensible semantics is a distinguishing feature of
      <application>Lua</application>. <application>Lua</application> is a
      language engine that you can embed into your application. This means that,
      besides syntax et semantics, it has an API that allows the application to
      exchange data with <application>Lua</application> programs et also to
      extend <application>Lua</application> with C functions. In this sense, it
      can be regarded as a language framework for building domain-specific
      languages. <application>Lua</application> is implemented as a small
      library of C functions, written in ANSI C, et compiles unmodified in all
      known platforms. The implementation goals are simplicity, efficiency,
      portability, et low embedding cost. The result is a fast language engine
      with small footprint, making it ideal in embedded systems too.
    </para>

    &lfs73_checked;

    <bridgehead renderas="sect3">Information sur le paquet </bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Téléchargement (HTTP) : <ulink url="&lua-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Téléchargement (FTP) : <ulink url="&lua-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Somme de contrôle MD5 du téléchargement : &lua-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Taille du téléchargement : &lua-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation de l'espace disque requis : &lua-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimation du temps de construction : &lua-time;
        </para>
      </listitem>
    </itemizedlist>

    <para condition="html" role="usernotes">Notes utilisateur :
      <ulink url="&blfs-wiki;/lua"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation de Lua</title>

    <para>
      Installez <application>Lua</application> en lançant les commandes suivantes :
       
    </para>

<screen><userinput>make linux</userinput></screen>

    <para>
      Pour tester le résultat, tapez : <command>make test</command>.
    </para>

    <para>
      Maintenant, en tant qu'utilisateur <systemitem class="username">root</systemitem> :
    </para>

<screen role="root"><userinput>make INSTALL_TOP=/usr install &amp;&amp;
mkdir -pv /usr/share/doc/lua-&lua-version; &amp;&amp;
cp -v doc/*.{html,css,gif,png} /usr/share/doc/lua-&lua-version;</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title>Contenu</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>
      <segtitle>Répertoires installés</segtitle>

      <seglistitem>
        <seg>
          lua et luac
        </seg>
        <seg>
          liblua.a
        </seg>
        <seg>
          /usr/lib/lua,
          /usr/share/lua et
          /usr/share/doc/lua-&lua-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Description courte</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="lua-prog">
        <term><command>lua</command></term>
        <listitem>
          <para>
            is the standalone Lua interpreter.
          </para>
          <indexterm zone="lua lua-prog">
            <primary sortas="b-lua">lua</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="luac">
        <term><command>luac</command></term>
        <listitem>
          <para>
            is the Lua compiler.
          </para>
          <indexterm zone="lua luac">
            <primary sortas="b-luac">luac</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
