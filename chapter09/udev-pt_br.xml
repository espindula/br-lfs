<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-config-udev">
  <?dbhtml filename="udev-pt_br.html"?>

<!--

Direitos autorais (Copyright): (c) 2022 Jamenson Ferreira Espindula de Almeida Melo (<jafesp@gmail.com>).

Direitos autorais da versão modificada traduzida para a língua 
portuguesa escrita e falada no Brasil: (c) 2022 Jamenson Ferreira 
Espindula de Almeida Melo (<jafesp@gmail.com>).

  Este trabalho de tradução do livro "Linux From Scratch" é classificado
  pela Free Software Foundation como sendo uma "versão modificada" do
  mencionado livro.  Em assim sendo, na qualidade de tradutor, produtor
  da "versão modificada" e titular dos direitos autorais sobre a versão
  traduzida para a língua portuguesa do livro "Linux From Scratch",
  concede-se a seguinte permissão:

  É concedida permissão para copiar, distribuir e (ou) modificar este
  livro "Linux From Scratch", versão traduzida para a língua portuguesa,
  sob os termos da Licença de Documentação Livre GNU, versão 1.3 ou
  qualquer versão posterior publicada pela Free Software Foundation; sem
  Seções Invariantes, sem Textos de Capa Frontal e sem Textos de Quarta
  Capa.  Uma cópia da licença está incluída na seção intitulada "Licença
  de Documentação Livre GNU".

# Atenção: todos os documentos aqui publicados são distribuídos sem qualquer garantia, implícita e (ou) explícita.

  Permission is granted to copy, distribute and (or) modify this book
  "Linux From Scratch", translated into Brazilian Portuguese, under the
  terms of the GNU Free Documentation License, Version 1.3 or any later
  version published by the Free Software Foundation; with no Invariant
  Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
  the license is included in the section entitled "GNU Free
  Documentation License".

# Warning: all the files herein published are released with no warranty, implicit and (or) explicit.
-->

  <title>Visão Geral do Manuseio de Dispositivos e Módulos</title>

  <indexterm zone="ch-config-udev">
    <primary sortas="a-Udev">Udev</primary>
    <secondary>usage</secondary>
  </indexterm>

  <para>No <xref linkend="chapter-building-system"/>, nós instalamos o 
  pacote udev quando <phrase revision="sysv">eudev</phrase> 
  <phrase revision="systemd">systemd</phrase> foi construído.  Antes de 
  entrarmos em detalhes referentes a como isso funciona, um histórico 
  breve dos métodos anteriores de manuseio de dispositivos é 
  oportuno.</para>

  <para>Sistemas Linux em geral tradicionalmente usavam um método de 
  criação de dispositivo estático, pelo qual muitos nós de dispositivos 
  eram criados sob <filename class="directory">/dev</filename> (as vezes 
  literalmente milhares de nós), independente de se os dispositivos de 
  hardware correspondentes atualmente existissem.  Isso tipicamente era 
  feito via um script <command>MAKEDEV</command>, o qual contém um 
  número de chamadas ao aplicativo <command>mknod</command> com os 
  números de dispositivo principal e secundário relevantes para cada 
  dispositivo possível que pudesse existir no mundo.</para>

  <para>Usando o método udev, somente aqueles dispositivos os quais são 
  detectados pelo kernel obtém nós de dispositivo criados para eles.  
  Como esses nós de dispositivo serão criados a cada vez que o sistema 
  inicializar, eles serão armazenados em um sistema de arquivos 
  <systemitem class="filesystem">devtmpfs</systemitem> (um sistema de 
  arquivos virtual que reside inteiramente na memória do sistema).  Nós 
  de dispositivo não exigem muito espaço, de forma que a memória que é 
  usada é insignificante.</para>

  <sect2>
    <title>Histórico</title>

    <para>Em fevereiro 2000, um novo sistema de arquivos chamado 
    <systemitem class="filesystem">devfs</systemitem> foi mesclado no 
    kernel 2.3.46 e foi feito disponível durante as séries 2.4 de 
    kernels estáveis.  Embora ele estivesse presente no próprio fonte do 
    kernel, esse método de criar dispositivos dinamicamente nunca 
    recebeu suporte decisivo das(os) desenvolvedoras(es) do kernel 
    centrais.</para>

    <para>O problema principal com a abordagem adotada pelo 
    <systemitem class="filesystem">devfs</systemitem> era a maneira como ele lidava 
    com detecção, criação e nomenclatura de dispositivo.  O último 
    problema, esse da nomenclatura de nó de dispositivo, era talvez o 
    mais crítico.  É aceito geralmente que, se nomes de dispositivo são 
    passíveis de serem configuráveis, então a política de nomenclatura 
    de dispositivo esteja a cargo de uma(m) administradora(r) do 
    sistema, não imposta sobre elas(es) por (quais)qualquer 
    desenvolvedoras(r(es)) específicas(o(s)).  O sistema de arquivos 
    <systemitem class="filesystem">devfs</systemitem> também sofria com 
    algumas condições que eram inerentes ao projeto dele e não poderiam 
    ser consertadas sem uma revisão substancial do kernel.  Ele ficou 
    marcado como obsoleto por um longo período &ndash; e foi finalmente 
    removido do kernel em junho de 2006.</para>

    <para>Com o desenvolvimento da árvore do kernel 2.5 instável, 
    liberada posteriormente como as séries 2.6 dos kernels estáveis, um 
    novo sistema de arquivos virtual chamado 
    <systemitem class="filesystem">sysfs</systemitem> veio a existir.  O trabalho do 
    <systemitem class="filesystem">sysfs</systemitem> é o de exportar 
    uma visão da configuração de hardware do sistema para processos de 
    espaço de usuária(o).  Com essa representação visível ao espaço de 
    usuária(o), a possibilidade de desenvolvimento de um substituto de 
    espaço de usuária(o) para o 
    <systemitem class="filesystem">devfs</systemitem> tornou-se muito mais 
    realista.</para>

  </sect2>

  <sect2>
    <title>Implementação do Udev</title>

    <sect3>
      <title>Sysfs</title>

      <para>O sistema de arquivos 
      <systemitem class="filesystem">sysfs</systemitem> foi mencionado brevemente 
      acima.  Alguém talvez questione como o 
      <systemitem class="filesystem">sysfs</systemitem> sabe sobre os dispositivos 
      presentes em um sistema e quais números de dispositivo deveriam 
      ser usados para eles.  Controladores que tenham sido compilados 
      diretamente no kernel registram os objetos deles com um 
      <systemitem class="filesystem">sysfs</systemitem> (devtmpfs 
      internamente) assim que eles são detectados pelo kernel.  Para 
      controladores compilados como módulos, esse registro acontecerá 
      quando o módulo for carregado.  Assim que o sistema de arquivos 
      <systemitem class="filesystem">sysfs</systemitem> for montado (em 
      /sys), os dados os quais os controladores registram com <systemitem 
      class="filesystem">sysfs</systemitem> ficam disponíveis para os 
      processos de espaço de usuária(o) e para udevd para processamento 
      (incluindo modificações para nós de dispositivo).</para>

    </sect3>

    <sect3>
      <title>Criação de Nó de Dispositivo</title>

      <para>Arquivos de dispositivo são criados pelo kernel por meio do 
      sistema de arquivos 
      <systemitem class="filesystem">devtmpfs</systemitem>.  Qualquer controlador 
      que deseje registrar um nó de dispositivo usará o 
      <systemitem class="filesystem">devtmpfs</systemitem> (via o núcleo do 
      controlador) para fazê-lo.  Quando uma instância do 
      <systemitem class="filesystem">devtmpfs</systemitem> é montada em 
      <filename class="directory">/dev</filename>, o nó de dispositivo 
      inicialmente será criado com um nome, permissões e proprietária(o) 
      fixos.</para>

      <para>Pouco tempo depois, o kernel enviará um uevent para 
      <command>udevd</command>.  Baseado nas regras especificadas nos 
      arquivos dentro dos diretórios 
      <filename class="directory">/etc/udev/rules.d</filename>, 
      <filename class="directory">/usr/lib/udev/rules.d</filename> e 
      <filename class="directory">/run/udev/rules.d</filename>, 
      <command>udevd</command> criará links simbólicos adicionais para o 
      nó de dispositivo, ou mudará as permissões, proprietária(o), ou 
      grupo deles, ou modificará a entrada de banco de dados do 
      <command>udevd</command> interna (nome) para aquele objeto.</para>

      <para>As regras nesses três diretórios são numeradas e todos os 
      três diretórios são mesclados.  Se <command>udevd</command> não 
      puder encontrar uma regra para o dispositivo que ele está criando, 
      então ele deixará as permissões e propriedade no que <systemitem 
      class="filesystem">devtmpfs</systemitem> usou inicialmente.</para>

    </sect3>

    <sect3 id="module-loading">
      <title>Carregamento de Módulo</title>

      <para>Controladores de dispositivo compilados como módulos talvez 
      tenham apelidos construídos dentro deles.  Apelidos são visíveis 
      na saída do aplicativo <command>modinfo</command> e geralmente 
      estão relacionados aos identificadores específicos ao barramento 
      dos dispositivos suportados por um módulo.  Por exemplo, o 
      controlador <emphasis>snd-fm801</emphasis> suporta dispositivos 
      PCI com ID de fornecedor 0x1319 e ID de dispositivo 0x0801, e tem 
      um apelido de 
      <quote>pci:v00001319d00000801sv*sd*bc04sc01i*</quote>.  Para a 
      maioria dos dispositivos, o controlador de barramento exporta o 
      apelido do controlador que lidaria com o dispositivo via 
      <systemitem class="filesystem">sysfs</systemitem>.  Por exemplo, o 
      arquivo 
      <filename>/sys/bus/pci/devices/0000:00:0d.0/modalias</filename> 
      pode conter a sequência de caracteres 
      <quote>pci:v00001319d00000801sv00001319sd00001319bc04sc01i00</quote>.  
      As regras padrão fornecidas com udev causarão 
      <command>udevd</command> chamar <command>/sbin/modprobe</command> 
      com o conteúdo da variável de ambiente do uevent 
      <envar>MODALIAS</envar> (o qual deveria ser o mesmo que o conteúdo 
      do arquivo <filename>modalias</filename> em sysfs), dessa forma 
      carregando todos os módulos cujos apelidos correspondem a essa 
      sequência de caracteres depois da expansão de carácter 
      curinga.</para>

      <para>Nesse exemplo, isso significa que, em adição a 
      <emphasis>snd-fm801</emphasis>, o obsoleto (e indesejado) 
      controlador <emphasis>forte</emphasis> será carregado se ele 
      estiver disponível.  Veja abaixo maneiras pelas quais o 
      carregamento de controladores indesejados pode ser evitado.</para>

      <para>O próprio kernel também é capaz de carregar módulos para 
      protocolos de rede, sistemas de arquivos e suporte NLS sob 
      demanda.</para>

    </sect3>

    <sect3>
      <title>Lidando com Dispositivos Plugáveis a Quente/Dinâmicos</title>

      <para>Quando você conecta um dispositivo, como um tocador de MP3 
      Universal Serial Bus (USB), o kernel reconhece que o dispositivo 
      agora está conectado e gera um uevent.  Esse uevent é então 
      tratado pelo <command>udevd</command> como descrito acima.</para>

    </sect3>

  </sect2>

  <sect2>
    <title>Problemas ao Carregar Módulos e Criar Dispositivos</title>

    <para>Existem uns poucos possíveis problemas quando se trata de 
    criar automaticamente nós de dispositivos.</para>

    <sect3>
      <title>Um módulo do kernel não é carregado automaticamente</title>

      <para>O Udev só carregará um módulo se ele tiver um apelido 
      específico a barramento e o controlador de barramento exportar 
      adequadamente os apelidos necessários para <systemitem 
      class="filesystem">sysfs</systemitem>.  Em outros casos, deve-se 
      organizar o carregamento de módulo por outros meios.  Com o 
      Linux-&linux-version;, udev é conhecido por carregar controladores 
      escritos adequadamente para dispositivos INPUT, IDE, PCI, USB, 
      SCSI, SERIO e FireWire.</para>

      <para>Para determinar se o controlador de dispositivo que você 
      exige tem o suporte necessário para udev, execute 
      <command>modinfo</command> com o nome de módulo como o argumento.  
      Agora tente localizar o diretório de dispositivo sob 
      <filename class="directory">/sys/bus</filename> e verifique se existe um 
      arquivo <filename>modalias</filename> lá.</para>

      <para>Se o arquivo <filename>modalias</filename> existir em 
      <systemitem class="filesystem">sysfs</systemitem>, então o 
      controlador suporta o dispositivo e pode falar com ele 
      diretamente, mas não tem o apelido, isso é um defeito no 
      controlador.  Carregue o controlador sem a ajuda do udev e espere 
      que o problema seja consertado posteriormente.</para>

      <para>Se não existir arquivo <filename>modalias</filename> no 
      diretório relevante sob 
      <filename class="directory">/sys/bus</filename>, então isso significa que 
      as(os) desenvolvedoras(es) do kernel ainda não adicionaram suporte 
      modalias para esse tipo de barramento.  Com Linux-&linux-version;, 
      esse é o caso com barramentos ISA.  Espere que esse problema seja 
      consertado em versões do kernel posteriores.</para>

      <para>Udev não é planejado para carregar controladores 
      <quote>encapsuladores</quote>, tais como 
      <emphasis>snd-pcm-oss</emphasis>, e controladores não hardware, 
      tais como <emphasis>loop</emphasis>, de maneira alguma.</para>

    </sect3>

    <sect3>
      <title>Um módulo do kernel não é carregado automaticamente, e udev 
      não é planejado para carregar ele</title>

      <para>Se o módulo <quote>encapsulador</quote> apenas aprimora a 
      funcionalidade fornecida por algum outro módulo (por exemplo, 
      <emphasis>snd-pcm-oss</emphasis> aprimora a funcionalidade de 
      <emphasis>snd-pcm</emphasis> tornando as placas de som disponíveis 
      para aplicações OSS), então configure <command>modprobe</command> 
      para carregar o encapsulador após o udev carregar o módulo 
      encapsulado.  Para fazer isso, adicione uma linha 
      <quote>softdep</quote> ao arquivo 
      <filename>/etc/modprobe.d/<replaceable>&lt;filename&gt;</replaceable>.conf</filename> 
      correspondente.  Por exemplo:</para>

<screen role="nodump"><literal>softdep snd-pcm post: snd-pcm-oss</literal></screen>

      <para>Observe que o comando <quote>softdep</quote> também permite 
      dependências <literal>pre:</literal>, ou uma mistura de ambas as 
      dependências <literal>pre:</literal> e <literal>post:</literal>.  
      Veja-se a página de manual <filename>modprobe.d(5)</filename> para 
      mais informação sobre a sintaxe e capacidades 
      <quote>softdep</quote>.</para>

      <para revision="sysv">Se o módulo em questão não é um encapsulador 
      e é útil por ele próprio, então configure o script de 
      inicialização <command>modules</command> para carregar esse módulo 
      na inicialização do sistema.  Para fazer isso, adicione o nome de 
      módulo ao arquivo <filename>/etc/sysconfig/modules</filename> em 
      uma linha separada.  Isso funciona para módulos encapsuladores 
      também, mas é abaixo do ideal naquele caso.</para>

    </sect3>

    <sect3>
      <title>Udev carrega algum módulo indesejado</title>

      <para>Ou não construa o módulo, ou coloque-o na lista negra em um 
      arquivo <filename>/etc/modprobe.d/blacklist.conf</filename> como 
      feito com o módulo <emphasis>forte</emphasis> no exemplo 
      abaixo:</para>

<screen role="nodump"><literal>blacklist forte</literal></screen>

      <para>Módulos em listas negras ainda podem ser carregados 
      manualmente com o comando explícito 
      <command>modprobe</command>.</para>

    </sect3>

    <sect3>
      <title>Udev cria um dispositivo incorretamente, ou faz um link simbólico errado</title>

      <para>Isso geralmente acontece se uma regra inesperadamente 
      corresponder com um dispositivo.  Por exemplo, uma regra mal 
      escrita pode corresponder com ambos um disco SCSI (como desejado) 
      e o dispositivo genérico SCSI correspondente (incorretamente) pelo 
      fornecedor.  Encontre a regra infratora e torne-a mais específica, 
      com a ajuda do comando <command>udevadm info</command>.</para>

    </sect3>

    <sect3>
      <title>Regra do Udev funciona de forma não confiável</title>

      <para>Isso talvez seja outra manifestação do problema anterior.  
      Se não, e sua regra usar atributos do 
      <systemitem class="filesystem">sysfs</systemitem>, então isso talvez seja um 
      problema de temporização do kernel, a ser consertado em kernels 
      posteriores.  Por hora, você pode contornar ele criando uma regra 
      que aguarda o atributo do 
      <systemitem class="filesystem">sysfs</systemitem> usado e adiciona ele ao 
      arquivo 
      <filename>/etc/udev/rules.d/10-wait_for_sysfs.rules</filename> 
      (crie esse arquivo se ele não existir).  Por favor notifique a 
      lista LFS Development se você o fizer e isso ajudar.</para>

    </sect3>

    <sect3>
      <title>Udev não cria um dispositivo</title>

      <para>O texto adicional assume que o driver está construído 
      estaticamente dentro do kernel ou já carregado como um módulo, e 
      que você já verificou que o udev não cria um dispositivo mal 
      nomeado.</para>

      <para>Udev não tem informação necessária para criar um nó de 
      dispositivo se um controlador de kernel não exportar os dados dele 
      para o <systemitem class="filesystem">sysfs</systemitem>.  Isso é 
      mais comum com controladores terceirizados oriundos de fora da 
      árvore do kernel.  Crie um nó de dispositivo estático em 
      <filename>/usr/lib/udev/devices</filename> com os números 
      principal/secundário apropriados (veja o arquivo 
      <filename>devices.txt</filename> dentro da documentação do kernel 
      ou a documentação fornecida pela(o) fornecedora(r) de controlador 
      terceirizado).  O nó de dispositivo estático será copiado para 
      <filename class="directory">/dev</filename> por 
      <command>udev</command>.</para>

    </sect3>

    <sect3>
      <title>Ordem de nomenclatura de dispositivo muda aleatoriamente após reinicializar</title>

      <para>Isso é devido ao fato de o udev, pelo projeto, lidar com 
      uevents e carregar módulos em paralelo, e assim em uma ordem 
      imprevisível.  Isso nunca será <quote>consertado</quote>.  Você 
      não deveria confiar que os nomes de dispositivos do kernel sejam 
      estáveis.  Em vez disso, crie suas próprias regras que fazem links 
      simbólicos com nomes estáveis baseados em alguns atributos 
      estáveis do dispositivo, tais como um número de série ou a saída 
      dos vários utilitários *_id instalados pelo udev.  Veja-se a 
      <xref linkend="ch-config-symlinks"/> e 
      <xref linkend="ch-config-network"/> para exemplos.</para>

    </sect3>

  </sect2>

  <sect2>
    <title>Leitura Útil</title>

    <para>Documentação útil adicional está disponível nos seguintes 
    sítios:</para>

    <itemizedlist>

      <listitem>

        <para>A Userspace Implementation of <systemitem class="filesystem">devfs</systemitem>
        <ulink url="http://www.kroah.com/linux/talks/ols_2003_udev_paper/Reprint-Kroah-Hartman-OLS2003.pdf"/></para>

      </listitem>

      <listitem>

        <para>The <systemitem class="filesystem">sysfs</systemitem> Filesystem
        <ulink url="http://www.kernel.org/pub/linux/kernel/people/mochel/doc/papers/ols-2005/mochel.pdf"/></para>

      </listitem>

    </itemizedlist>

  </sect2>

</sect1>
