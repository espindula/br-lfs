# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/readonly_rootfs.txt:3
msgid ""
"AUTHOR: Archaic <archaic@remove-this.indy.rr.com> AUTHOR: Oliver Brakmann "
"<obrakmann@gmx.net>"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:5
msgid "DATE: 2003-09-13"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:7
msgid "LICENSE: GNU Free Documentation License http://www.gnu.org/licenses/fdl.txt"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:9
msgid "SYNOPSIS: How to create a read-only root file system"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:14
msgid ""
"DESCRIPTION: A read-only root file system has many advantages over "
"read-write when the computer unexpectedly powers off. However, some parts of "
"the file system still need read-write access. This hint will show how to "
"split the file system into multiple partitions to achieve data stability."
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:17
msgid ""
"PREREQUISITES: The kernel must be compiled with tmpfs (virtual memory file "
"system) support."
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:25
msgid ""
"HINT: Warning! Serious ruin of your system may occur if you mistype "
"something.  I offer no warranty or guarantee that this will work and your "
"data will be safe. It is recommended that you backup (and test the backup) "
"all data before beginning. If you use tar, don't forget the -p switch. I "
"prefer to boot with a boot CD and then manipulate the hard drive ensuring "
"all needed data is in a static state. Also, you cannot read just the tabbed "
"commands and succeed. You must read the paragraphs as well."
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:30
#, no-wrap
msgid ""
"   This hint assumes reiser file systems. I chose reiser for its stability "
"and\n"
"journaling capabilities. Ext2/3 file systems will work as well. For you "
"uptime\n"
"junkies, you will not like the many reboots in this hint, but that's the "
"only\n"
"true way to test the boot process. Now let's begin...\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:38
#, no-wrap
msgid ""
"   First, we need to partition according to our needs. The bare minimum to "
"run\n"
"a read-only rootfs is / and /var. You may want /tmp as well, but this hint\n"
"assumes /tmp is on tmpfs. Optionally, /usr can be separated, but unless you "
"are\n"
"sharing /usr or want it to be read-write, then it can stay on "
"/. Additionally,\n"
"most will want a partition for /home and possibly /root. Partition size is "
"very\n"
"subjective so I will not cover it here. This hint assumes you have the "
"ability\n"
"to add at least 1 extra partition for /var. Here is my partitioning "
"scheme:\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:42
#, no-wrap
msgid ""
"\thda1 /     2GB   reiserfs\n"
"\thda2 /var  900Mb reiserfs\n"
"\thda3 /home 3.1GB reiserfs\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:50
#, no-wrap
msgid ""
"   Now it's time to start splitting the file systems. You have two choices\n"
"currently; static dev or devfs (when the 2.6 series kernel stabilizes, "
"devfs\n"
"will be deprecated and a new virtual /dev will be available). While devfs "
"has\n"
"many potentially good qualities, I do not like the workarounds needed, the\n"
"lessened stability, and the soon to be extinct nature of it. If you want "
"devfs\n"
"then read the devfs and/or devfsd hints and get it working on your system\n"
"first. Then continue with this hint, skipping the \"Dev\" section.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:52
msgid "### Dev ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:58
#, no-wrap
msgid ""
"   Here, we make the transition from a hard drive-based /dev tree to a "
"virtual\n"
"one. Start by making sure /dev/pts and /dev/shm are _not_ mounted. Also "
"switch\n"
"to single user mode and make sure all daemons are shut off. If your boot\n"
"scripts and symlinks are in order you can do this by simply typing 'telinit "
"1'.\n"
"We also want to copy the device files and directories to a new location.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:64
#, no-wrap
msgid ""
"\t#umount /dev/shm\n"
"\t#umount /dev/pts\n"
"\t#telinit 1\n"
"\t#cd /\n"
"\t#cp -a dev .dev\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:67
#, no-wrap
msgid ""
"   Next, remove all device files and directories from /dev except console, "
"then\n"
"mount a tmpfs on /dev and copy the original device files to the new /dev.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:70
#, no-wrap
msgid ""
"\t#mount dev /dev -t tmpfs\n"
"\t#cp -a .dev/* dev/\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:74
#, no-wrap
msgid ""
"   Verify that everything is in order by catting /proc/mounts or using df "
"to\n"
"see if a tmpfs is mounted on /dev, and ls /dev to make sure the files are\n"
"there.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:78
#, no-wrap
msgid ""
"   Now it's time to make /dev mount at boot time. Since some of the device\n"
"files are needed by init, we need to mount /dev before init runs. Create "
"the\n"
"following script:\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:86
#, no-wrap
msgid ""
"\t#cat >/sbin/tmpdev <<EOF\n"
"\t#!/bin/sh\n"
"\tmount -n dev /dev -t tmpfs\n"
"\tcp -a .dev/* /dev\n"
"\texec /sbin/init\n"
"\tEOF\n"
"\t#chmod 0700 /sbin/tmpdev\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:89
#, no-wrap
msgid ""
"   To make the kernel run this script, you have to change your boot "
"loader's\n"
"config file by adding init=/sbin/tmpdev.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:98
#, no-wrap
msgid ""
"   Next, we modify the mountfs boot script so that /dev gets written "
"properly\n"
"to mtab. We do this by adding mount -f /dev to the script. I will show the\n"
"relevant part of the boot script with the change being underlined like "
"this.\n"
"                                                                       "
"^^^^\n"
"\techo \"Recording existing mounts in /etc/mtab...\"\n"
"\t> /etc/mtab\n"
"\tmount -f / && mount -f /proc && mount -f /dev\n"
"                                     ^^^^^^^^^^^^^^^^\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:103
#, no-wrap
msgid ""
"   Lastly, we modify fstab to include the mount. Though not strictly "
"necessary\n"
"(as /dev is mounted before fstab is read), it's included for a sense of\n"
"completeness. Note the 'noauto' option. That is to keep the mountfs script "
"from\n"
"trying to mount it again.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:107
#, no-wrap
msgid ""
"\t#cat >>/etc/fstab <<EOF\n"
"\tdev     /dev     tmpfs     defaults,noauto     0 0\n"
"\tEOF\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:111
#, no-wrap
msgid ""
"   Now it's time to test it out by rebooting your computer. Use /proc/mounts "
"to\n"
"verify /dev is mounted. If you use /dev/pts, make sure it is mounted as "
"well.\n"
"If all is well, it's time to separate var.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:113
msgid "### Var ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:120
#, no-wrap
msgid ""
"   Here we will separate /var from /. Again, we need to make sure that no\n"
"daemons are running. This process is pretty much the same as the Dev "
"section.\n"
"We will start with mounting the soon-to-be var partition on a temporary "
"mount\n"
"point and copying all the files in /var to this mount point, then "
"unmounting\n"
"and remounting the new partition over /var. Don't forget to substitute\n"
"partition numbers for your setup.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:127
#, no-wrap
msgid ""
"\t#telinit 1\n"
"\t#cd /\n"
"\t#mount /dev/hda2 /mnt\n"
"\t#cp -a var/* /mnt\n"
"\t#umount /mnt\n"
"\t#mount /dev/hda2 /var\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:131
#, no-wrap
msgid ""
"   Now check to make sure var is properly mounted and contains the "
"directory\n"
"structure it's supposed to have. Cat /proc/mounts instead of using mtab "
"for\n"
"maximum reliability. If it's all good, edit fstab to mount /var upon "
"reboot.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:135
#, no-wrap
msgid ""
"\t#cat >>/etc/fstab <<EOF\n"
"\t/dev/hda2     /var     reiserfs     defaults     0 0\n"
"\tEOF\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:139
#, no-wrap
msgid ""
"   Now it's time to test it out by rebooting your computer. Use /proc/mounts "
"to\n"
"verify /var is mounted. If all is well, we can delete the stuff in the "
"original\n"
"/var. You might want to md5sum the stuff first, to be extra safe.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:144
#, no-wrap
msgid ""
"\t#telinit 1\n"
"\t#umount -n /var\n"
"\t#rm -rf /var/*\n"
"\t#mount -n /var\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:146
msgid "### Home ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:150
#, no-wrap
msgid ""
"   Follow the same steps as in the \"Var\" section. Telinit'ing to runlevel "
"1 is\n"
"not necessary unless by some weird chance you have a daemon writing log "
"files\n"
"there.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:152
msgid "### Tmp ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:159
#, no-wrap
msgid ""
"   Follow the same basic idea as in the \"Dev\" section copying the files in "
"/tmp\n"
"to another location, then mounting tmpfs over /tmp and copying the files "
"back.\n"
"Make sure to telinit to runlevel 1 in case something is using /tmp. Note: "
"Some\n"
"people think /tmp should be wiped at reboot and /var/tmp should be used "
"for\n"
"tmpfiles that need to last across reboots. Others vehemently object. If you "
"are\n"
"the latter, get used to using /var/tmp. ;) Tmpfs is virtual.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:165
#, no-wrap
msgid ""
"        #telinit 1\n"
"        #cd /\n"
"        #cp -a tmp orig_tmp\n"
"        #mount tmp /tmp -t tmpfs\n"
"\t#cp -a orig_tmp/* /tmp\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:170
#, no-wrap
msgid ""
"   Verify that everything is in order by catting /proc/mounts or using df "
"to\n"
"see if a tmpfs is mounted on /tmp, and ls /tmp to make sure any files that\n"
"should be there are there.  If it's all good, edit fstab to mount /tmp "
"upon\n"
"reboot.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:174
#, no-wrap
msgid ""
"        #cat >>/etc/fstab <<EOF\n"
"        tmp     /tmp     tmpfs     defaults     0 0\n"
"        EOF\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:178
#, no-wrap
msgid ""
"   Now it's time to test it out by rebooting your computer. Use /proc/mounts "
"to\n"
"verify /tmp is mounted. If all is well, we can delete the orig_tmp "
"directory\n"
"and the stuff still in /tmp on the root partition.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:185
#, no-wrap
msgid ""
"\t#rm -rf /orig_tmp\n"
"\t#telinit 1\n"
"\t#umount /tmp\n"
"\t#rm -rf /tmp/*\n"
"\t#mount /tmp\n"
"\t#telinit 3   # Or your runlevel of choice.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:188
#, no-wrap
msgid ""
"   Note, there may be some hidden dirs or files that still need to be "
"deleted.\n"
"If someone has a command to catch them, please email me.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:190
msgid "### Mtab ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:195
#, no-wrap
msgid ""
"   Now it is time to make a decision. If you prefer having a writable "
"mtab,\n"
"skip the \"Symlink Mtab\" section and read the \"Writable Mtab\" section. If "
"you\n"
"think /proc/mounts is good enough, do the opposite. If you can't decide, "
"search\n"
"the lfs-dev mailing list archives for arguments for and against each.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:197
msgid "### Symlink Mtab ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:199
#, no-wrap
msgid "   Here we delete mtab and make the link to /proc/mounts.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:202
#, no-wrap
msgid ""
"\t#rm /etc/mtab\n"
"\t#ln -s /proc/mounts /etc/mtab\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:205
#, no-wrap
msgid ""
"   Next we modify the mountfs boot script to mount / read-only. Comment out "
"the\n"
"following lines:\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:209
#, no-wrap
msgid ""
"\techo \"Remounting root file system in read-write mode...\"\n"
"\tmount -n -o remount,rw /\n"
"\tevaluate_retval\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:211
#, no-wrap
msgid "   Finally, we edit fstab to include the ro option for our root fs.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:215
#, no-wrap
msgid ""
"   Since the kernel command line option for reiserfs is generally set to "
"mount\n"
"read-write, you also must change your boot loader config file to mount / "
"ro\n"
"instead of rw.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:220
#, no-wrap
msgid ""
"   Now it's time to test it out by rebooting your computer. Cat /etc/mtab\n"
"(which is now /proc/mounts) to verify everything is mounted properly. As "
"an\n"
"alternative, you can just type 'mount' to get a listing. You should see\n"
"something like this:\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:227 origin/readonly_rootfs.txt:356
#, no-wrap
msgid ""
"\trootfs / rootfs rw 0 0\n"
"\t/dev/root / reiserfs ro 0 0 #<- The \"ro\" is what you are looking for\n"
"\tdev /dev tmpfs rw 0 0\n"
"\tproc /proc proc rw 0 0\n"
"\tdevpts /dev/pts devpts rw 0 0\n"
"\t/dev/hda2 /var reiserfs rw 0 0\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:230
#, no-wrap
msgid ""
"   You can disregard rootfs. Some kernels show this, but it's supposed to be "
"a\n"
"hidden, virtual fs that only the kernel uses.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:234 origin/readonly_rootfs.txt:366
#, no-wrap
msgid ""
"   If everything looks good then congratulations! You are finished. Read "
"the\n"
"section \"Other Concerns\" to prepare for any (minor) gotcha's your new "
"read-only\n"
"system may throw at you.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:236
msgid "### Writable Mtab ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:240
#, no-wrap
msgid ""
"   Note: With the exception of a few edits, the following text covering a\n"
"writable mtab was taken directly from the now-obsolete mtab hint written "
"by\n"
"Oliver Brakmann.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:248
#, no-wrap
msgid ""
"   OK, so we want to have a read-only root partition, but /etc/mtab needs to "
"be\n"
"writable. The simple solution is to put /etc/mtab somewhere else! I will "
"use\n"
"/var/lib/misc/mtab in this hint, as that is the most logical place as I "
"read\n"
"the FHS. The downside to this approach is that you have to recompile "
"glibc,\n"
"util-linux and possibly other software packages. To be compatible with "
"scripts\n"
"and other (broken) pieces of software, we re-create /etc/mtab as a link to "
"our\n"
"new mtab file.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:251
#, no-wrap
msgid ""
"   Enough introduction, now we'll get our hands dirty. Start by switching "
"to\n"
"runlevel 1 (single-user mode).\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:253
#, no-wrap
msgid "\t#telinit 1\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:258
#, no-wrap
msgid ""
"   We need to unpack glibc and linuxthreads, as well as apply any patches\n"
"necessary per the lfs book instructions. The following instructions assume "
"you\n"
"are in glibc's top directory. The sed makes newly compiled programs look "
"for\n"
"the mtab file in /var/lib/misc/mtab.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:262
#, no-wrap
msgid ""
"\t#cp sysdeps/unix/sysv/linux/paths.h{,.orig}\n"
"\t#sed 's%/etc/mtab%/var/lib/misc/mtab%' \\\n"
"\t  sysdeps/unix/sysv/linux/paths.h.orig >sysdeps/unix/sysv/linux/paths.h\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:266
#, no-wrap
msgid ""
"   Next we will rebuild util-linux so that mount, umount and friends are "
"aware\n"
"of mtab's new location.  There are no patches required, just look up the\n"
"instructions in the LFS Book.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:271
#, no-wrap
msgid ""
"   Note: Other packages you might want to rebuild are the GNU fileutils "
"(df)\n"
"and other programs that might access /etc/mtab.  As long as these programs "
"do\n"
"not write to that file, it is not absolutely required, though. That is why "
"we\n"
"will set up that symlink.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:274
#, no-wrap
msgid ""
"   The next step is to move /etc/mtab to /var/lib/misc/mtab then re-create\n"
"/etc/mtab as a link to /var/lib/misc/mtab (for compatibility reasons).\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:278
#, no-wrap
msgid ""
"\t#mv /etc/mtab /var/lib/misc/\n"
"\t#chmod 644 /var/lib/misc/mtab   # Just to make sure\n"
"\t#ln -s ../var/lib/misc/mtab /etc/mtab\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:285
#, no-wrap
msgid ""
"   Now we need to create /var/lib/misc/mtab _on your root partition_. We "
"need\n"
"this so that mount and umount always know what is mounted regardless of "
"whether\n"
"or not /var (where the real mtab is) is mounted, otherwise file systems may "
"not\n"
"get unmounted properly and disk corruption may occur. We will make this a\n"
"symlink to /proc/mounts so we can have dynamic information on a static\n"
"(read-only) root file system. We must do this by first unmounting /var.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:290
#, no-wrap
msgid ""
"\t#umount -n /var\n"
"\t#mkdir -p /var/lib/misc\n"
"\t#ln -s /proc/mounts /var/lib/misc/mtab\n"
"\t#mount -n /var\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:295
#, no-wrap
msgid ""
"   Now we have to modify the mountfs boot script. We need to comment out "
"the\n"
"lines that remount / in read-write mode. Also, we need to explicitly mount "
"/var\n"
"so we can clear the writable mtab and start recording the mounts. Here is "
"what\n"
"it should look like:\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:299
#, no-wrap
msgid ""
"#               echo \"Remounting root file system in read-write mode...\"\n"
"#               mount -n -o remount,rw /\n"
"#               evaluate_retval\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:305
#, no-wrap
msgid ""
"                echo \"Recording existing mounts in "
"/var/lib/misc/mtab...\"\n"
"                mount -n /var &&\n"
"                > /var/lib/misc/mtab &&\n"
"                mount -f / && mount -f /proc && mount -f /dev && mount -f "
"/var\n"
"                evaluate_retval\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:312
#, no-wrap
msgid ""
"   While we are editing mountfs we need to modify the umount section by "
"adding\n"
"the -n switch. What happens is umount sees a writable mtab (not a "
"symlink),\n"
"unmounts /var, and then tries to write a lock file to /var/lib/misc. This "
"won't\n"
"work due to being a read-only file system.  (If it wasn't, I wonder if it\n"
"would/could write to /proc/mounts by way of the symlink.) Anyway, here is "
"the\n"
"relevant part of the script:\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:316
#, no-wrap
msgid ""
"        echo \"Unmounting all other currently mounted file systems...\"\n"
"        umount -n -a -r\n"
"               ^^ <- Note the addition of -n\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:325
#, no-wrap
msgid ""
"   Next, modify your /etc/fstab so that /, /proc, and /var do not get "
"mounted\n"
"automatically (as they will already be mounted). The key word in the "
"following\n"
"example is 'noauto'. Note that with the lfs-boot scripts, my testing shows "
"that\n"
"this is not really necessary, but it makes things nice and tidy. We will "
"also\n"
"add the 'ro' option for your root file system. It's not absolutely necessary "
"as\n"
"the checkfs script explicitly mounts root as ro and we commented out the\n"
"remounting rw in the mountfs script. But if you leave it out, mount will\n"
"mistakenly say it is rw (/proc/mounts will say ro, though).\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:329
#, no-wrap
msgid ""
"\t/dev/hda1     /        reiserfs     defaults,noauto,ro     0 0\n"
"\t/dev/hda2     /var     reiserfs     defaults,noauto        0 0\n"
"\tproc          /proc    proc         defaults,noauto        0 0\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:334
#, no-wrap
msgid ""
"   Finally, if you are on an ext2/3 root file system (or any other that\n"
"initially boots up in read-only), you are ready to go. If you use reiser,\n"
"however, by default it initially boots in read-write. You will have to "
"change\n"
"the config file of your boot loader to mount ro.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:343
#, no-wrap
msgid ""
"   You can now remount root read-only since we are not changing any more "
"files.\n"
"If you have not unmounted any partitions other than /var during the "
"process,\n"
"all those listed in /etc/mtab should still be mounted.  Check out "
"/proc/mounts\n"
"and be sure that it reports the same mounted partitions as "
"/var/lib/misc/mtab.\n"
"If it checks out ok, you can switch to runlevel 3 prior to rebooting. The\n"
"reason for this is to fire up the daemons so they will be using /var. This "
"will\n"
"put the system into real-life use and may cause a problem to surface that "
"might\n"
"not be detected until you reboot the next time.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:346
#, no-wrap
msgid ""
"\t#mount -n -o remount,ro /\n"
"\t#telinit 3\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:349
#, no-wrap
msgid ""
"   Now it's time to test it out by rebooting your computer. Cat /proc/mounts "
"to\n"
"verify everything is mounted properly. You should see something like this:\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:362
#, no-wrap
msgid ""
"   You can disregard rootfs. Some kernels show this, but it's supposed to be "
"a\n"
"hidden, virtual fs that only the kernel uses. Also, make sure you compare\n"
"/proc/mounts with /etc/mtab (by catting mtab or typing 'mount') to make "
"sure\n"
"they agree. /proc/mounts will lack some detail, but what it does have needs "
"to\n"
"be the same on mtab. Make sure all mounting options are correct.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:368
msgid "### Other Concerns ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:373
#, no-wrap
msgid ""
"   Here I list a few of caveats you will find with your new system. The "
"main\n"
"problems I see are installing/uninstalling software, changing passwords, "
"and\n"
"creating/removing devices (if you use the static /dev method), but there "
"are\n"
"surely others.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:385
#, no-wrap
msgid ""
"Installing New Software\n"
"   To install something, build as usual (in /home or /var or somewhere else "
"of\n"
"your choosing as long as it is writable). Keep in mind the space "
"requirements\n"
"of the package while compiling. Glibc-2.5.x needed around 400MB during\n"
"compilation but needed much less installed. I keep /home extra large for "
"just\n"
"that reason. Then when you switch to root to install, just remount root\n"
"read-write and install (making sure to run ldconfig if necessary). Then "
"remount\n"
"back to read-only. That's a small price to pay for data security. Also, for "
"the\n"
"people who think it's redundant to use reiserfs when you're just going to "
"mount\n"
"read-only, I ask, \"What if you lose power while installing software?\" I "
"want my\n"
"data safe. Period.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:394
#, no-wrap
msgid ""
"Changing Passwords\n"
"   Initially, the easy way to change passwords is also to remount root\n"
"read-write, but this can be tedious if you have more than a couple of users, "
"as\n"
"you will have to be present whenever they change them. I haven't yet "
"explored\n"
"other options, but the simplest would seem to be symlinking passwd, "
"shadow,\n"
"group, etc. to /var. This may not be so cut-and-dry however. Shadow may "
"need\n"
"patching. If anyone tries the latter two, I would be interested in knowing "
"how\n"
"it comes out. Also anyone using pam with shadow (if that makes any "
"difference).\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:400
#, no-wrap
msgid ""
"Creating/Removing Devices\n"
"   This is just a reminder that you must create/remove devices in the "
"/.dev\n"
"directory for the change to last across a reboot. If you don't want to "
"reboot\n"
"for the changes to apply (who does?) then simply repeat the creation/removal "
"of\n"
"the device in the virtual /dev as well.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:402
msgid "### Added Value ###"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:406
#, no-wrap
msgid ""
"   Now that you are running a multi-partition system, you can tweak the\n"
"mounting options used for each file system. Here is a sample fstab to give "
"you\n"
"an idea of some of the things that are possible:\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:416
#, no-wrap
msgid ""
"\t/dev/hda1 /           reiserfs  ro,noauto,nodev                     0 0\n"
"\t/dev/hda2 /var        reiserfs  noauto,nodev,noexec,nosuid          0 0\n"
"\t/dev/hda3 /home       reiserfs  nodev,nosuid                        0 0\n"
"\t/dev/hda4 /tarballs   reiserfs  nodev,noexec,nosuid,users           0 0\n"
"\tdev       /dev        tmpfs     noauto,noexec,nosuid,size=50k       0 0\n"
"\tproc      /proc       proc      noauto                              0 0\n"
"\ttmp       /tmp        tmpfs     nodev,nosuid,size=80m,nr_inodes=20k 0 0\n"
"\tdevpts    /dev/pts    devpts    gid=4,mode=620                      0 0\n"
"\tdevshm    /dev/shm    tmpfs     defaults                            0 0\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:419
#, no-wrap
msgid ""
"   Read 'man 8 mount' to understand the options. The options for tmpfs can "
"be\n"
"found in the kernel source under Documentation/filesystems/tmpfs.txt.\n"
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:425
msgid ""
"ACKNOWLEDGEMENTS: I would like to thank Richard Lightman for the initial "
"idea of mounting /dev before exec'ing init (I really hate devfs ;)) and "
"Oliver Brakmann for the mtab hint (I also hate symlinking mtab to "
"/proc/mounts ;)). I would also like to thank Oliver for allowing me to "
"absorb his hint into mine.  It would not have been possible to have a "
"complete hint without his hint."
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:430
msgid ""
"Oliver Brakmann would like to give credit to Seth W. Klein for teaching him "
"through the process in the first place and further corrections and "
"suggestions.  Also thanks to DJ Lucas, Jesse Tie-Ten-Quee, Richard Lightman "
"and Wouter Vanwalleghem for additional feedback."
msgstr ""

#. type: Plain text
#: origin/readonly_rootfs.txt:433
#, no-wrap
msgid ""
"CHANGELOG:\n"
"[2003-09-13]\n"
" * Initial version\n"
msgstr ""
