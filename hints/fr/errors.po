# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/errors.txt:2
msgid "AUTHOR:\tAlex Kloss <alex@22-music.com>"
msgstr ""

#. type: Plain text
#: origin/errors.txt:4
msgid "DATE: 2003-11-10"
msgstr ""

#. type: Plain text
#: origin/errors.txt:6
msgid "LICENSE: GNU Free Documentation License Version 1.2"
msgstr ""

#. type: Plain text
#: origin/errors.txt:8
msgid "SYNOPSIS: What to do on errors"
msgstr ""

#. type: Plain text
#: origin/errors.txt:13
msgid ""
"DESCRIPTION: The LFS Book has a short, but nice chapter about errors. A "
"longer essay about how to spot where the error is, how to describe it (on "
"IRC or the mailing list), and possibly get around it is the goal of this "
"hint."
msgstr ""

#. type: Plain text
#: origin/errors.txt:16
msgid "PREREQUISITES: Common sense, LFS, patience. Programming skills (optional)."
msgstr ""

#. type: Plain text
#: origin/errors.txt:19
msgid "HINT: Almost every LFS adept has seen lines like:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:23
msgid "- make[1]: Error - Segmentation Fault - ld returned signal 2: ..."
msgstr ""

#. type: Plain text
#: origin/errors.txt:25
msgid "The first urge is to write to the mailing list or on IRC something like:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:27
msgid "I have an error in program <fill in whatever is appropriate>!"
msgstr ""

#. type: Plain text
#: origin/errors.txt:35
msgid ""
"First of all, is it really an error? If you find the option \"-Werror\" in "
"the lines that call gcc, the \"error\" you're facing could as well be a "
"warning (-Werror makes gcc handle all warnings as errors). You will often "
"find warning and error messages mixed before the classical \"make[1]: "
"Error\". A warning is something gcc complains about, but continues without "
"error, while an error is something that stops you from compiling the package "
"you are about to build.  To disable distracting warning messages, use "
"\"export CFLAGS=\"-w\"."
msgstr ""

#. type: Plain text
#: origin/errors.txt:42
msgid ""
"Mostly, further information about the errors are missing, which is a "
"nuisance for both the one who asks and the one who tries to answer, because "
"of the annoying dialogue that is often following. I have to admit that the "
"LFS mailing list and IRC never failed to solve my problems (and that in a "
"rather cheerful way), but I reached a point at where I wanted to solve as "
"many of my problems as possible. So I had to learn a lot, which was "
"undoubtedly fun."
msgstr ""

#. type: Plain text
#: origin/errors.txt:44
msgid "WHAT KIND OF ERROR?"
msgstr ""

#. type: Plain text
#: origin/errors.txt:47
msgid ""
"You have to distinguish between the different kinds of errors. The more you "
"can tell about the error, the easier it is to solve."
msgstr ""

#. type: Plain text
#: origin/errors.txt:49
msgid "This should be a normal hint, but I guess it is easier to draw a chart:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:51
#, no-wrap
msgid "Question: When did it happen?   What happened?      Where did it happen?\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:63
#, no-wrap
msgid ""
"                                                  , Compiling (gcc) ...\n"
"                              , ... not found ---<- Dependencies (depmod)\n"
"          Compile-time Error < -,                   ` Linking (ld)\n"
"        /                     `. `- gcc-3.4.x*\n"
"       /                        \\\n"
"Error <                          Segfault\n"
"       `.                     ,'\n"
"          Run-time Error ----<          , full\n"
"                              ` Hangup <\n"
"                                        ` Prog \n"
"        \t\t\t\t  only\n"
"____\n"
msgstr ""

#. type: Bullet: '* '
#: origin/errors.txt:66
msgid ""
"gcc-3.4 and later don't accept labels at the end of compound statements nor "
"the usage of protected functions from within other files."
msgstr ""

#. type: Plain text
#: origin/errors.txt:69
msgid ""
"That looks pretty simple, eh? But that is only the beginning. We will have a "
"look at each of these error types closely!"
msgstr ""

#. type: Bullet: '1. '
#: origin/errors.txt:71
msgid "Compile-time Errors"
msgstr ""

#. type: Plain text
#: origin/errors.txt:75
msgid ""
"First of all, check the package you are about to compile for files like "
"README and/or INSTALL. You can work around most errors by strictly following "
"those instructions."
msgstr ""

#. type: Plain text
#: origin/errors.txt:78
msgid ""
"When you are about to build your package, you sometimes get the error that "
"something is missing or malformed or simply uncompileable."
msgstr ""

#. type: Plain text
#: origin/errors.txt:80
msgid "1.1 ... not found"
msgstr ""

#. type: Plain text
#: origin/errors.txt:82
msgid "1.1.1 Compiling (gcc)"
msgstr ""

#. type: Plain text
#: origin/errors.txt:86
msgid ""
"There is a lot gcc may be unable to find. If there is something to include, "
"it may be the file that should be included, that is missing. The questions "
"here are: 1. what is missing? and 2. what to do against?"
msgstr ""

#. type: Plain text
#: origin/errors.txt:88
msgid "1.1.1.1 Missing header file"
msgstr ""

#. type: Plain text
#: origin/errors.txt:90
msgid "If only a header file is missing, you will experience an error message like:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:92
msgid "foo.c:3:31: /usr/include/bar.h: No such file or directory"
msgstr ""

#. type: Plain text
#: origin/errors.txt:94
msgid "If there's a file missing, you may want to search your system for it:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:97
msgid ""
"find / -name <filename> or locate <filename> (run updatedb, if locate "
"demands it)"
msgstr ""

#. type: Plain text
#: origin/errors.txt:101
msgid ""
"If you don't find the file, the next question would be: where should this "
"file come from? Is there a prerequisite you forgot? Are all tools available "
"in the required versions?"
msgstr ""

#. type: Plain text
#: origin/errors.txt:107
msgid ""
"If the file is anywhere else than in the common include path (/usr/include, "
"/usr/local/include), you may add -I<uncommon include path> to the CFLAGS, "
"e.g. \"export CFLAGS=-I/usr/X11R6/include\". If the #include statement "
"contains a subdirectory, while the file to be included is in the common "
"directory, you'll have to edit the #include statement."
msgstr ""

#. type: Plain text
#: origin/errors.txt:111
msgid ""
"In most cases the file will be in a directory the developer did not expect.  "
"The easiest way around that would be a symlink, but that is not a clean "
"way.  So we search the sources for occurrences of the \"missing\" file "
"first:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:113
msgid "grep -R \"<missing file's path and name>\" *.*"
msgstr ""

#. type: Plain text
#: origin/errors.txt:116
msgid ""
"Now edit every file that uses the wrong path in it's #include "
"statements. The lazy user can utilize sed:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:121
#, no-wrap
msgid ""
"for i in *.*; do \n"
" mv $i $i.bak\n"
" sed s|'<\"missing\" file>'|'<found file'>|g $i.bak > $i\n"
"done\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:123
msgid "This should solve the problem; you can continue building the package."
msgstr ""

#. type: Plain text
#: origin/errors.txt:125
msgid "1.1.1.2 Missing declaration"
msgstr ""

#. type: Plain text
#: origin/errors.txt:127
msgid "Another fine error message goes about a missing declaration:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:129
msgid "foo:124:4: bla undefined"
msgstr ""

#. type: Plain text
#: origin/errors.txt:133
msgid ""
"if \"bla\" is a function from generic libraries (like glibc), it will "
"probably be documented with a manpage which holds information about which "
"header file(s)  it needs to be included:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:135
msgid "man bla"
msgstr ""

#. type: Plain text
#: origin/errors.txt:138
msgid ""
"Look at /usr/share/man/man3 for documented function calls: The manpage will "
"look something like that:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:141
#, no-wrap
msgid ""
"--snip\n"
"FUNC(3)\t\t\t\tLinux Programmer's Manual\t\tFUNC(3)\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:144
#, no-wrap
msgid ""
"NAME\n"
"\tfunc, ffunc, vfunc - Example function without any use\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:149
#, no-wrap
msgid ""
"SYNOPSIS\n"
"\t#include <stdfunc.h>\n"
"\tint func(char *format, ...);\n"
"\tint ffunc(FILE *stream, const char *format, ...);\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:152
#, no-wrap
msgid ""
"\t#include <vstdfunc.h>\n"
"\tint vfunc(const char *format, va list ap);\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:156
msgid "DESCRIPTION ...  --snap"
msgstr ""

#. type: Plain text
#: origin/errors.txt:159
msgid ""
"In most of the cases the header file is not included where it's needed, so "
"you just write it into the file where it is missing: \"#include "
"<stdfunc.h>\"."
msgstr ""

#. type: Plain text
#: origin/errors.txt:162
msgid ""
"If the definition is not in any standard library, you will have to search "
"the codebase of the program you are about to compile for the function it's "
"missing:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:164
msgid "grep \"<function name>\" *.* | less"
msgstr ""

#. type: Plain text
#: origin/errors.txt:169
msgid ""
"Now search for something like \"#define bla ( const char * ...\". If you "
"don't find anything, the function is likely to be included in other sources, "
"so you better check the requirements of the package you are about to "
"compile, in case something is missing."
msgstr ""

#. type: Plain text
#: origin/errors.txt:173
msgid ""
"If the file where the definition is included is a header file (*.h), simply "
"include it, otherwise copy and paste the definition into the file gcc is "
"complaining about."
msgstr ""

#. type: Plain text
#: origin/errors.txt:179
msgid ""
"Sometimes it's not the definition, but a missing argument to a function. The "
"last living example of this gizmo was an error due to some API change in the "
"alsa-1.0-pre driver when compiling any alsa-enabled package that used at "
"least one of the snd_pcm_hw_param-functions (e.g. mplayer or wine). The "
"related error was displayed as:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:183
msgid ""
"audio.c: In function `Alsa_TraceParameters': audio.c:292: error: too few "
"arguments to function `snd_pcm_hw_params_get_format' (...)"
msgstr ""

#. type: Plain text
#: origin/errors.txt:188
msgid ""
"In this case you need to know what arguments the function is expecting.  "
"Therefore, we seek the header file that defines the function (like explained "
"for missing functions). For our alsa example, the line in the header file "
"was in /usr/include/alsa/pcm.h and looked like:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:191
msgid ""
"int snd_pcm_hw_params_get_format(const snd_pcm_hw_params_t *params, "
"snd_pcm_format_t *val);"
msgstr ""

#. type: Plain text
#: origin/errors.txt:193
msgid "While the code from which that function was invoked only used:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:195
msgid "(...) format = snd_pcm_hw_params_get_format(hw_params);"
msgstr ""

#. type: Plain text
#: origin/errors.txt:199
msgid ""
"One must notice that only the first argument is given, the other argument "
"\"snd_pcm_format_t\" of the type \"*val\" is missing. Now we need to know "
"what type *val is, then we could insert it into audio.c."
msgstr ""

#. type: Plain text
#: origin/errors.txt:201
msgid "1.1.1.3 function bla... redefined"
msgstr ""

#. type: Plain text
#: origin/errors.txt:209
msgid ""
"Another almost similar error occurs if something is defined twice. The "
"compiler is unable to tell if both definitions are equal, so it will give "
"the error even in that case. You have to search for the definitions, check "
"out which one is valid for your case and embrace the \"invalid\" function "
"with \"#ifndef <Name>\" and \"#endif\". One could easily remove the "
"\"invalid\" definition, but if another package would need it, it would be "
"missing then, so the #ifndef/#endif-way is clearly the better one."
msgstr ""

#. type: Plain text
#: origin/errors.txt:211
msgid "1.1.2 Linking (ld)"
msgstr ""

#. type: Plain text
#: origin/errors.txt:217
msgid ""
"Linking mostly fails because of missing libraries. Make sure your "
"/etc/ld.so.conf contains all directories with libraries in it. In case, "
"another directory is needed, use LDFLAGS: \"export "
"LDFLAGS=-L/usr/X11R6/lib\" to include XFree86's libraries for sure. \"/lib\" "
"and \"/usr/lib\" are always included by default and need not to be in there."
msgstr ""

#. type: Plain text
#: origin/errors.txt:224
msgid ""
"Another (occasional) error can occur if libs are not linked right. I only "
"saw it happen once when some program linked to libpng, but forgot about "
"libz, which is used by libpng, but needs to be linked to, too. So in the "
"Makefile, where I found \"LIBS=-lpng\", I completed it to \"LIBS=-lpng "
"-lz\". Mostly the function that is missing is given; you can try to grep it "
"in the library (binary matches)."
msgstr ""

#. type: Plain text
#: origin/errors.txt:226
msgid "1.1.3 Module Dependency checking (depmod)"
msgstr ""

#. type: Plain text
#: origin/errors.txt:233
msgid ""
"Another error that only happens if the running kernel differs from the one "
"the sources are compiled against (which could be the case when compiling in "
"chrooted mode) is the \"unresolved dependency in module\"-error. To get "
"around that bug, run depmod with the \"-F "
"/usr/src/linux/System.map\"-option. And be sure that you are compiling the "
"modules with the same compiler as you used when compiling the kernel."
msgstr ""

#. type: Plain text
#: origin/errors.txt:235
msgid "1.2 gcc-3.4.x"
msgstr ""

#. type: Plain text
#: origin/errors.txt:239
msgid ""
"The version 3.4.x introduces some new errors, which compiled fine using "
"earlier version of the same compiler. Instead of resorting to an older "
"version, it should be easier to fix them."
msgstr ""

#. type: Plain text
#: origin/errors.txt:241
msgid "1.2.1 gcc-3.4.x: label at the end of compound statement"
msgstr ""

#. type: Plain text
#: origin/errors.txt:245
msgid ""
"Since gcc-3.4.x, labels at the end of a compound statement are treated as "
"errors, though they are widely used in spite of their scruffyness. Certainly "
"this problem is easily solved: just replace the ocurrences of"
msgstr ""

#. type: Plain text
#: origin/errors.txt:247
#, no-wrap
msgid "  goto [label];\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:249
msgid "with"
msgstr ""

#. type: Plain text
#: origin/errors.txt:251
#, no-wrap
msgid "  return;\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:254
msgid ""
"and remove the label from the source or comment it out. As a rule, avoid "
"goto statements in your C code."
msgstr ""

#. type: Plain text
#: origin/errors.txt:256
msgid "1.2.2 gcc-3.4.x: protected functions"
msgstr ""

#. type: Plain text
#: origin/errors.txt:258
msgid "The message"
msgstr ""

#. type: Plain text
#: origin/errors.txt:260
#, no-wrap
msgid "  Error: `foo::bar function(pointer*)' is protected\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:262
msgid "shows that somewhere in the code there is a function prefixed with"
msgstr ""

#. type: Plain text
#: origin/errors.txt:264
#, no-wrap
msgid "  protected:\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:267
msgid ""
"Though this has a meaning, it stops our application from compiling, so we "
"can easily comment this out:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:269
#, no-wrap
msgid "  // protected:\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:271
msgid "and continue the compilation."
msgstr ""

#. type: Plain text
#: origin/errors.txt:273
msgid "1.3 Segmentation Fault"
msgstr ""

#. type: Plain text
#: origin/errors.txt:280
msgid ""
"This is most annoying. It means an application tries to get something from a "
"file/pipe/device/environment variable that is not set and has no fallback if "
"there is nil but rather dumps core and stop immediately. If the following "
"in- formation is not sufficing for you, you may want to have a look at the "
"SIG11 FAQ which can be found at http://www.bitwizard.nl/sig11 - but look at "
"this section first."
msgstr ""

#. type: Plain text
#: origin/errors.txt:282
msgid "1.3.1 Segfault during compilation"
msgstr ""

#. type: Plain text
#: origin/errors.txt:288
msgid ""
"Segmentation faults during compilation are rarely seen. You only get SIG11 "
"if the memory is full while building a package and it will happen only on "
"systems with little memory. You can add a loop device to swap to expand your "
"memory; this will make compilation much slower, but at least it will work on "
"such devices that have insufficient memory:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:293
msgid ""
"dd if=/dev/zero of=/tmp/swapspace bs=1M count=128 losetup /dev/loop0 "
"/tmp/swapspace mkswap /dev/loop0 swapon /dev/loop0"
msgstr ""

#. type: Plain text
#: origin/errors.txt:298
msgid ""
"will set up 128MB of swap space (or virtual memory). If it still fails, "
"increase the amount of disk space used (count=256; count=512; count=XXX). If "
"you are done compiling or want to increase the size, remove the added "
"swapspace with:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:302
msgid "swapoff /dev/loop0 losetup -d /dev/loop0 rm /tmp/swapspace"
msgstr ""

#. type: Plain text
#: origin/errors.txt:304
msgid "1.3.2 Segfault during execution"
msgstr ""

#. type: Plain text
#: origin/errors.txt:316
msgid ""
"If a program segfaults, there is not much you can easily do to hunt the "
"error down unless you have some programming skills. Contact the developer "
"and give him a detailed view of your system; maybe in /var/log is something "
"about the error? If you want to hunt the bug down yourself anyway, read the "
"SIG11 FAQ and use strace which you will find at "
"http://www.liacs.nl/~wichert/strace/ and is easily installed on the program; "
"it may help you to find out what file/pipe/ environment string/etc the "
"program is expecting to be available. Then try to grep the sources of the "
"program which is segfaulting after the file/pipe/etc which failed. Add a "
"fallback routine. A nice example is the gsview-4.4-patch.  gsview 4.4 tried "
"to get the environment variable LANG, but had no fallback for the case it "
"was not set. The malignant part of the source looked like:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:318
#, no-wrap
msgid "   strncpy(lang, getenv(\"LANG\"), sizeof(lang)-1);\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:324
msgid ""
"Which would have copied a part of the LANG(uage) environment variable "
"without the last character - if LANG was empty, it would have tried to copy "
"-1 char- acters, which resulted in a segfault. The easy solution would have "
"been to set LANG to something, but the better solution is to provide a "
"fallback and change the code to:"
msgstr ""

#. type: Plain text
#: origin/errors.txt:326
#, no-wrap
msgid ""
"   strncpy(lang, (getenv(\"LANG\") == 0) ? \"C\" : "
"getenv(\"LANG\"),sizeof(lang)-1);\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:331
msgid ""
"That is a bit obfuscated for the C-illiterate, but it means \"if LANG is 0, "
"then use 'C' instead of the LANG environment variable (which stands for "
"standard), else use the LANG environment variable minus one char\". Now it "
"is your turn, if you still want to get that bug by yourself!"
msgstr ""

#. type: Plain text
#: origin/errors.txt:333
msgid "1.4 Hangup"
msgstr ""

#. type: Plain text
#: origin/errors.txt:341
msgid ""
"Hangups are the most annoying errors there are. Fortunately, they are as "
"seldom as annoying with Linux (unless you use bleeding edge sources "
"only). Hangups are mostly caused by endless loops, driver problems that "
"leads to bus lockups, and hardware issues (like defective capacitors in the "
"CPU power supply, check for bursted ones). Infinite loops are easily spotted "
"by the warnings of most compilers, the latter is harder to find. Try to "
"downgrade the driver you think is responsible for the hangup and send a "
"report to the relative mailing list."
msgstr ""

#. type: Plain text
#: origin/errors.txt:343
msgid "1.4.1 Full Hangup"
msgstr ""

#. type: Plain text
#: origin/errors.txt:352
msgid ""
"You recognize a full hangup by pressing the [CAPS LOCK] key. If the led is "
"flashing, the keyboard is still hooked to the console, so that's no full "
"hangup. Try pressing different keys then. If nothing else works, use a hard "
"reboot (that is always the last means of getting back to work). If the "
"keyboard is still available, but the screen is blank, try to reboot with "
"[ALT][CTRL][DEL]. If even that doesn't work, you may be lucky enough to have "
"the sysrq key feature compiled into your kernel. For further information, "
"read [/usr/src/linux/Documentation/sysrq.txt]."
msgstr ""

#. type: Plain text
#: origin/errors.txt:354
msgid "1.4.2 Program-only Hangup"
msgstr ""

#. type: Plain text
#: origin/errors.txt:359
msgid ""
"If the program hangs up leaving the rest system intact, you can use the "
"appropriate of the kill/killall/xkill command to get rid of it. Program-only "
"Hangups occurs on infinite loops, e.g. trying to read from a blocked pipe, "
"in most cases the load will go up visibly."
msgstr ""

#. type: Plain text
#: origin/errors.txt:361
msgid "1.5 Other errors"
msgstr ""

#. type: Plain text
#: origin/errors.txt:369
msgid ""
"If you get an error message not covered by this hint, check the relevant "
"mailinglists, enter the error message into google and look 1. if there is a "
"newer version or 2. if a cvs version, if available, has the same error. If "
"nothing else helps, ask in IRC or mail to the developers mailinglist or "
"submit a bug report. Remember to describe the error precisely and give "
"enough information about the system you are trying to build the package on "
"(logs, versions, strace output, dmesg output, debug messages and so on)."
msgstr ""

#. type: Plain text
#: origin/errors.txt:371
msgid "1.6 Some Useful Links"
msgstr ""

#. type: Plain text
#: origin/errors.txt:374
msgid ""
"About the SIG11 (Segfault) Error: \thttp://www.bitwizard.nl/sig11 This page "
"has some general information about the SIG11 error"
msgstr ""

#. type: Plain text
#: origin/errors.txt:380
#, no-wrap
msgid ""
"Aquiring Programming Skills: \t\thttp://ibiblio.org/obp/thinkCS\n"
"This page features a book called \"How to think like a computer "
"scientist\",\n"
"which can be downloaded freely in the flavours Java, C++ and Python. The\n"
"C++ variant will be most helpful for the LFS adept, since most GNU "
"projects\n"
"uses either C or C++.\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:383
msgid "May the source be with you!"
msgstr ""

#. type: Plain text
#: origin/errors.txt:387
#, no-wrap
msgid ""
"CHANGELOG:\n"
"  [2002-01-04]\n"
"    * Started to write this hint.\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:390
#, no-wrap
msgid ""
"  [2003-10-07]\n"
"    * Initial Version, small additions.\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:394
#, no-wrap
msgid ""
"  [2003-10-08]\n"
"    * Almost forgot to give Tushar some credits, little changes and "
"additions.\n"
"    * Small changes and corrections suggested by Bill Maltby\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:398
#, no-wrap
msgid ""
"  [2003-10-26]\n"
"    * Adding a link to the SIG11 FAQ, some more stuff about segfaults and "
"have \n"
"      a few words about the depmod problem with different kernels.\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:402
#, no-wrap
msgid ""
"  [2003-11-10]\n"
"    * Adding a Links section with a link to a book that helps in aquiring "
"C++ \n"
"      Skills.\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:405
#, no-wrap
msgid ""
"  [2004-01-20]\n"
"    * Added a short section about redefined functions.\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:409
#, no-wrap
msgid ""
"  [2004-09-07]\n"
"    * Minor corrections, added gcc-3.4 inability to accept labels at the end "
"of\n"
"      a compound statement and it's solution.\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:412
#, no-wrap
msgid ""
"  [2004-09-08]\n"
"    * Another minor corrections plus gcc-3.4 stuff about protected "
"functions.\n"
msgstr ""

#. type: Plain text
#: origin/errors.txt:418
msgid ""
"CREDITS: Thanks to teemu for reminding me on \"-I\" and \"-l\" as much as "
"Tushar for the warning about warnings and ringing the bell of the \"-w\" "
"option, not to forget Bill for his corrections. Thanks to Gerard for "
"inspiring me with his LFS section about errors! Thanks to Allen B. Downey "
"for his brilliant book that's distributed freely under License GPL! :-)"
msgstr ""
