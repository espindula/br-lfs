# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/boot-cd_easy.txt:4
#, no-wrap
msgid ""
"AUTHOR: (original) Thomas Foecking <thomas@foecking.de> and \n"
"  Christian Hesse <mail@earthworm.de>\n"
"  (updates) Jimmy Anderson <jimmy.anderson1056@gmail.com>\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:6
msgid "DATE: 2011-03-12"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:8
msgid "LICENSE: GNU Free Documentation License Version 1.2"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:10
msgid "SYNOPSIS: Easy Bootable CD of your LFS"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:13
msgid "DESCRIPTION:"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:17
msgid ""
"With a little effort, a bootable CD/DVD can be created from an LFS system.  "
"The CD created by this hint could be used as a rescue CD, an LFS build "
"system, or for whatever other purpose the user can concoct."
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:21
#, no-wrap
msgid ""
"Briefly the bootable CD provides a root filesystem that is \n"
"sourced mostly by the (read only) CD contents but with a few \n"
"certain directories overlayed by ram and thus writable.   \n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:27
msgid ""
"Briefly, the procedure is: a CD bootloader is added to the LFS system, a "
"kernel and a ramdisk is created, which when booted, mounts the LFS system "
"(written on CD) as the root filesystem and then overlays portions of it with "
"a ram based filesystem which allows the user to 'write' to some portions of "
"the CD based file system."
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:33
msgid ""
"This hint does not create a \"live CD\".  The end result of this hint is a "
"LFS system that runs off of CD but with only a few directories being "
"'writable' by the user and with (except for /tmp) only a small (few "
"megabytes) amount of writable space.  /tmp will be overlayed by a tmpfs file "
"system and (typically) have 100's of megabytes of space."
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:38
msgid ""
"If instead, a live CD is desired, the LFS LiveCD project, or one of the "
"other Live CD projects may be a more appropriate resource to use.  The value "
"of this 'bootable CD' is that it is simple to do, and easy to modify and "
"fix."
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:42
msgid ""
"The instructions in this hint have been tested with X86 LFS 6.6 & 6.7.  It "
"probably will work with other current LFS books as well.  It also works for "
"building a PowerPC bootable CD.  This hint assumes 32bit cpu."
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:51
#, no-wrap
msgid ""
"Note that the instructions in this hint are executed as root.  As such, it "
"is \n"
"possible that a mistyped or misunderstood instruction could destroy the\n"
"data and/or OS on your system.   It is prudent to back up any important \n"
"data on your system before attempting to use this hint to create a "
"bootable\n"
"CD.   Ideally, you should perform this task on a system which is only \n"
"used by you and which you can easily reinstall without difficulty.  That \n"
"way, any mistakes you make will not affect others and will have minimal\n"
"impact on you.   Fair notice...\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:54
msgid "ATTACHMENTS: None"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:56
msgid "PREREQUISITES:"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:61
#, no-wrap
msgid ""
"Familiarity with building LFS.   The build system must have a writable\n"
"CDROM drive and the tool set required to create (mkisofs) ISO images\n"
"and write them to CDs.   If your system has the 'genisoimage' tool \n"
"instead of mkisofs, that will work fine also.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:63
msgid "HINT:"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:65
#, no-wrap
msgid ""
"Contents\n"
"--------\n"
msgstr ""

#. type: Bullet: '    1. '
#: origin/boot-cd_easy.txt:78
msgid "What do you need and what is the idea?"
msgstr ""

#. type: Bullet: '    2. '
#: origin/boot-cd_easy.txt:78
msgid "Configure & compile Kernel, add packages, other tweaks"
msgstr ""

#. type: Bullet: '    3. '
#: origin/boot-cd_easy.txt:78
msgid "Add bootloader."
msgstr ""

#. type: Bullet: '    4. '
#: origin/boot-cd_easy.txt:78
msgid "Move /etc /var /root /home to /fake/needwrite and make symlinks"
msgstr ""

#. type: Bullet: '    5. '
#: origin/boot-cd_easy.txt:78
msgid "Create boot script which mounts the ramdisk"
msgstr ""

#. type: Bullet: '    6. '
#: origin/boot-cd_easy.txt:78
msgid "Tweaks for running with CD as root fs."
msgstr ""

#. type: Bullet: '    7. '
#: origin/boot-cd_easy.txt:78
msgid "Create initial ramdisk"
msgstr ""

#. type: Bullet: '    8. '
#: origin/boot-cd_easy.txt:78
msgid "(Optional) compress /usr"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:78
#, no-wrap
msgid ""
"    9. Create initial ramdisk\n"
"    9a. Burn the Boot CD\n"
"    10. Reboot and enjoy\n"
msgstr ""

#. type: Bullet: '1. '
#: origin/boot-cd_easy.txt:82
msgid ""
"What do you need and what is the idea? "
"--------------------------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:84
#, no-wrap
msgid "\tWhat do you need?\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:92
#, no-wrap
msgid ""
"\tFirst of all you need to build an LFS system, which you want to burn\n"
"\ton CD. You may want to have a LFS CD for creating new LFS systems\n"
"\ton other computers. Whatever your ideas are, you'll first have to\n"
"\tcreate this special system on your LFS partition.\n"
"\t(e.g. I have created a LFS system with xfree86 and windowmaker;\n"
"\tnow I can boot from CD and create new LFS systems without missing\n"
"\txfree86 & windowmaker)\n"
msgstr ""

#. type: Bullet: '	- '
#: origin/boot-cd_easy.txt:96
msgid "another linux/unix system to create some stuff and burn the CD"
msgstr ""

#. type: Bullet: '	- '
#: origin/boot-cd_easy.txt:96
msgid "CD-R(W) drive to burn your LFS system and boot image on CD"
msgstr ""

#. type: Bullet: '	- '
#: origin/boot-cd_easy.txt:96
msgid "1 CD-R + 1 CD-RW is very recommended for saving money"
msgstr ""

#. type: Bullet: '	- '
#: origin/boot-cd_easy.txt:98
msgid "obtain some additional software:"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:101
#, no-wrap
msgid ""
"\t(x86)     syslinux: (contains isolinux to boot the LFS kernel on CD)\n"
"ftp://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-4.03.tar.gz\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:104
#, no-wrap
msgid ""
"\t(PowerPC) yaboot: (bootloader for PowerPC)\n"
"http://yaboot.ozlabs.org/releases/yaboot-1.3.16.tar.gz\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:109
#, no-wrap
msgid ""
"\tDownload either syslinux (x86) or yaboot (PowerPC) as appropriate\n"
"\tfor your architecture and put the source in $LFS/sources for later\n"
"\tuse.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:121
#, no-wrap
msgid ""
"\tWhat is the idea?\n"
"\t- Create kernel with ramdisk and initrd support\n"
"\t- Move /etc /var /root /home to /fake/needwrite\n"
"\t- Set symlinks\n"
"\t\t/etc  -> /fake/needwrite/etc\n"
"\t\t/var  -> /fake/needwrite/var\n"
"\t\t/...   -> /fake/needwrite/...\n"
"\t- Mount /dev/ram0 to /fake/ramdisk\n"
"\t- Copy /fake/needwrite/* to /fake/ramdisk/\n"
"\t- Remount /dev/ram0 to /fake/needwrite\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:124
#, no-wrap
msgid ""
"\tWe'll have read-write access on /etc /var /root /home\n"
"\tbecause they point to /fake/needwrite which is then a ramdisk\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:128
#, no-wrap
msgid ""
"\tYou are able to do the most things from the other linux/unix\n"
"\tsystem by setting LFS to your LFS mountpoint. LFS=/path/to/lfs\n"
"\te.g.:\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:130 origin/boot-cd_easy.txt:578
msgid "export LFS=/mnt/lfs"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:132
#, no-wrap
msgid "\tDon't forget to set LFS again when you do a reboot!\n"
msgstr ""

#. type: Bullet: '2. '
#: origin/boot-cd_easy.txt:136
msgid "Build LFS system, configure & compile Kernel --------------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:138
#, no-wrap
msgid "   Do this step in the chroot environment.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:144
#, no-wrap
msgid ""
"   The first step is to build your LFS system as is described in\n"
"the LFS book.   While in the chroot environment, you will configure & \n"
"build the kernel.  When configuring your kernel, make sure that the \n"
"following kernel configuration settings are enabled \n"
"(as builtins, not as modules).\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:148
#, no-wrap
msgid ""
"\tYou need initrd support!\n"
"\t\t\"General setup  --->\" \n"
"\t\t\t\"<*> Initial RAM filesystem and RAM disk ...\"\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:154
#, no-wrap
msgid ""
"\tYou need ramdisk support!\n"
"\t\t\"Block devices  --->\" \n"
"\t\t\t\"<*> RAM block device support\"\n"
"\t\t\t\"(16384)   Default RAM disk size\"\n"
"\t\t\t\"[*]   Initial RAM disk (initrd) support\"\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:158
#, no-wrap
msgid ""
"\tYou need ext2 file system support!\n"
"\t\t\"File systems  --->\"\n"
"\t\t\t\"<*> Second extended fs support\"\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:162
#, no-wrap
msgid ""
"\tYou need ISO 9660 CDROM file system support!\n"
"\t\t\"File systems  --->\"\n"
"\t\t\t\"<*> ISO 9660 CDROM file system support\"\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:167
msgid ""
"You may need to compress your file system (to fit on CD), and to do so will "
"need squashfs also.  It may not be required but it is best to just go ahead "
"and enable it anyway while we are building our kernel to keep things simple."
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:171
#, no-wrap
msgid ""
"\t(If compressing) You need squashfs file system support!\n"
"\t\t\"File systems  --->\"\n"
"\t\t\t\"<*> Squashfs file system support\"\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:174
#, no-wrap
msgid ""
"   Then compile and install your kernel & modules just\n"
"as is described in the LFS book.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:176
#, no-wrap
msgid "   Copy the newly built kernel and associated .config file  to /boot:\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:184
msgid ""
"cp .config /boot/lfskernel.config # # on x86 do: cp arch/i386/boot/bzImage "
"/boot/lfskernel && cp System.map /boot/ # # on a PowerPC do: cp vmlinux "
"/boot/lfskernel && cp System.map /boot/"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:189
#, no-wrap
msgid ""
"   Set all the configuration settings described in the LFS book\n"
"as appropriate for your system.  Especially important is that you\n"
"set your LFS system root password (or remove it entirely).   If \n"
"you don't, you will not be able to login when you boot your CD.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:195
#, no-wrap
msgid ""
"   Space will be tight on a CD (not so much on a DVD) so remove any \n"
"files and directories that are no longer needed.  $LFS/tools\n"
"is no longer needed and should be removed.   If you won't need the\n"
"files in $LFS/sources when running on the CD, some or all of \n"
"those can be removed to reduce the size of the image.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:199
#, no-wrap
msgid ""
"   The /usr file system can (optionally) be compressed (later) to free up\n"
"space.   Compressing it will reduce the size by a couple hundred megabytes "
"\n"
"or so.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:202
#, no-wrap
msgid ""
"   Using BLFS (or other techniques) add any additional packages that \n"
"you require in your LFS system.  \n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:208
#, no-wrap
msgid ""
"   You will not be able to create directories or files in most portions\n"
"of the filesystem so think ahead about what you will need to do\n"
"and add whatever directories or files that you might need later when \n"
"running on the CD.  For example, maybe create /mnt/lfs and it's \n"
"associated /tools symlink.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:213
msgid "# mkdir /mnt/lfs ln -sv /mnt/lfs/tools / #"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:216
msgid ""
"At this point, it might be wise to save off a copy of your LFS system in "
"case you screw up and want to start over again at this point."
msgstr ""

#. type: Bullet: '3. '
#: origin/boot-cd_easy.txt:220
msgid "Install the bootloader (isolinux or yaboot)  -------------------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:222 origin/boot-cd_easy.txt:415 origin/boot-cd_easy.txt:452 origin/boot-cd_easy.txt:519
#, no-wrap
msgid "\tDo this step in the chroot environment.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:224
#, no-wrap
msgid "\tWe also need a bootloader on the CD to boot the kernel and ramdisk.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:226
#, no-wrap
msgid "\tisolinux will be used for the bootloader for X86 machines.  \n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:231
#, no-wrap
msgid ""
"\tyaboot will be used for PowerPC MACs.  On PowerPC machines\n"
"\tthat don't use openfirmware, yaboot is not used and you can skip \n"
"\tbuilding it.  For those machines, you will have to figure out the\n"
"\tboot loader installation yourself.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:262
msgid ""
"# On an X86 machine do: #------------------- copy and paste "
"------------------------------ # # Unpack, install and configure isolinux # "
"cd /sources zcat syslinux-4.03.tar.gz | tar x mkdir /isolinux cp "
"syslinux-4.03/core/isolinux.bin /isolinux/ rm -fr syslinux-4.03 # #\tIf all "
"files associated with the boot process should be in one #\tdirectory we have "
"to move kernel and the Rest of /boot to /isolinux.  # mv /boot/* /isolinux # "
"#\tNow we create a symlink from boot to isolinux.  # cd / rmdir boot ln -s "
"isolinux boot # #\tKernel & co can now be found in /boot again.  #\tBut "
"isolinux still needs a config-file, so we create it now: # cat > "
"/isolinux/isolinux.cfg << \"EOF\" default bootcd prompt 1 timeout 40"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:266
#, no-wrap
msgid ""
"label bootcd\n"
"  kernel lfskernel\n"
"  append initrd=initrd.gz root=/dev/ram0 init=/linuxrc ramdisk_size=16384\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:275
#, no-wrap
msgid ""
"label initrdshell\n"
"  kernel lfskernel\n"
"  append initrd=initrd.gz root=/dev/ram0 init=/bin/bash ramdisk_size=16384\n"
"EOF\n"
"#\n"
"#\tisolinux is now installed completely.\n"
"#\n"
"#------------------- end copy and paste ---------------------------\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:362
msgid ""
"# It's a bit more lengthy on a PowerPC machine.  Do: #------------------- "
"copy and paste ------------------------------ # mkdir -p /ppc/mac mkdir -p "
"/ppc/ppc32 # # If it isn't already installed, build and install yaboot.  # "
"cd /sources tar xvfz yaboot-1.3.16.tar.gz cd yaboot-1.3.16 sed -i "
"'s%/usr/local%/usr%' man/* make PREFIX=/usr make PREFIX=/usr install cd ..  "
"cp /usr/lib/yaboot/yaboot /ppc/mac # # Create an open firmware configuration "
"file.  # cat > /ppc/mac/ofboot.b << \"EOF\" <CHRP-BOOT> <COMPATIBLE> MacRISC "
"MacRISC2 MacRISC3 MacRISC4 </COMPATIBLE> <DESCRIPTION> LFS CD PPC bootloader "
"</DESCRIPTION> <BOOT-SCRIPT> \" screen\" output load-base release-load-area "
"boot cd:,\\ppc\\mac\\yaboot conf=cd:,\\ppc\\ppc32\\yaboot.conf "
"</BOOT-SCRIPT> <OS-BADGE-ICONS> 1010 f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8 f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f80000000000000000000000000000f8 f80000000000000000000000000000f8 "
"f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8 ffffffffffffffffffffffffffffffff "
"ffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffff "
"ffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffff "
"ffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffff "
"ffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffff "
"ffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffff "
"ffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffff "
"ffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffff "
"ffffffffffffffffffffffffffffffff </OS-BADGE-ICONS> </CHRP-BOOT> EOF"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:368
#, no-wrap
msgid ""
"#\n"
"# Create a yaboot message file\n"
"#\n"
"cat > /ppc/ppc32/yaboot.msg << \"EOF\"\n"
"MacRISC type machine...\n"
"____________________________________________________\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:372
msgid "GNU/Linux LFS PPC - 32bit"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:374 origin/boot-cd_easy.txt:404
msgid "EOF"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:381
msgid ""
"# # Create a yaboot configuration file.  # cat > /ppc/ppc32/yaboot.conf << "
"\"EOF\" message=/ppc/ppc32/yaboot.msg delay=20"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:388
msgid ""
"init-message = \"\\nWelcome to LFS bootCD 2 \\nHit <TAB> for boot "
"options.\\n\\n\" timeout=150 default=bootcd #enablecdboot #enableofboot "
"#enablenetboot"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:395
#, no-wrap
msgid ""
"image=/boot/lfskernel\n"
"\tlabel=bootcd\n"
"\tinitrd=/boot/initrd.gz\n"
"\tappend=\"rootdelay=2 init=/linuxrc root=/dev/ram0 ramdisk_size=16384\"\n"
"\tread-write\n"
"\tpause-after\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:402
#, no-wrap
msgid ""
"image=/boot/lfskernel\n"
"\tlabel=initrdshell\n"
"\tinitrd=/boot/initrd.gz\n"
"\tappend=\"rootdelay=2 init=/bin/bash root=/dev/ram0 ramdisk_size=16384\"\n"
"\tread-write\n"
"\tpause-after\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:407
msgid "# #------------------- end copy and paste ---------------------------"
msgstr ""

#. type: Bullet: '4. '
#: origin/boot-cd_easy.txt:413
msgid ""
"Move /etc /var /root /home to /fake/needwrite "
"--------------------------------------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:419
#, no-wrap
msgid ""
"\tThis step will all directories needing write access to /fake/needwrite \n"
"\tand create symlinks from their original locations.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:444
msgid ""
"#------------------- copy and paste ------------------------------ # # move "
"directories # mkdir -p /fake/{needwrite,ramdisk} cd / mv etc/ var/ root/ "
"home/ fake/needwrite/ # # create symlinks so that everything seems to be as "
"before # ln -s fake/needwrite/etc etc ln -s fake/needwrite/var var ln -s "
"fake/needwrite/root root ln -s fake/needwrite/home home ls -l # # You should "
"see the following symlinks.  # #\t etc -> fake/needwrite/etc #\t home -> "
"fake/needwrite/home #\t root -> fake/needwrite/root #\t var -> "
"fake/needwrite/var # #------------------- end copy and paste "
"---------------------------"
msgstr ""

#. type: Bullet: '5. '
#: origin/boot-cd_easy.txt:450
msgid ""
"Create boot script which mounts the ramdisk "
"--------------------------------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:459
#, no-wrap
msgid ""
"\tOk, we have /etc /var /root /home linked to\n"
"\t/fake/needwrite which is first read-only.\n"
"\tTo be able to login (and to run services on runlevel x\n"
"\twhich need write access to /etc /var /root or /home)\n"
"\twe must call a script from our /etc/rc.d/init.d/ directory which\n"
"\tcreates a ramdisk to /fake/needwrite with write access.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:463
#, no-wrap
msgid ""
"\tThe following script creates a ramdisk to /fake/ramdisk and\n"
"\twill copy everything of /fake/needwrite to /fake/ramdisk.\n"
"\tThen it remounts the ramdisk to /fake/needwrite.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:468
msgid ""
"#------------------- copy and paste ------------------------------ # cat > "
"/etc/rc.d/init.d/create_ramdisk << \"EOF\" #!/bin/sh"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:472
msgid "dev_ram=/dev/ram0 dir_ramdisk=/fake/ramdisk dir_needwrite=/fake/needwrite"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:474
msgid "source /etc/rc.d/init.d/functions"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:511
#, no-wrap
msgid ""
"case \"$1\" in\n"
"        start)\n"
"                echo -n \"Creating ext2fs on $dev_ram ...              \"\n"
"                /sbin/mke2fs -m 0 -i 1024 -q $dev_ram > /dev/null 2>&1\n"
"                evaluate_retval\n"
"                sleep 1\n"
"                echo -n \"Mounting ramdisk on $dir_ramdisk ...         \"\n"
"                mount -n $dev_ram $dir_ramdisk\n"
"                evaluate_retval\n"
"                sleep 1\n"
"                echo -n \"Copying files to ramdisk ...                 \"\n"
"                cp -dpR $dir_needwrite/* $dir_ramdisk > /dev/null 2>&1\n"
"                evaluate_retval\n"
"                sleep 1\n"
"                echo -n \"Remount ramdisk to $dir_needwrite ...        \"\n"
"                umount -n $dir_ramdisk > /dev/null 2>&1\n"
"                sleep 1\n"
"                mount -n $dev_ram $dir_needwrite\n"
"                sleep 1\n"
"                ;;\n"
"        *)\n"
"                echo \"Usage: $0 {start}\"\n"
"                exit 1\n"
"                ;;\n"
"esac\n"
"EOF\n"
"chmod 0755 /etc/rc.d/init.d/create_ramdisk\n"
"#\n"
"#\tcreate_ramdisk should be the first script excecuted by init,\n"
"#\tso we set this link:\n"
"#\t/etc/rc.d/rcsysinit.d/S00create_ramdisk -> ../init.d/create_ramdisk\n"
"#\n"
"cd /etc/rc.d/rcsysinit.d\n"
"ln -s ../init.d/create_ramdisk S00create_ramdisk\n"
"#\n"
"#------------------- end copy and paste ---------------------------\n"
msgstr ""

#. type: Bullet: '6. '
#: origin/boot-cd_easy.txt:517
msgid "Configure LFS to run from CD ----------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:527
#, no-wrap
msgid ""
"\tSince the root filesystem will be mounted from our startup script,\n"
"we have to change /etc/fstab of LFS.   Delete all entries you don't need. \n"
"(e.g. all /dev/hd*) and add /tmp as a tmpfs file system.  Also, the\n"
"startup scripts need to be tweaked for running on a CD (file systems\n"
"don't need to be checked or remounted rw).   And since the startup\n"
"script runs before the device nodes have been populated, we have to \n"
"manually create some device nodes for it.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:533
msgid ""
"#------------------- copy and paste ------------------------------ # cat > "
"/etc/fstab << \"EOF\" # Begin /etc/fstab for a bootable CD"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:562
#, no-wrap
msgid ""
"# file system  mount-point  type   options         dump  fsck\n"
"#                                                        order\n"
"#/dev/EDITME     /            EDITME  defaults        1     1\n"
"#/dev/EDITME     swap         swap   pri=1           0     0\n"
"proc           /proc        proc   defaults        0     0\n"
"sysfs          /sys         sysfs  defaults        0     0\n"
"devpts         /dev/pts     devpts gid=4,mode=620  0     0\n"
"tmpfs          /dev/shm     tmpfs  defaults        0     0\n"
"tmp            /tmp         tmpfs  defaults        0     0\n"
"# End /etc/fstab\n"
"EOF\n"
"#\n"
"#\n"
"# Remove file system check.\n"
"#\n"
"rm -f /etc/rc.d/rcsysinit.d/S30checkfs\n"
"#\n"
"# Disable remounting of / as rw in S40mountfs\n"
"#\n"
"cd /etc/rc.d/init.d\n"
"cp -f mountfs origmountfs\n"
"grep -v 'remount' origmountfs >mountfs\n"
"chmod 0755 mountfs\n"
"#\n"
"# Ensure that /dev/loop0 exists (compressed /usr requires it).\n"
"mknod /lib/udev/devices/loop0 b 7 0\n"
"#\n"
"#------------------- end copy and paste ---------------------------\n"
msgstr ""

#. type: Bullet: '7. '
#: origin/boot-cd_easy.txt:567
msgid "Create initial ramdisk ----------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:571
#, no-wrap
msgid ""
"    If you are chrooted into your LFS system, exit from chroot and return\n"
"to your host system.   Unmount any virtual file systems that are mounted\n"
"into the $LFS tree.   \n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:574
#, no-wrap
msgid ""
"    To ensure that everything is in a good state for the remainder of this\n"
"procedure, it may be best to simply shutdown and restart your host system.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:576
#, no-wrap
msgid "\tMake sure LFS is set after rebooting!!\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:586
msgid ""
"#------------------- copy and paste ------------------------------ #\tAdd "
"device nodes that will be needed before /dev has been #\tpopulated # mknod "
"$LFS/dev/ram0 b 1 0 # #------------------- end copy and paste "
"---------------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:588
#, no-wrap
msgid "\tNow we create the initrd image file and filesystem.  \n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:648
#, no-wrap
msgid ""
"#------------------- copy and paste ------------------------------\n"
"#\n"
"#\n"
"dd if=/dev/zero of=$LFS/boot/initrd bs=1024 count=8192\n"
"mke2fs -m 0 -i 1024 -F $LFS/boot/initrd\n"
"#\n"
"mount -o loop $LFS/boot/initrd $LFS/mnt\n"
"cd $LFS/mnt\n"
"mkdir bin lib dev proc mnt\n"
"#\n"
"mknod $LFS/mnt/dev/ram0    b  1  0\n"
"mknod $LFS/mnt/dev/null    c  1  3\n"
"mknod $LFS/mnt/dev/zero    c  1  5\n"
"mknod $LFS/mnt/dev/console c  5  1\n"
"mknod $LFS/mnt/dev/ttyS0   c  4 64\n"
"mknod $LFS/mnt/dev/sr0     b 11  0\n"
"mknod $LFS/mnt/dev/sr1     b 11  1\n"
"mknod $LFS/mnt/dev/sda     b  8  0\n"
"mknod $LFS/mnt/dev/sdb     b  16  0\n"
"mknod $LFS/mnt/dev/sdc     b  32  0\n"
"mknod $LFS/mnt/dev/sdd     b  48  0\n"
"mknod $LFS/mnt/dev/hda     b  3  0\n"
"mknod $LFS/mnt/dev/hdb     b  3  64\n"
"mknod $LFS/mnt/dev/hdc     b  22  0\n"
"mknod $LFS/mnt/dev/hdd     b  22 64\n"
"mknod $LFS/mnt/dev/hde     b  33  0\n"
"#\n"
"cp $LFS/bin/{bash,mount,grep,umount,echo} $LFS/mnt/bin/\n"
"cp $LFS/usr/bin/test $LFS/mnt/bin/\n"
"cp $LFS/usr/sbin/chroot $LFS/mnt/bin/\n"
"cp $LFS/sbin/pivot_root $LFS/mnt/bin/\n"
"ln -s bash $LFS/mnt/bin/sh\n"
"ln -s test $LFS/mnt/bin/[\n"
"#\n"
"cp $LFS/lib/{libncursesw.so.5,libdl.so.2,} $LFS/mnt/lib/\n"
"cp $LFS/lib/{libc.so.6,libreadline.so.6} $LFS/mnt/lib/\n"
"cp $LFS/lib/{libhistory.so.6,libblkid.so.1,libuuid.so.1} $LFS/mnt/lib/\n"
"if [ -f $LFS/lib/ld-linux.so.2 ] \n"
"then \n"
"cp -f $LFS/lib/ld-linux.so.2 $LFS/mnt/lib/\n"
"fi\n"
"if [ -f $LFS/lib/ld.so.1 ] \n"
"then \n"
"cp -f $LFS/lib/ld.so.1 $LFS/mnt/lib/\n"
"fi\n"
"#\n"
"#\n"
"# cat, sleep & mknod are optional, but often useful to have when something\n"
"# gos wrong so put them in the initrd also.\n"
"#\n"
"cp $LFS/bin/{cat,sleep,mknod} $LFS/mnt/bin/\n"
"#\n"
"#\tThe first program executed by the kernel is /linuxrc. As it does not\n"
"#\texist we create it. Our script will find the CD in the correct\n"
"#\tCD-ROM drive and then mount it as rootfs / and run /sbin/init 3.\n"
"#\n"
"#\n"
"cat > $LFS/mnt/linuxrc << \"EOF\"\n"
"#!/bin/sh\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:652
msgid ""
"#ID is the volume id / label of the LFS boot CD that will be looked for.  "
"EOF"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:654
msgid "echo \"ID=\\\"LFS_$(date +%Y%m%d)\\\"\" >> $LFS/mnt/linuxrc"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:657
msgid "cat >> $LFS/mnt/linuxrc << \"EOF\" TMP_MOUNT=\"/mnt\""
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:659
msgid "PATH=\"/bin:/sbin:/usr/bin:/usr/sbin\""
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:662
msgid ""
"#this script searches for cdrom devices and then tries to find #the LFS boot "
"CD in order to mount it as / (rootfs)"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:672
msgid ""
"#you need following programs: #- /bin/sh (e.g. bash)  #- echo #- [ (which is "
"linked to test)  #- mount #- umount #- grep #- pivot_root #- chroot"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:676
msgid ""
"#you need following devices: #- /dev/hd*, /dev/sd*, /dev/sr* or /dev/cdrom* "
"#- /dev/null"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:680
msgid "#you need following directories: #- /proc #- $TMP_MOUNT"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:682
msgid "CHECK_TYPE=\"try_mount\""
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:686
#, no-wrap
msgid ""
"if [ ! -d \"/proc/\" ]; then\n"
"  mkdir /proc\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:688
msgid "mount -n proc /proc -t proc"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:690
msgid "#1. Create a list of possible cdrom devices."
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:693
msgid ""
"CDROM_LIST=\"/dev/sr0 /dev/sr1 /dev/cdrom /dev/hda /dev/hdb /dev/hdc "
"/dev/hdd /dev/hde /dev/sda /dev/sdb\""
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:695
msgid "#2. now we try to find the LFS boot CD (we use ID as identification)"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:701
#, no-wrap
msgid ""
"LFS_CDROM_DEVICE=\"\"\n"
"echo \"Using $CHECK_TYPE\"\n"
"for cdrom_device in $CDROM_LIST\n"
"do\n"
"  echo -n \"Checking $cdrom_device ... \"\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:706
#, no-wrap
msgid ""
"  if [ \"$CHECK_TYPE\" = \"try_mount\" ]; then\n"
"    mount -n -t iso9660 $cdrom_device $TMP_MOUNT > /dev/null 2>&1\n"
"    media_found=$?\n"
"  fi\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:708
#, no-wrap
msgid "  if [ $media_found -eq 0 ]; then\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:714
#, no-wrap
msgid ""
"    echo -n \"media found\"\n"
"    if [ \"$CHECK_TYPE\" = \"try_mount\" ]; then\n"
"      [ -e \"$TMP_MOUNT/$ID\" ]\n"
"      media_lfs=$?\n"
"    fi\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:718
#, no-wrap
msgid ""
"    if [ \"$CHECK_TYPE\" = \"try_mount\" ]; then\n"
"      umount -n $cdrom_device > /dev/null 2>&1\n"
"    fi\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:726
#, no-wrap
msgid ""
"    if [ $media_lfs -eq 0 ]; then\n"
"      echo \", LFS boot CD found. Ready!\"\n"
"      LFS_CDROM_DEVICE=\"$cdrom_device\"\n"
"      break;\n"
"    else\n"
"      echo \", not LFS boot CD.\"\n"
"    fi\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:731
#, no-wrap
msgid ""
"  else\n"
"    echo \"no media \"\n"
"  fi\n"
"done\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:735
msgid "#3. mount LFS CD as / (root fs)  if [ \"$LFS_CDROM_DEVICE\" = \"\" ]; then"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:740
#, no-wrap
msgid ""
"  echo \"No LFS boot CD found!!!  You will have to fix this to continue\"\n"
"  echo \"do: mount -n -o ro -t iso9660 'your cd device' $TMP_MOUNT\"\n"
"  echo \"Then exit shell to continue\"\n"
"  bash\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:742
msgid "else"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:744
#, no-wrap
msgid "  echo \"Booting from $LFS_CDROM_DEVICE ...                  \"\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:753
#, no-wrap
msgid ""
"  mount -n -o ro -t iso9660 $LFS_CDROM_DEVICE $TMP_MOUNT\n"
"fi\n"
"  cd $TMP_MOUNT\n"
"  pivot_root . mnt\n"
"  umount -n /mnt/proc >/dev/null 2>&1\n"
"  exec chroot . sh -c 'umount -n /mnt >/dev/null 2>&1;\\\n"
"  exec -a init.new /sbin/init 3'\\\n"
"  <dev/console >dev/console 2>&1\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:767
msgid ""
"EOF # #\tTo make this script executable run # chmod 0755 $LFS/mnt/linuxrc # "
"#\tOk, that's it. Unmount the image and compress it.  # cd $LFS/ umount "
"$LFS/mnt gzip $LFS/boot/initrd # #------------------- end copy and paste "
"---------------------------"
msgstr ""

#. type: Bullet: '8) '
#: origin/boot-cd_easy.txt:770
msgid "(Optional) compress /usr."
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:774
#, no-wrap
msgid ""
"\tThis step is optional.   It's only needed if your media is\n"
"\ttoo small or if you just want to minimize the size of the ISO \n"
"\tfile.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:776
#, no-wrap
msgid "\tBefore you go further, check the size of your LFS tree:\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:778
msgid "du -h $LFS/"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:780
#, no-wrap
msgid "\tVerify that it will fit on your media (approx 700MB for a CD..)\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:784
#, no-wrap
msgid ""
"\tIf it will not fit, and there isn't anything that can easily\n"
"\tbe removed to make it fit, you can compress the /usr file \n"
"\tsystem to reduce the size by a couple hundred megabytes.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:789
#, no-wrap
msgid ""
"\tTo compress your $LFS/usr directory, use mksquashfs to create\n"
"\ta 'squashed' version of $LFS/usr, remove the original $LFS/usr\n"
"\tand modify $LFS/etc/fstab to mount the squashed /usr during\n"
"\tsystem startup.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:795
#, no-wrap
msgid ""
"\tThe kernel squashfs support does not universally work with\n"
"\tany squashfs filesystems.  Make sure you are using\n"
"\ta version of squashfs tools (likely version 4 or better...)\n"
"\twhich creates squashfs files that are compatible with your\n"
"\tkernel.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:798
#, no-wrap
msgid ""
"\tchroot is in /usr and must be moved to /sbin if compression\n"
"\tis used.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:807
msgid ""
"#------------------- copy and paste ------------------------------ mv "
"$LFS/usr/sbin/chroot $LFS/sbin/chroot mksquashfs $LFS/usr $LFS/usr.sqsh rm "
"-fr $LFS/usr/* cat >> $LFS/etc/fstab << \"EOF\" "
"/usr.sqsh\t/usr\tsquashfs\tloop,ro\t0 0 EOF #------------------- end copy "
"and paste ---------------------------"
msgstr ""

#. type: Bullet: '9. '
#: origin/boot-cd_easy.txt:811
msgid "Create Boot CD ISO Image ----------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:816
#, no-wrap
msgid ""
"\tIf you have a CD-RW you may want to use it for testing. When\n"
"\tyour system boots quite good from CD-RW you can burn it on a CD-R.\n"
"\t(I give you this advice, because I got the clue after burning\n"
"\tabout 10 CD-Rs that didn't work ;-)\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:819
#, no-wrap
msgid ""
"\tBecause linuxrc must be able to identify the CD you have to create a\n"
"\tfile called \"LFS_YYYYMMDD\".\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:823
msgid ""
"#------------------- copy and paste ------------------------------ touch "
"$LFS/LFS_$(date +%Y%m%d)  #------------------- end copy and paste "
"---------------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:825
#, no-wrap
msgid "\tNow create the ISO image of your bootable CD.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:836
msgid ""
"# On a X86 do this: #------------------- copy and paste "
"------------------------------ # cd $LFS/ rm -f lfsbootcd.iso mkisofs -R -l "
"-L -D -b isolinux/isolinux.bin -c isolinux/boot.cat \\ -no-emul-boot "
"-boot-load-size 4 -boot-info-table -V \"LFS_$(date +%Y%m%d)\" \\ $LFS "
">lfsbootcd.iso # #------------------- end copy and paste "
"---------------------------"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:861
#, no-wrap
msgid ""
"# On a powerpc do this:\n"
"#------------------- copy and paste ------------------------------\n"
"#\n"
"# Create a mapping file.\n"
"#\n"
"cat > $LFS/boot/map.hfs << \"EOF\"\n"
"# ext.  xlate  creator  type    comment\n"
".b Raw 'chrp' 'tbxi' \"bootstrap\"\n"
"yaboot Raw 'unix' 'boot' \"bootstrap\"\n"
".conf Ascii 'unix' 'text' \"config\"\n"
".msg Ascii 'unix' 'text' \"text\"\n"
"* Raw '????' '????' \"unknown\" \n"
"EOF\n"
"#\n"
"#\n"
"#\n"
"rm -f lfsbootcd.iso\n"
"mkisofs -r -V \"LFS_$(date +%Y%m%d)\" -iso-level 4 -chrp-boot -hfs \\\n"
"-part -probe -no-desktop \\\n"
"-hfs-bless $LFS/ppc/mac -map $LFS/boot/map.hfs \\\n"
"-b ppc/mac/yaboot -no-emul-boot \\\n"
"-hide-rr-moved -o lfsbootcd.iso $LFS\n"
"#\n"
"#------------------- end copy and paste ---------------------------\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:864
msgid "9a) Burn the ISO image"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:868
#, no-wrap
msgid ""
"\tThe ISO image lfsbootcd.iso is complete.   Either use your favorite\n"
"\tCD burning tools to burn it or use the cdrecord utility as such:\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:874
#, no-wrap
msgid ""
"\tNote!\n"
"\tdev=0,0,0 is the device number of your CD-Writer\n"
"\tCheck your SCSI devices with \"cdrecord -scanbus\"\n"
"\tspeed=4 should be changed to (max) speed of your CD-Writer.\n"
"\tIf you are using a CD-RW add blank=fast to the cdrecord-command!\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:876
msgid "cat lfsbootcd.iso |cdrecord -v -eject dev=0,0,0 speed=4 -"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:880
#, no-wrap
msgid ""
"10. Reboot and enjoy\n"
"   ----------------\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:883
#, no-wrap
msgid ""
"\tReboot and let your Bios boot from CD.  (On PowerPC press the\n"
"\tand hold the 'c' key after reset).\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:887
#, no-wrap
msgid ""
"\t/tmp will have lots of free space (approx 1/2 of your RAM).\n"
"\tThe remaining 'writable' directories (/home and such) will \n"
"\thave about 10meg of free space for you to use.\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:889
#, no-wrap
msgid "\tEnjoy the kernel messages and login prompt ;-)\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:890
#, no-wrap
msgid "------------------------------------------------------------------\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:895
#, no-wrap
msgid ""
"ACKNOWLEDGEMENTS:\n"
" Special thanks for bug reports and help to:\n"
" David Maus <oneyed@gmx.de>\n"
msgstr ""

#. type: Plain text
#: origin/boot-cd_easy.txt:904
#, no-wrap
msgid ""
"CHANGELOG:\n"
"[2002-11-19]\n"
"  * Initial hint.\n"
"\tThomas Foecking <thomas@foecking.de>\n"
"\tChristian Hesse <mail@earthworm.de>\n"
"[2011-03-12]\n"
"\tUpdated: Jimmy Anderson  <jimmy.anderson1057@gmail.com>\n"
"\tUpdated to current LFS, added /usr/compression and\n"
"\tbuilding for PowerPC.   Adjusted hint format to template.\n"
msgstr ""
