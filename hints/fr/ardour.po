# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/ardour.txt:2
msgid "AUTHOR:\tAlex Kloss <alex@22-music.com>"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:4
msgid "DATE: 2003-08-20"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:6
msgid "LICENSE: GNU Free Documentation License"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:8
msgid "SYNOPSIS:\tArdour is a multitrack sound recorder/editor/mixer."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:13
msgid ""
"DESCRIPTION: Ardour is somewhat like ProTools(tm), high quality "
"multitracker. It's pretty easy to install, but needs a lot of additional "
"fiddling (RT-Kernel patch, Jack Server and Ladspa)."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:15
msgid "PREREQUISITES:"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:17
#, no-wrap
msgid ""
"Downloads:\n"
"==========\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:29
msgid ""
"ardour\t\thttp://ardour.sourceforge.net -> release or CVS version "
"JACK\t\thttp://jackit.sourceforge.net -> release version "
"glib/gtk+\thttp://www.gtk.org -> 1.2.8 or newer, but not 1.3 or 2.0! "
"libxml2\t\thttp://www.xmlsoft.org -> 2.5.X libart_lgpl\ton your local GNOME "
"mirror, see BLFS section libsndfile\thttp://www.zip.com.au/~erikd/libsndfile "
"-> 1.0 or higher libsamplerate\thttp://www.mega-nerd.com/SRC/ -> 0.0.13 or "
"newer LADSPA SDK\thttp://www.ladspa.org -> SDK and plugins of your liking "
"raptor\t\thttp://www.redland.opensource.ac.uk/raptor -> release "
"liblrdf\t\thttp://plugin.org.uk/lrdf/ -> 0.3.1 or higher"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:32
#, no-wrap
msgid ""
"and the\tRT-Scheduling-Patch for your kernel version:\n"
"\t\thttp://www.zip.com.au/~akpm/linux/schedlat.html\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:34
msgid "Ardour requires to use ALSA as sounddriver."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:36
msgid "HINT:"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:38
#, no-wrap
msgid ""
"Installation order:\n"
"===================\n"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "Kernel Patch for RealTime Scheduling"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid ""
"ALSA sounddriver (if not already available, remember that the reinstallation "
"of the kernel removes everything in the modules directory, so you may have "
"to reinstall the driver)"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "glib"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "gtk+"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "libxml2"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "libsndfile"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "libsamplerate"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "LADSPA SDK (plus the plugins you want)"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "JACK"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "raptor"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "liblrdf"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:54
msgid "ardour"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:58
msgid ""
"There are already hints and/or BLFS sections for ALSA, glib, gtk, libxml2, "
"so these packages will not be discussed again. Please refer to their "
"instructions."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:60
#, no-wrap
msgid ""
"Discussion: Starting Jack/Ardour as root or patching the kernel:\n"
"================================================================\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:65
msgid ""
"If your system is faster than the average (and even a slow hdd can kill that "
"advantage) or you don't think you need Realtime scheduling, you can leave "
"all following instructions about the kernel undone."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:68
msgid ""
"There are 2 ways of starting JACK (and thusly ardour) with realtime latency, "
"once your kernel is patched:"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:71
msgid "start jack as root (need to start ardour as root, too; insecure)"
msgstr ""

#. type: Bullet: ' - '
#: origin/ardour.txt:71
msgid "apply givertcap patch:"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:73
#, no-wrap
msgid "   edit /usr/src/linux/include/linux/capability.h:\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:75
#, no-wrap
msgid "   where it says:\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:78
#, no-wrap
msgid ""
"#define CAP_INIT_EFF_SET    to_cap_t(~0 & ~CAP_TO_MASK(CAP_SETPCAP))\n"
"#define CAP_INIT_INH_SET    to_cap_t(0)\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:80
#, no-wrap
msgid "   change the lines so it will read:\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:83
#, no-wrap
msgid ""
"#define CAP_INIT_EFF_SET    to_cap_t(~0)\n"
"#define CAP_INIT_INH_SET    to_cap_t(~0)\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:85
#, no-wrap
msgid "   and go on with patching your kernel for RT scheduling.\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:87
msgid "I myself prefer the last way, but you may choose yourself."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:89
#, no-wrap
msgid ""
"Patching your kernel:\n"
"=====================\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:99
msgid ""
"cd /usr/src/linux # (or wherever you have your kernel sources)  bzcat "
"<patch> | patch -Np1 # fill in the appropriate name for \"<patch>\" make "
"menuconfig # and select real time scheduling make dep make clean make "
"bzImage make modules make modules_install"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:103
msgid ""
"now copy the bzImage in arch/<arch*>/boot/ to /boot, edit your "
"/etc/lilo.conf to your needs and run lilo [*fill in whatever is appropriate, "
"this will be i386 in most cases]. Now restart your system."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:107
msgid ""
"Install ALSA, glib, gtk+ and libxml2 (when in doubt, look at the related "
"BLFS section/hints)."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:109
#, no-wrap
msgid ""
"Installing every other package:\n"
"===============================\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:112
msgid "all those packages are easy enough installed with"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:116
msgid "./configure --prefix=/usr && make && make install"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:118
#, no-wrap
msgid ""
"Starting ardour:\n"
"================\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:124
msgid ""
"To start ardour, you need to ensure no other process is holding the sound "
"devices, start the jack server and then ardour and don't forget to remove "
"the jack server afterwards. Because we're a lazy bunch, well do that with a "
"script. You'll have to edit it to your needs"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:135
msgid ""
"--snip #!/bin/bash # # Ardour Startscript # # Variable declarations "
"JACKD=jackstart JACKOPTS=\"-a -R -d alsa -d ice1712 -p 512\" # replace "
"\"ice1712\" with your soundcard's identifier! JACKD_ALREADY_RUNNING=0"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:143
#, no-wrap
msgid ""
"# find out whether jackd is already running\n"
"for i in /proc/*/cmdline; do\n"
" CMDLINE=$(<$i)\n"
" if [ \"$CMDLINE\" != \"${CMDLINE#$JACKD}\" ]; then\n"
"  JACKD_ALREADY_RUNNING=1\n"
" fi\n"
"done\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:159
#, no-wrap
msgid ""
"# if jackd isn't yet running, we start it\n"
"if [ \"$JACKD_ALREADY_RUNNING\" = \"0\" ]; then\n"
"# but first we need to kill all processes that locks sound devices\n"
" fuser -k /dev/admmidi? /dev/adsp? /dev/amidi? /dev/audio* /dev/dmfm* \\\n"
"  /dev/dmmidi? /dev/dsp* /dev/dspW* /dev/midi0? /dev/mixer? /dev/music \\\n"
"  /dev/patmgr? /dev/sequencer* /dev/sndstat >/dev/null 2>&1\n"
" if [ -d /proc/asound/dev ]; then\n"
"  fuser -k /proc/asound/dev/* >/dev/null 2>&1\n"
" fi\n"
" if [ -d /dev/snd ]; then\n"
"  fuser -k /dev/snd/* >/dev/null 2>&1\n"
" fi\n"
"# and now start jack\n"
" $JACKD $JACKOPTS &> /dev/null &\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:162
msgid ""
"# now we are ready to start ardour with all options we were called with "
"ardour -n \"$@\""
msgstr ""

#. type: Plain text
#: origin/ardour.txt:165
msgid ""
"# afterwards, if jack wasn't already running (we presume that would be # for "
"a reason), kill the jackd."
msgstr ""

#. type: Plain text
#: origin/ardour.txt:175
#, no-wrap
msgid ""
"if [ \"$JACKD_ALREADY_RUNNING\" = \"0\" ]; then\n"
" for i in /proc/*/cmdline; do\n"
"  if [ \"$(<$i)\" = \"$JACKD$(echo $JACKOPTS | sed s/\\ //g)\" ]; then\n"
"   pidbackup=${i#/proc/}\n"
"   pid=${pidbackup%/cmdline}\n"
"   kill -9 $pid\n"
"  fi\n"
" done\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:177
msgid "# end of ardour-start"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:179
msgid "--snap"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:181
msgid "copy that script to /usr/bin/ardour-start and run"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:183
msgid "chmod 755 /usr/bin/ardour-start"
msgstr ""

#. type: Plain text
#: origin/ardour.txt:186
#, no-wrap
msgid ""
"CHANGELOG:\n"
"[2003-08-20]\n"
"  * Initial hint.\n"
msgstr ""
