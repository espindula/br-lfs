# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/dpkg.txt:2
msgid "AUTHOR: Chris Wheeler <topher.wheeler at yahoo dot com>"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:4
msgid "DATE: 2008-11-05"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:6
msgid "LICENSE: GNU Free Documentation License Version 1.2"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:8
msgid "SYNOPSIS: Use dpkg (.deb) package management on LFS 6.3."
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:13
msgid ""
"DESCRIPTION: This is how to compile and install dpkg - The Debian Package "
"Manager - for LFS 6.3. This will allow pre-compiled (.deb) packages or "
"custom compiled BLFS packages to be installed/uninstalled through a package "
"manager."
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:16
msgid ""
"ATTACHMENTS: * "
"http://www.linuxfromscratch.org/hints/downloads/files/ATTACHMENTS/dpkg/status"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:20
msgid ""
"PREREQUISITES: This hint requires that you have sufficient knowledge of "
"LinuxFromScratch.  Some previous knowledge of debian/dpkg would also help (a "
"lot)."
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:28
#, no-wrap
msgid ""
"HINT:\n"
" This applies specifically to LFS 6.3 but could be adopted to other systems "
"as\n"
"well.  Installing more than one package manager on a system is not "
"recommended.\n"
"I'll start by setting up dpkg, then move on to showing you how to setup apt "
"for\n"
"those interested in prebuilt (including source) packages.  And finally I "
"will\n"
"show you how to create your own binary .deb packages from dhcpcd and lynx in "
"the\n"
"BLFS 6.3 book.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:34
#, no-wrap
msgid ""
" There have been many half-baked attempts at similar documents but this one "
"is\n"
"the real deal.  I know because I am typing this in Kate - in KDE - in X11 , "
"and\n"
"everything beyond my LinuxFromScratch base setup was installed through\n"
"dpkg (except for dpkg itself and a few dependencies).  So buckle up; this "
"will\n"
"save you the 24 solid hours it took me to figure out how to do this.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:41
#, no-wrap
msgid ""
" First of all you need dpkg-1.13.25.tar.gz and po4a_0.29.orig.tar.gz from\n"
"http://www.debian.org/distrib/packages   get em!  I strongly suggest using "
"the\n"
"packages from Debian 4.0 [etch] (currently the stable branch) because, not "
"only\n"
"is it considered stable, but the package versions are slightly older than "
"the\n"
"LFS 6.3 equivalents, for the most part, which means easy dependency handling "
"if\n"
"you decide to merge in other packages from their repository.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:48
#, no-wrap
msgid ""
" To compile \"dpkg\" you need to first compile and install \"po4a\" which "
"needs\n"
"\"Module::Build-0.2808\" from the perl modules in BeyondLinuxFromScratch "
"6.3.  So\n"
"go get \"Module::Build\" from BLFS.  You will have to compile all of its\n"
"dependencies in reverse order.  Just install the ones that are not "
"optional. \n"
"Don't bother with the check part of the compiles either; that will just "
"create\n"
"more dependencies for you to deal with.  Compile and install "
"\"Module::Build\".\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:54
#, no-wrap
msgid ""
" Now would be a good time to make sure you properly setup LC* and LANG*\n"
"environment variables according to LFS 6.3 chap 7.9 \"Bash Shell Startup "
"Files\".\n"
"Compile and install \"po4a\".  Run \"gcc --print-libgcc-file-name\" without "
"quotes. \n"
"This will give a clue to your architecture type (i686 etc need to use "
"i386). \n"
"Compile \"dpkg\" with the command line: \n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:57
#, no-wrap
msgid ""
" ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \\\n"
" --build=i386-gnu-linux\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:65
#, no-wrap
msgid ""
"* you can omit --prefix=/usr to use /usr/local; I believe this also "
"determines\n"
"where your .deb packages will be installed.\n"
"* I also include \"--without-dselect\" because I still have nightmares about "
"that\n"
"piece of junk.\n"
"* --build=CPU-COMPANY-SYSTEM  ;what I provided above is for all x86 setups\n"
"(except amd64 I suppose).  You can still optimize the packages you create "
"(ie.\n"
"CFLAGS=\"-O3 -march=i686\").\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:70
#, no-wrap
msgid ""
"..then do \"make\" and as root \"make install\" as usual.\n"
"while you are root do:\n"
" touch /var/dpkg/status\n"
" touch /var/dpkg/available\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:73
msgid ""
"That's all there is to it! Well unless you actually want to do something "
"with it..."
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:76
msgid ""
"- Phase [2] - INSTALLING APT - - you can skip to phase [3] if you just want "
"to create your own packages."
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:85
#, no-wrap
msgid ""
" This section is for people who may want to use packages created by "
"others. \n"
"First of all you need to create some dummy entries in /var/dpkg/status to "
"make\n"
"dpkg think that some basic GNU programs and libraries are installed "
"(because\n"
"they are). I have attached my working (but needs working) \"status\" file at "
"the\n"
"top of this document.  It seems one can get away with just the package "
"name,\n"
"version, architecture, and status.  A proper mock-up of a real status file "
"with\n"
"all the resulting debian packages would be nicer though. There might be a\n"
"clean way to do this with the \"equivs\" program.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:88
#, no-wrap
msgid ""
" You can ignore the messages:\n"
"  dpkg: serious warning: files list ...\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:94
#, no-wrap
msgid ""
" Those are a result of the crude, but effective status file.\n"
"I achieved the \"status\" file by running each LFS source package name "
"through\n"
"debian's package search tool with the search source packages option selected "
"-\n"
"which then showed me what .deb's are created from the source tarball.  I "
"didn't\n"
"bother to include the <package>-doc.deb's though.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:99
#, no-wrap
msgid ""
" For the installation of \"apt\" on LFS 6.3 I only cover installing with "
"the\n"
"binary: apt_0.6.46.4-0.1_i386.deb   (the i386 part will differ for other "
"cpu's)\n"
"So get it from http://www.debian.org/distrib/packages and also get the\n"
"\"sysv-rc\" package:  sysv-rc_2.86.ds1-38+etchnhalf.1_all.deb\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:106
#, no-wrap
msgid ""
"Run:\n"
" ar xv sysv-rc_*_all.deb\n"
" tar xvf data.tar.gz\n"
"  (and as root)\n"
" cp ./usr/sbin/update-rc.d /usr/sbin/\n"
" dpkg -i apt_*_i386.deb\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:109
#, no-wrap
msgid ""
" You should now have \"apt\" installed, but not fully configured.  To finish "
"the\n"
"setup (as root):\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:113
#, no-wrap
msgid ""
" cd /etc/apt\n"
" cp /usr/share/doc/apt/examples/configure-index.gz ./apt.conf.gz\n"
" gunzip ./apt.conf.gz\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:116
#, no-wrap
msgid ""
" Edit the \"apt.conf\" file with \"vi\" or some other editor if you have "
"one\n"
"installed.  Use // to comment out any lines you are unsure of.  "
"Specifically:   \n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:126
#, no-wrap
msgid ""
" // any lines with \"Pre-Invoke\" \"Post-Invoke\" for auto re-mounting.\n"
" // any lines with \"pre-configure\"\n"
" // ftp & http proxy stuff or edit it at least.\n"
" // the Dl-Limit \"7\" in the http section! (and I thought the us mirror "
"was\n"
"                                           really slow!)\n"
" - Remove the last three lines of \"junk\" at bottom of file\n"
" - edit /var/lib/dpkg/status to just be /var/dpkg/status\n"
" - edit Cache-Limit to be \"33554432\" or maybe just comment it out.\n"
" - edit mount \"/cdrom\"; to be: mount \"/media/cdrom\"; or whatever you "
"use.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:128
msgid "(done, save & quit)"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:133
#, no-wrap
msgid ""
"(run this for debian repository):\n"
" cp /usr/share/doc/apt/examples/sources.list /etc/apt/\n"
" apt-get update\n"
" apt-get -f install\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:135
msgid "There you gots it. apt"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:137
msgid "Phase [3] - BUILD YOUR OWN PACKAGES! -"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:143
#, no-wrap
msgid ""
"  First we'll start with \"dhcpcd\" from bLFS as an example (it seems to "
"work\n"
"better than debian's version).  So download \"dhcpcd-3.0.19.tar.bz2\" from "
"the\n"
"BLFS 6.3 book and un-pack it.  Run the \"make\" command inside the source\n"
"directory like the book suggests, then instead of going straight to \"make\n"
"install\" do this:\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:147
#, no-wrap
msgid ""
" mkdir ./debian\n"
" (then, as root)\n"
" make DESTDIR=./debian/ install\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:157
#, no-wrap
msgid ""
" Now if you look in the \"debian\" directory that you created inside your "
"package\n"
"source directory, it should have the files installed in the \"sbin\" , "
"\"usr\" ,\n"
"and \"etc\" folders just like it would if you installed it to / .  Most "
"packages\n"
"that use the automake/autoconf setup (most GNU programs) allow for the\n"
"\"DESTDIR=\" flag for \"make install\".  If unsure, check the Makefile and "
"look for\n"
"$(DESTDIR).  This diverts the package install at the last minute, but the\n"
"--prefix=/usr or whatever is still hard-coded into the program.  So the "
"program\n"
"should work properly when dpkg expands the <package>.deb file to the root "
"folder\n"
"of your system.  \n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:162
#, no-wrap
msgid ""
" Next get and un-pack the blfs-bootscripts-20080816 like BLFS\n"
"recommends.  Run \"make DESTDIR=/path/to/dhcpcd/debian/ "
"install-service-dhcpcd\"\n"
"without the quotes.  This should install the dhcpcd bootscript somewhere "
"down\n"
"the etc/sysconfig/... branch of the same ./debian tree.  \n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:167
#, no-wrap
msgid ""
" This next part is very easy but pay attention. The config files in the "
"BLFS\n"
"book need to be slightly modified.  The first two lines need a ./path/to "
"instead\n"
"of just /path/to ;that's \"dot slash path\" instead of just \"slash "
"path\". And you\n"
"need to run the install & cat command code blocks from inside the ./debian "
"dir.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:169
#, no-wrap
msgid " So the first two original lines:\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:172
#, no-wrap
msgid ""
"  install -v -d /etc/sysconfig/network-devices/ifconfig.eth0 &&\n"
"  cat > /etc/sysconfig/network-devices/ifconfig.eth0/dhcpcd << \"EOF\"\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:174
msgid "...are now:"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:177
#, no-wrap
msgid ""
"  install -v -d ./etc/sysconfig/network-devices/ifconfig.eth0 &&\n"
"  cat > ./etc/sysconfig/network-devices/ifconfig.eth0/dhcpcd << \"EOF\"\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:183
msgid ""
"...then you can hit enter (inside the ./debian directory) and continue "
"pasting the rest of the file.  Note: It may be a good idea to edit the "
"dhcpcd config file that is now in the ./debian/etc/.../ifconfig.eth0/ folder "
"and remove the: \"<insert appropriate start options here>\" lines.  I just "
"left \"\" and \"-k\" for mine and everything works fine."
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:187
#, no-wrap
msgid ""
" Finally make it a .deb package file.  The Debian Binary Package Building "
"HOWTO\n"
"is a great source for info on making binary .deb's (especially section 4).  "
"Now\n"
"let's make a \"control\" file for our package.  It should have at least:\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:196
msgid ""
"Package: <package name> Version: <package version> Architecture: i386 "
"Maintainer: Your Name <your.name@somewhere.com> Description: Your package "
"description goes here.  There can be no blank lines in the control file. So "
"if you need a blank line in the description do this .  yep, just a single "
"dot will work, and it will show as a blank line."
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:204
#, no-wrap
msgid ""
" The Debian New Maintainer's Guide and The Debian Policy Manual are also "
"good\n"
"sources on how to create and manage .deb files.  You may also put a "
"\"Depends: \"\n"
"line in the middle of your control file to include mandatory dependencies.  "
"I\n"
"prefer not to append the debian revision to my package versions (x.y.z "
"instead\n"
"of x.y.z-1) that way it seems debian will ignore packages of the same "
"version\n"
"even if they have a high revision like -13 and it's less conflict with "
"existing\n"
"packages.  \n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:207
#, no-wrap
msgid ""
" You can use the \"ldd <filename>\" command to find out which shared "
"libraries\n"
"your program uses and include those as depends:\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:212
#, no-wrap
msgid ""
"$ldd dhcpcd\n"
"        linux-gate.so.1 =>  (0xb7f27000)\n"
"        libc.so.6 => /lib/libc.so.6 (0xb7df4000)\n"
"        /lib/ld-linux.so.2 (0xb7f28000)\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:219
#, no-wrap
msgid ""
" You can then run the library names in debian.org's package search engine "
"with\n"
"\"search package contents\" selected to find out which official package they "
"come\n"
"from and even trace that back to the source package.  However you want to\n"
"handle dependencies is up to you; just ignore them if you want/dare.  "
"Either\n"
"way I definitely suggest further reading on at least that subject in the "
"above\n"
"mentioned documents.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:221
#, no-wrap
msgid " Go to the ./debian folder for your package and :\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:223
#, no-wrap
msgid "  mkdir DEBIAN\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:225
#, no-wrap
msgid ""
" Then edit/save your \"control\" file so that it's : "
"./debian/DEBIAN/control\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:227
#, no-wrap
msgid " From the folder just below ./debian (your package source dir) run :\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:229
#, no-wrap
msgid "  find ./debian -type d | xargs chmod 755\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:231
#, no-wrap
msgid " And Finally :\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:233
#, no-wrap
msgid "  dpkg-deb --build debian\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:240
#, no-wrap
msgid ""
" Always use dpkg-deb for manipulating .deb files (it's part of dpkg).  "
"Rename\n"
"the resulting debian.deb package to whatever you like dot deb.  The official "
"way\n"
"is packagename_x.y.z-#_arch.deb  .  It's probably a good idea to use i686 "
"or\n"
"pentium3 or whatever for the arch part if you use -march=cpu flags with "
"gcc. \n"
"That way you will know which packages are optimized.  Or at least list "
"your\n"
"optimizations in the description part of the control file.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:242
#, no-wrap
msgid " To install your new package run (as root):\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:244
#, no-wrap
msgid "  dpkg -i packagename.deb\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:246
#, no-wrap
msgid " To uninstall your package run (as root):\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:249
#, no-wrap
msgid ""
"  dpkg -r packagename\n"
"        ... -r leaves configuration files in place\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:252
#, no-wrap
msgid ""
"  dpkg --purge packagename\n"
"        ... --purge removes entire program and config files\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:254
msgid "SECOND PACKAGE EXAMPLE - Lynx -"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:258
#, no-wrap
msgid ""
" Get Lynx-2.8.6rel.5 and open BLFS 6.3 page for it in chap 15.  After you\n"
"unpack the source tarball to a directory do not change to it.  Instead, in "
"the\n"
"directory you just unpacked from (just under the source tree):\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:269
#, no-wrap
msgid ""
"  mkdir build\n"
"  cd build\n"
"  ../lynx2-8-6/configure --prefix=/usr \\\n"
"                         --sysconfdir=/etc/lynx \\\n"
"                         --datadir=/usr/share/doc/lynx-2.8.6rel.5 \\\n"
"                         --with-zlib \\\n"
"                         --with-bzlib \\\n"
"                         --with-screen=ncursesw \\\n"
"                         --enable-locale-charset &&\n"
"\t\tmake\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:273
#, no-wrap
msgid ""
" This causes new files created by the compilation to be place in ./build\n"
"instead of the ./lynx2-8-6 dir.  It's just good practice so I thought I'd\n"
"include this method.  Now as root (from inside build dir):\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:276
#, no-wrap
msgid ""
"  mkdir debian\n"
"  make DESTDIR=./debian/ install\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:278
#, no-wrap
msgid " Now like before, change to the ./debian dir and (as BLFS recommends) run:\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:281
#, no-wrap
msgid ""
"  cd debian\n"
"  chgrp -v -R root ./usr/share/doc/lynx-2.8.6rel.5/lynx_doc\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:287
#, no-wrap
msgid ""
" Don't forget to add the dot in front of /usr/share/....  "
"./usr/share/....!\n"
"You can then run the sed commands in the same manner; from inside the "
"./debian\n"
"dir and place a dot in front of all those path names (./etc/....).  The "
"\"dot\"\n"
"refers to the current directory instead of the top level / .  So the "
"./debian\n"
"dir acts as a faked root dir.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:293
#, no-wrap
msgid ""
" Finally create your control file in ./debian/DEBIAN/control (control is a "
"file\n"
"not a dir).  Then make your .deb the same way as with dhcpcd.  The chmod\n"
"command changes the permissions to the proper settings.  Take note that\n"
"whatever user you compile with will have ownership of the resulting "
"program\n"
"files.  You may want to run (from inside ./debian dir) something like:\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:296
#, no-wrap
msgid ""
"  chown -R root:root *\n"
"          as root, of course right before you make your .deb\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:298
msgid "That's it."
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:300
msgid "FINAL NOTES:"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:303
#, no-wrap
msgid ""
" * Aptitude, Synaptic, and Kpackage are all great interfaces for\n"
"adding/removing .deb's on your system.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:307
#, no-wrap
msgid ""
" * If you install apt and plan to use packages from a public repository, "
"you\n"
"may want to place all the packages that represent your base LFS system on\n"
"\"hold\".\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:310
#, no-wrap
msgid ""
" * If you use Aptitude, I recommend unchecking the first three options "
"under\n"
"Options -> Dependency handling.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:319
#, no-wrap
msgid ""
" * The debian style for rc startup scripts is a little different than "
"LFS. \n"
"This can be a good thing since debian likes to bog down the start-up.  If "
"you\n"
"install official debian packages you will need to mkdir rcS.d , rc0.d "
"... rc6.d\n"
"and init.d under /etc and \"touch /etc/default/rcS\".  Or create symlinks to "
"the\n"
"proper /etc/rc.d/... dirs and init.d (recommended).  Install the official\n"
"\"adduser-ng\" package. The \"apt-utils\" and \"libdb4.4\" will be necessary "
"as well\n"
"for an xorg install. The last big issue with official .deb packages is\n"
"\"debconf\"...  To install this package you first have to unpack it "
"manually:\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:323
#, no-wrap
msgid ""
"  ar xv debconf_1.5.11etch2_all.deb\n"
"  tar xvf data.tar.gz\n"
"  cp -r ./usr/share/perl5/Debconf /usr/share/perl5/.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:326
#, no-wrap
msgid ""
" Only then can you install \"debconf\" because of its circular dependency "
"on\n"
"itself.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:331
#, no-wrap
msgid ""
" That's all for now.  I wrote this based on memory (or lack of) and a "
"couple\n"
"pages of scribbled notes I used to document my progress.  So I could have\n"
"missed a step somewhere.  Comments, questions, and suggestions are more "
"than\n"
"welcome; send them to my email address at the top of this document.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:339
#, no-wrap
msgid ""
"ACKNOWLEDGEMENTS:\n"
"  * Ben Roberts <benr@wam.umd.edu> for previous attempt at this.\n"
"  * Chr. Clemens Lee for The Debian Binary Package HOWTO.\n"
"  * BLFS Development Team for dhcpcd and lynx walkthrough.\n"
"  * Gerard Beekmans for LFS.\n"
"  * Your personal Savior.\n"
msgstr ""

#. type: Plain text
#: origin/dpkg.txt:342
#, no-wrap
msgid ""
"CHANGELOG:\n"
"[2008-11-05]\n"
"  * Initial hint.\n"
msgstr ""
