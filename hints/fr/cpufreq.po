# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/cpufreq.txt:8
msgid ""
"AUTHOR: Ken Moffat <ken@kenmoffat.uklinux.net> DATE: 2005-06-15 LICENSE: MIT "
"License SYNOPSIS: cpu frequency scaling using the kernel or powernowd.  "
"DESCRIPTION: With processors that support it (e.g. recent athlon64, many "
"laptop processors), you can reduce the processor frequency, to reduce wasted "
"energy or conserve battery power."
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:10
msgid "PREREQUISITES: 2.6.9 or later kernel, the bootscripts target LFS-6.1"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:12
msgid "HINT:"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:15
#, no-wrap
msgid ""
"Overview\n"
"________\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:25
#, no-wrap
msgid ""
" Frequency scaling is an important part of increasing the battery life\n"
"of notebooks,  but it also has a place in reducing power consumption,\n"
"and thus waste heat, on desktops and servers.  Most CPUs that support\n"
"it will have at least two valid frequency/voltage settings, e.g. my\n"
"athlon64 Winchester 3200 (2.0 GHz) can run at approx 1.0 GHz, 1.8 GHz,\n"
"and 2.0 GHz.  Give the ondemand governor a heavy load and the speed\n"
"quickly ramps up.  After the load has fallen back, the speed will\n"
"first fall to 1.8 GHz and then some seconds later to 1.0 GHz.\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:31
#, no-wrap
msgid ""
" The kernel began by offering 'powersave' (slow) and 'performance' \n"
"(fast) drivers, with a 'userspace' alternative to allow a daemon to\n"
"dynamically change the frequency.  As of 2.6.9, an 'ondemand' driver\n"
"was made available.  Other demand-based governors, such as \n"
"'conservative', have been introduced in later kernels.\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:35
#, no-wrap
msgid ""
" Meanwhile, the powernowd daemon was developed, see \n"
"http://www.deater.net/john/powernowd.html - this will dynamically\n"
"change the frequency as the load goes up and down.\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:43
#, no-wrap
msgid ""
" It would seem that the 'ondemand' driver makes powernowd redundant,\n"
"but some CPUs (like the ppc 7447) apparently have a very high \n"
"transition latency which causes the ondemand governor to decline to\n"
"manage them - on my 7447A the powersave and performance drivers\n"
"('governors') work, but trying to install 'ondemand' fails.  Equally,\n"
"on a laptop powernowd will probably be a little quicker at dropping\n"
"the speed, and can therefore give a little more battery life.\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:48
#, no-wrap
msgid ""
" On x86 and x86_64 it appears that your bios has to support frequency\n"
"scaling (typically labelled Cool'n'Quiet on boards with AMD CPUs) -\n"
"after upgrading to a new mobo/cpu, I lost the ability to use both the\n"
"'ondemand' governor and powernowd until I configured the bios properly.\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:51
#, no-wrap
msgid ""
"Kernel Configuration\n"
"____________________\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:54
msgid "On the Processor menu, select CPU Frequency scaling"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:57
msgid ""
"Set the Default CPUFreq governor to userspace (the default is often "
"'performance')"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:62
msgid ""
"Select the governors you wish to use, typically 'performance', 'powersave', "
"and try 'ondemand'.  Feel free to select any other available governors.  I "
"assume most people will want to build these governors in, rather than "
"compiling them as modules."
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:66
msgid ""
"Select the correct cpu-freq hardware driver (on a mac there is nothing "
"further to select, on x86, choose from POWERNOW_K7, POWERNOW_K8, "
"SPEEDSTEP_CENTRINO, and similar options)."
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:69
#, no-wrap
msgid ""
"Testing\n"
"_______\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:78
msgid ""
"After you've booted the new kernel, you can test which of the kernel "
"governors work.  As root, echo the governor name to "
"/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor - presumably, people "
"with SMP boxes need to try this for each CPU.  Then test the status of the "
"command, e.g. with 'echo $?' - if the governor loaded, the status will be 0 "
"and you can use that governor, otherwise the status will be 1."
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:86
msgid ""
"You can view the current CPU frequency in /proc/cpuinfo.  To test the "
"ondemand or other variable-speed governors, run something \"expensive\" "
"(e.g. untar the gcc .bz2, or do a big compile) and repeatedly check the "
"spead in the cpuinfo file.  You should find that it ramps up shortly after "
"the load starts, and falls back a few seconds after the load drops. [ BUT, "
"if you are in an xterm on a kernel > 2.6.12-rc5, see the ignore_nice line in "
"my bootscript below. ]"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:89
#, no-wrap
msgid ""
"Bootscript for kernel cpufreq\n"
"_____________________________\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:95
msgid ""
"If one or more of the demand-based governors works for you, you're almost "
"done, you just need to ensure the appropriate governor is loaded after you "
"boot.  For my desktop box (athlon64) I use the following :"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:98
msgid "cat >>/etc/rc.d/init.d/cpufreq << EOF #!/bin/sh"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:101 origin/cpufreq.txt:166
msgid ". /etc/sysconfig/rc . ${rc_functions}"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:127
#, no-wrap
msgid ""
"case \"${1}\" in\n"
"\tstart|demand)\n"
"\t\tboot_mesg \"Enabling ondemand cpu frequency\"\n"
"\t\techo ondemand \\\n"
"\t\t>/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n"
"\t\tboot_mesg \"ignoring niceness for ondemand\"\n"
"\t\techo 1 \\\n"
"\t\t>/sys/boot/devices/system/cpu0/cpufreq/ondemand/ignore_nice\n"
" \t\t;;\n"
"\tpowersave)\n"
"\t\tboot_mesg \"Enabling powersave cpu frequency\"\n"
"    \t\techo powersave \\\n"
"\t\t>/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n"
"\t\t;;\n"
"\tperformance)\n"
"\t\tboot_mesg \"Enabling performance cpu frequency\"\n"
"\t\techo performance \\\n"
"\t\t>/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n"
"\t\t;;\n"
"\t*)\n"
"\t\techo \"Usage: ${0} {start|demand|powersave|performance}\"\n"
"\t\texit 1\n"
"\t\t;;\n"
"esac\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:129
msgid "chmod 754 /etc/rc.d/init.d/cpufreq"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:131
msgid "ln -s ../init.d/cpufreq /etc/rc.d/rcsysinit.d/S45cpufreq"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:135
#, no-wrap
msgid ""
" Note that this allows me to set powersave or performance if I ever wish\n"
"to, and that I just install this in rcsysinit.d so there is no 'stop'\n"
"option.\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:140
#, no-wrap
msgid ""
" The 'ignore_nice' ensures the old behaviour of ondemand for kernels\n"
"newer than 2.6.12-rc5 : without this, anything I start in an xterm has a\n"
"niceness of 10 and the kernel doesn't allow it to influence the cpu\n"
"frequency.\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:143
#, no-wrap
msgid ""
"Powernowd\n"
"_________\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:150
#, no-wrap
msgid ""
" This is based on 0.96.  Untar it, you'll notice the Makefile is\n"
"described as -very- simple.  Unfortunately, it installs into /usr/sbin\n"
"- on a laptop, you probably want to bring it up as part of the boot\n"
"process, so I think it belongs in /sbin.  The easy way to do that is\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:152
#, no-wrap
msgid " make && install -m 755 powernowd /sbin\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:157
#, no-wrap
msgid ""
" There is an example powernowd.init in the package, which could be\n"
"adapted for the bootscript, using variations of \"dyn\" (dynamic), "
"\"low\",\n"
"\"high\" - I go with something a little simple - dynamic frequency\n"
"control at all times:\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:159
#, no-wrap
msgid ""
"Bootscript for powernowd\n"
"________________________\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:163
msgid "cat >>/etc/rc.d/init.d/powernowd << EOF #!/bin/sh"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:186
#, no-wrap
msgid ""
"case \"${1}\" in\n"
"\tstart)\n"
"\t\tboot_mesg \"Starting powernowd\"\n"
"\t\tloadproc /sbin/powernowd\n"
"\t\t;;\n"
"\tstatus)\n"
"\t\tboot_mesg \"Starting powernowd\"\n"
"\t\tstatusproc /sbin/powernowd\n"
"\t\t;;\n"
"\tstop)\n"
"\t\tboot_mesg \"Starting powernowd\"\n"
"\t\tkillproc /sbin/powernowd\n"
"\t\t;;\n"
"\t*)\n"
"\t\techo \"Usage: ${0} {start|status|stop}\"\n"
"\t\texit 1\n"
"\t\t;;\n"
"esac\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:188
msgid "chmod 754 /etc/rc.d/init.d/powernowd"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:192
msgid ""
"ln -s ../init.d/powernowd /etc/rc.d/rcsysinit.d/S45powernowd ln -s "
"../init.d/powernowd /etc/rc.d/rc0.d/K45powernowd ln -s ../init.d/powernowd "
"/etc/rc.d/rc6.d/K45powernowd"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:194
#, no-wrap
msgid ""
"ACKNOWLEDGEMENTS:\n"
"_________________\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:198
msgid ""
"Barry Shilliday for bringing the scaling_governors to my attention in an "
"article in PC Plus magazine."
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:201
msgid ""
"Eric Piel for explaining how to restore the old behaviour for the ondemand "
"governor."
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:204
#, no-wrap
msgid ""
"CHANGELOG:\n"
"__________\n"
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:207
msgid "2005-07-12\tFirst version."
msgstr ""

#. type: Plain text
#: origin/cpufreq.txt:211
msgid ""
"Updated versions of this hint may be found at "
"http://www.kenmoffat.uklinux.net/hints/"
msgstr ""
