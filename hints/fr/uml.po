# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/uml.txt:4
msgid ""
"TITLE:\t\tUser Mode Linux LFS VERSION:\tAny AUTHOR:\t\tRandy Hron <rwhron "
"(at) earthlink.net>"
msgstr ""

#. type: Plain text
#: origin/uml.txt:7
#, no-wrap
msgid ""
"SYNOPSIS:\n"
"\tHow to configure a basic user-mode-linux on lfs.\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:17
#, no-wrap
msgid ""
"HINT:\n"
"This hint is for user-mode-linux (UML) for linux-2.4.x.  It helps you \n"
"build a UML kernel and create a small root filesystem for UML.  The\n"
"kernel and root_fs build are done with two scripts.  build_uml\n"
"builds the UML kernel and build_rootfs creates a root filesystem.  \n"
"The root filesystem we build can be configured to automatically mount \n"
"the host / and /usr/src filesystems.  For this reason, and many others\n"
"it's best to only run UML as a non-root user.   You will have to be\n"
"root to create the root_fs though.\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:19
#, no-wrap
msgid ""
"Contents:\n"
"=========\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:56
#, no-wrap
msgid ""
"Warning\n"
"Why user-mode-linux?\n"
"Where can I find out more?\n"
"UML Patch for 2.4.x kernel\n"
"Glossary\n"
"What do I need?\n"
"Assumptions for this hint\n"
"Installing uml_utilities\n"
"\tuml_mconsole\n"
"\tuml_moo\n"
"\tuml_mconsole\n"
"\tuml_switch\n"
"Building the user-mode-linux kernel\n"
"build_uml - Build UML kernel script from source\n"
"Comments on UML kernel build commands\n"
"Cleaning up UML processes\n"
"Creating a root filesystem for user-mode-linux\n"
"build_rootfs - Root filesystem build script\n"
"Comments on commands to build root_fs\n"
"Logging in\n"
"Using mconsole\n"
"Taking down UML\n"
"Taking down loopback filesystem if something went wrong\n"
"Troubleshooting\n"
"\tUML didn't compile.\n"
"\tUML hangs with \"Initializing stdio console driver\"\n"
"\tXterm insane after shutdown\n"
"\tPanic when you have root_fs\n"
"\tError building kernel\n"
"\tkernel BUG at page_alloc.c:112!\n"
"\tifconfig error\n"
"\tioctl: LOOP_SET_FD: Device or resource busy\n"
"\tmake does not return when compiling with UML\n"
"Other helpful docs\n"
"IRC Resources\n"
"Mailing lists\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:58
#, no-wrap
msgid ""
"Warning\n"
"=======\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:62
msgid ""
"This information is meant to be helpful only.  It contains the scripts I "
"use.  There is no warranty of any kind.  If you use this information, you "
"take full liability for anything that goes wrong."
msgstr ""

#. type: Plain text
#: origin/uml.txt:64
#, no-wrap
msgid ""
"Why user-mode-linux?\n"
"====================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:68
msgid ""
"Experimentation.  It's fun.  You could try a new glibc without fear of "
"changing your LFS by running it in user-mode-linux first.  Setup a virtual "
"network with only one box.  Answer questions like, \"what happens if I...\"."
msgstr ""

#. type: Plain text
#: origin/uml.txt:70
#, no-wrap
msgid ""
"Where can I find out more?\n"
"==========================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:74
#, no-wrap
msgid ""
"Project:  http://user-mode-linux.sourceforge.net/\n"
"HOWTO:    http://user-mode-linux.sourceforge.net/UserModeLinux-HOWTO.html\n"
"Download: http://user-mode-linux.sourceforge.net/dl-sf.html\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:76
#, no-wrap
msgid ""
"UML Patch for 2.4.x kernel\n"
"==========================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:83
#, no-wrap
msgid ""
"The patch for user-mode-linux is available through the Download link.  You "
"need \n"
"the UML patch for the kernel you want to build.   The UML kernel version "
"can\n"
"be different from your host system.  I.E. you can run 2.4.14 on LFS and "
"boot\n"
"a 2.4.18 UML kernel.  The UML patches come out quite regularly, so check "
"the\n"
"UML webite for patches for newer kernels.  The latest uml-patch should be "
"the\n"
"best.  \n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:86
msgid ""
"uml-patch-2.4.18-18.bz2 goes with kernel linux-2.4.18.  This example happens "
"to be the 18th UML release for 2.4.18."
msgstr ""

#. type: Plain text
#: origin/uml.txt:88
#, no-wrap
msgid ""
"Glossary\n"
"========\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:101
#, no-wrap
msgid ""
"host:\t\t\tYour linux box.  It is \"hosting\" the virtual\n"
"\t\t\tUML machine(s).\n"
"host kernel:\t\tThe kernel for your LFS system.  It \"hosts\" the\n"
"\t\t\tUML kernel.\n"
"kernel pool:\t\tSource code tree of stable kernel.  (extracted\n"
"\t\t\t2.4.x kernel tarball).\n"
"pool:\t\t\tThe HOWTO uses pool to refer to a directory tree,\n"
"\t\t\tlike cvs, linux source, or the UML source tree.\n"
"UML:\t\t\tUser Mode Linux\n"
"vanilla kernel:\t\tTerm some people call the official Linus (or Marcelo) \n"
"\t\t\tstable release.\n"
"virtual machine: \tAnother name for a UML instance.\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:103
#, no-wrap
msgid ""
"What do I need?\n"
"===============\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:110
msgid ""
"linux-2.4.18.tar.bz2 kernel source uml-patch-2.4.18-18.bz2 "
"uml_utilities_20020415.tar.bz2 readline-4.2 or greater.\t\t# for "
"uml_utilities.  reiserfsprogs-3.x.1b.tar.gz or greater\t# 3.x.1a may work.  "
"cpio-2.4.2"
msgstr ""

#. type: Plain text
#: origin/uml.txt:114
msgid ""
"The versions above were current when this hint was written.  Newer versions "
"will work similarly, but you will have to edit the build_uml script or pass "
"it a command line argument."
msgstr ""

#. type: Plain text
#: origin/uml.txt:116
#, no-wrap
msgid ""
"Assumptions for this hint\n"
"=========================\n"
msgstr ""

#. type: Bullet: 'o  '
#: origin/uml.txt:132
msgid "You have the files in the \"What do I need\" section above."
msgstr ""

#. type: Bullet: 'o  '
#: origin/uml.txt:132
msgid ""
"You have Loopback Device (CONFIG_BLK_DEV_LOOP) support configured in your "
"host kernel (this doesn't mean lo0 = 127.0.0.1.  Loopback block device "
"allows a regular file to be used as a block device.  We use this feature to "
"create the UML filesystem."
msgstr ""

#. type: Bullet: 'o  '
#: origin/uml.txt:132
msgid "You have TUN/TAP (CONFIG_TUN) configured in your kernel."
msgstr ""

#. type: Bullet: 'o  '
#: origin/uml.txt:132
msgid ""
"You don't have anything in /mnt/uml or /usr/src/uml, as the build scripts "
"included here will unquestionably stomp these directories, (unless you pass "
"appropriate arguments to the scripts)."
msgstr ""

#. type: Bullet: 'o  '
#: origin/uml.txt:132
msgid ""
"You have reiserfsprogs installed, and CONFIG_REISERFS_FS=y set in your host "
"linux .config.  ext[23] will work also; you'll have to change the "
"build_rootfs for ext[23] though."
msgstr ""

#. type: Bullet: 'o  '
#: origin/uml.txt:132
msgid ""
"You have at least 32 megs of free ram.  You can boot UML with less, by "
"passing mem=#m on the command line.  I.E. ./linux init=/bin/bash mem=16m "
"will boot a virtual machine with 16 megs of ram.  8 megs is about as small "
"as you can go."
msgstr ""

#. type: Plain text
#: origin/uml.txt:135
#, no-wrap
msgid ""
"Installing uml_utilities\n"
"========================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:137
msgid "We start by installing the uml_utilities."
msgstr ""

#. type: Plain text
#: origin/uml.txt:140
msgid "tar xjf uml_utilities_20020415.tar.bz2 && cd tools && make && make install"
msgstr ""

#. type: Plain text
#: origin/uml.txt:143
msgid ""
"The commands above install five UML utilities in /usr/bin on the \"host\" "
"system (your LFS box)."
msgstr ""

#. type: Plain text
#: origin/uml.txt:145
#, no-wrap
msgid ""
"uml_mconsole\n"
"------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:147
msgid "uml_mconsole is the management console for a UML."
msgstr ""

#. type: Plain text
#: origin/uml.txt:149
#, no-wrap
msgid ""
"uml_moo\n"
"-------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:155
#, no-wrap
msgid ""
"uml_moo is a clever name for copy on write (COW) merge utility.   The idea\n"
"of COW is that you can share a root_fs (backing store, actually) between \n"
"multiple UML's, and changes are written to a COW file.  This utility lets \n"
"you merge the COW file with the backing store.  Check out the UML website\n"
"for details.  This hint won't use uml_moo.\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:157
#, no-wrap
msgid ""
"uml_net\n"
"-------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:161
msgid ""
"uml_net is for setting up a network between the host system and UML.  "
"uml_net must be installed setuid root so you can setup networking when you "
"run UML as a non-root user."
msgstr ""

#. type: Plain text
#: origin/uml.txt:163
#, no-wrap
msgid ""
"uml_switch\n"
"----------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:167
msgid ""
"uml_switch lets you setup a router network between UML's and the host "
"system.  uml_switch is also installed in /usr/bin on the host system.  This "
"hint doesn't use uml_switch."
msgstr ""

#. type: Plain text
#: origin/uml.txt:169
#, no-wrap
msgid ""
"port_helper\n"
"-----------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:171
msgid "Helper for the port channel.  This hint doesn't use port_helper either."
msgstr ""

#. type: Plain text
#: origin/uml.txt:174
#, no-wrap
msgid ""
"Building the user-mode-linux kernel\n"
"===================================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:178
msgid ""
"IMPORTANT NOTE: Don't build user-mode-linux in /usr/src/linux because UML "
"replaces some headers that other linux programs could use.  Also, you don't "
"want to stomp your \"host\" kernel source."
msgstr ""

#. type: Plain text
#: origin/uml.txt:183
msgid ""
"Note: the scripts below assume your linux kernel source is in "
"/usr/src/sources/l and the user-mode-linux patch in /usr/src/sources/u.  "
"Change these paths to match where you have the kernel and uml-patch "
"tarballs."
msgstr ""

#. type: Plain text
#: origin/uml.txt:185
msgid "There is some explanation of the scripts below each one."
msgstr ""

#. type: Plain text
#: origin/uml.txt:187
#, no-wrap
msgid ""
"build_uml - Build UML kernel script from source\n"
"===============================================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:193
msgid ""
"#!/bin/bash # build_uml - create user mode linux kernel from source # the "
"defaults are good for me, they probably aren't good for you.  # @(#) $Id: "
"uml.txt,v 1.1 2003/09/13 16:18:16 tushar Exp $"
msgstr ""

#. type: Plain text
#: origin/uml.txt:195 origin/uml.txt:446
msgid "command=${0##.*/}"
msgstr ""

#. type: Plain text
#: origin/uml.txt:200
msgid ""
"echo \"$command is meant to abort if it encounters a problem.\" echo \"The "
"idea is that you can address that problem,\" echo \"then re-run $command "
"from the begining.\" echo"
msgstr ""

#. type: Plain text
#: origin/uml.txt:209
msgid ""
"# defaults uml_dest=\"/usr/src/uml\" "
"kernel_tarball=\"/usr/src/sources/l/linux-2.4.18.tar.bz2\" make_opt=\"\" "
"tar_z_opt=\"j\" uml_patch=\"/usr/src/sources/u/uml-patch-2.4.18-18.bz2\" "
"verbose=\"\" config=$PWD/.config"
msgstr ""

#. type: Plain text
#: origin/uml.txt:229
#, no-wrap
msgid ""
"function usage {\n"
"\techo \"usage: $command [ -c dot_config_file ] [ -d /path/to/uml/target ] "
"\"\n"
"\techo \"\t[ -k /path/to/kernel/tarball.tar.bz2 ] [ -s ] [ -t tar_unZ_opt "
"]\"\n"
"\techo \"\t[ -u /path/to/uml/patch.bz2 ] [ -v ]\" >&2\n"
"\techo \n"
"\techo \"example: $command -d${uml_dest} -k${kernel_tarball} \\\\\"\n"
"\techo \"\t\t-u${uml_patch}\" >&2\n"
"\techo \n"
"\techo \"options\t\t\t\t\tdefaults\" >&2\n"
"\techo \" c\t.config file to use\t\t$config\" >&2\n"
"\techo \" d\tdestination for uml tree\t$uml_dest\" >&2\n"
"\techo \" k\tlinux tarball\t\t\t$kernel_tarball\" >&2\n"
"\techo \" s\tsilent make\t\t\t$make_opt\" >&2\n"
"\techo \" t\ttar uncompress option\t\t$tar_z_opt\" >&2\n"
"\techo \" u\tuser-mode-linux patch\t\t$uml_patch\" >&2\n"
"\techo \" v\tverbose\" >&2\n"
"\techo \"\" >&2\n"
"\texit 1\n"
"}\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:256
#, no-wrap
msgid ""
"#\n"
"# options\n"
"# c\tconfig file to use\n"
"# d\tdestination for uml tree\n"
"# k\tlinux tarball\n"
"# s\tsilent make\n"
"# t\ttar uncompress option\n"
"# u\tuser-mode-linux patch\n"
"# v\tverbose\n"
"while getopts :c:d:k:st:u:v arg\n"
"do\n"
"\tcase $arg in\n"
"\t\tc)\tconfig=$OPTARG;;\n"
"\t\td)\tuml_dest=$OPTARG;;\n"
"\t\tk)\tkernel_tarball=$OPTARG;;\n"
"\t\ts)\tmake_opt=-s;;\n"
"\t\tt)\ttar_z_opt=$OPTARG;;\n"
"\t\tu)\tuml_patch=$OPTARG;;\n"
"\t\t# \tv doubles as an option for tar\n"
"\t\tv)\tverbose=v;;\n"
"\t\t\\?)\techo \"$command: Invalid switch $OPTARG\" >&2\n"
"\t\t\tusage;;\n"
"\t\t*)\tusage;;\n"
"\tesac\n"
"done\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:278
#, no-wrap
msgid ""
"# sanity checks\n"
"error=no\n"
"if\t[[ ! -f $kernel_tarball ]]\n"
"then\techo -e \"\\nThere is not kernel tarball in $kernel_tarball\" >&2\n"
"\terror=yes\n"
"\tverbose=yes\n"
"fi\n"
"if\t[[ ! -f $uml_patch ]]\n"
"then\techo -e \"\\nThere is no uml patch in $uml_patch\" >&2\n"
"\terror=yes\n"
"\tverbose=yes\n"
"fi\n"
"if\t[[ ! -f $config ]]\n"
"then\tif\t[[ ! -f /usr/src/linux/.config ]]\n"
"\tthen\techo -e \"\\nThere is no $config or /usr/src/linux/.config file,\" "
">&2\n"
"\t\techo -e \"which is where $command wanted to get your host config.\" "
">&2\n"
"\t\tconfig=\"\"\n"
"\t\terror=yes\n"
"\t\tverbose=yes\n"
"\tfi\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:290
#, no-wrap
msgid ""
"if\t[[ $verbose ]]\n"
"then\techo\n"
"\techo \"Current options:\" >&2\n"
"\techo \"config=$config\" >&2\n"
"\techo \"uml_dest=$uml_dest\" >&2\n"
"\techo \"kernel_tarball=$kernel_tarball\" >&2\n"
"\techo \"make_opt=$make_opt\" >&2\n"
"\techo \"tar_z_opt=$tar_z_opt\" >&2\n"
"\techo \"uml_patch=$uml_patch\" >&2\n"
"\techo \"verbose=$verbose\" >&2\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:296
#, no-wrap
msgid ""
"if\t[[ $error = yes ]]\n"
"then\techo -e \"\\nErrors detected ... $command will exit.\\n\" >&2\n"
"\techo -e \"The current options are listed above.\\n\" >&2\n"
"\tusage\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:345
#, no-wrap
msgid ""
"[ -c /dev/tap0 ] || mknod /dev/tap0 c 36 16 &&\n"
"echo -n \"ok to remove $uml_dest (y/N)? \"\n"
"read answer\n"
"case $answer in\n"
"y*|Y*)\techo \"removing $uml_dest\"\n"
"\trm -rf $uml_dest\n"
"\t;;\n"
"*)\techo\n"
"\techo \"$command rebuilds the entire uml kernel tree from scratch.\"\n"
"\techo \"If $uml_dest isn't where you want the uml kernel built,\"\n"
"\techo \"try passing -u /where/i/want/uml/kernel/built to ${command}.\"\n"
"\techo \"exiting.\"\n"
"\texit\n"
"\t;;\n"
"esac\n"
"mkdir $uml_dest &&\n"
"cd $uml_dest &&\n"
"echo \"extracting $kernel_tarball in $PWD\" &&\n"
"tar x${tar_z_opt}${verbose}f $kernel_tarball &&\n"
"cd linux &&\n"
"# perhaps we should allow other compression formats.\n"
"echo \"applying $uml_patch\"\n"
"bzcat $uml_patch|patch -p1 &&\n"
"make mrproper &&\n"
"make mrproper ARCH=um &&\n"
"# forgot why we do this\n"
"unset PAGER &&\n"
"if\t[[ -f $config ]]\n"
"then\tcp $config ${uml_dest}/linux/.config &&\n"
"\tyes \"y\" | make oldconfig ARCH=um\n"
"else\techo \"no $config file\"\n"
"\techo \"using default configuration, which may (not) work\"\n"
"fi &&\n"
"# there was a bug around 2.4.9 that required these sed statements.\n"
"sed 's:^CONFIG_GPROF.*:# CONFIG_GPROF is not set:' .config>.config~ &&\n"
"mv .config~ .config &&\n"
"sed 's:^CONFIG_GCOV.*:# CONFIG_GCOV is not set:' .config>.config~ &&\n"
"mv .config~ .config &&\n"
"yes \"\" | make config ARCH=um &&\n"
"# UML SMP wasn't working on my box.\n"
"sed 's:\\(^CONFIG_.*SMP\\)=.:# \\1 is not set:' .config>.config~ &&\n"
"mv .config~ .config &&\n"
"# Since I'm not using X, don't default to console on xterm.\n"
"sed 's:^CONFIG_CON_CHAN=xterm:CONFIG_CON_CHAN=pty:' .config>.config~ &&\n"
"mv .config~ .config &&\n"
"make dep ARCH=um &&\n"
"make linux ARCH=um &&\n"
"make modules ARCH=um &&\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:351
msgid ""
"echo \"\" && echo \"The UML kernel is in $uml_dest/linux\" && echo \"You'll "
"need a root filesystem.\" && echo \"Run 'build_rootfs' to create a root "
"filesystem in $uml_dest/linux\" # end of build_uml"
msgstr ""

#. type: Plain text
#: origin/uml.txt:353
#, no-wrap
msgid ""
"Comments on UML kernel build commands\n"
"=====================================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:362
msgid ""
"Extract the pristine linux source for your UML tree.  Install the UML "
"patch.  Keep most of your current configuration (if possible) by copying "
".config from /usr/src/linux (not really necessary, just convenient).  Say "
"\"y\" to the new config options from the UML patch.  We run 'sed' against "
"the config file as CONFIG_GPROF and CONFIG_GCOV were not be working "
"perfectly when this was written.  Unset PAGER because I saw \"make "
"oldconfig\" using $PAGER once and didn't like it.  Creates /dev/tap0 if it "
"doesn't exist.  (you set CONFIG_TUN in your host kernel, right?)"
msgstr ""

#. type: Plain text
#: origin/uml.txt:364
#, no-wrap
msgid ""
"Changing UML kernel configuration\n"
"---------------------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:367
msgid ""
"If you want to change the configuration for UML from what the host system "
"has, you can:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:373
msgid ""
"cd /usr/src/uml/linux make menuconfig ARCH=um make dep ARCH=um make linux "
"ARCH=um make modules ARCH=um"
msgstr ""

#. type: Plain text
#: origin/uml.txt:375
#, no-wrap
msgid ""
"First boot (maybe)\n"
"==================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:381
msgid ""
"After running the commands above you will have a file called "
"/usr/src/uml/linux/linux.  This is the UML kernel.  You can run it now as "
"any user (preferably not root, just to be safe).  It will panic because "
"there is no root filesystem for UML yet.  Here is then end of the boot when "
"there is no rootfs:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:386
msgid ""
"ubd0: Can't open \"root_fs\": errno = 2 VFS: Cannot open root device "
"\"ubd0\" or 62:00 Please append a correct \"root=\" boot option Kernel "
"panic: VFS: Unable to mount root fs on 62:00"
msgstr ""

#. type: Plain text
#: origin/uml.txt:389
msgid ""
"No problem, we'll create a root filesystem in a little bit.  Just hit <ctrl "
"c> to kill the UML process."
msgstr ""

#. type: Plain text
#: origin/uml.txt:391
#, no-wrap
msgid ""
"Cleaning up UML processes\n"
"=========================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:395
msgid ""
"If you were couragous and booted the kernel without root_fs to see the "
"panic, you'll have some UML processes hanging around.  You can kill them "
"with a command like:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:397
msgid "kill -9 $(ps -fu $LOGNAME|awk '/linux/ {print $2}')"
msgstr ""

#. type: Plain text
#: origin/uml.txt:399
msgid "or an alias like:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:401
msgid ""
"alias kuml=\"kill -9 \\$(ps -fu\\$LOGNAME|awk '/\\.\\/[l]inux/ {print "
"\\$2}')\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:403
#, no-wrap
msgid ""
"Creating a root filesystem for user-mode-linux\n"
"==============================================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:409
msgid ""
"User mode linux will have it's own filesystem.  You have to have "
"CONFIG_BLK_DEV_LOOP defined in your kernel to create a root filesystem for "
"user-mode-linux.  Look at your /usr/src/linux/.config file to see if you "
"already have the block loopback device.  If you don't, configure and compile "
"your normal (host) boot kernel before continuing."
msgstr ""

#. type: Plain text
#: origin/uml.txt:413
msgid ""
"We'll create a 200 megabyte root filesystem using reiserfs.  This filesystem "
"will not contain everything that a basic LFS system has, but it could.  For "
"now, just /bin /sbin /lib, and a few bits of /usr/bin and /etc."
msgstr ""

#. type: Plain text
#: origin/uml.txt:419
msgid ""
"Note: The script below uses \"here documents\" and is very sensitive to "
"extraneous spaces.  I.E. a space after a '!' character can cause the script "
"to not complete.  The safe way to execute this is to pop this file into vim "
"and grab the script verbatum.  Then read it and change what you want."
msgstr ""

#. type: Plain text
#: origin/uml.txt:421
msgid "There are some variables you may want to change in the script:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:426
msgid ""
"About 37 lines into the script there is an \"export user=rwhron\" line.  You "
"want to change that to whatever user you normally login as.  We will grab "
"/etc/passwd from the host system, so root for UML will be your normal root "
"password."
msgstr ""

#. type: Plain text
#: origin/uml.txt:429
msgid ""
"55 lines into the script you can set \"hostfs=true\" if you want UML to "
"access the the host root and /usr/src filesystems."
msgstr ""

#. type: Plain text
#: origin/uml.txt:433
msgid ""
"Look at the script closely.  There may be some other things you want to "
"change too.  Most of the things you may want to modify are in the first 69 "
"lines or so."
msgstr ""

#. type: Plain text
#: origin/uml.txt:435
#, no-wrap
msgid ""
"build_rootfs - root filesystem build script\n"
"===========================================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:440
msgid ""
"#!/bin/bash -e # note the \"-e\" above - it means exit script on any error.  "
"# @(#) $Id: uml.txt,v 1.1 2003/09/13 16:18:16 tushar Exp $"
msgstr ""

#. type: Plain text
#: origin/uml.txt:444
msgid ""
"PATH=/sbin:/bin:/usr/sbin:/usr/bin # build_rootfs - create a basic root "
"filesystem for user mode linux # uses BSD style init scripts.  (nice and "
"simple)."
msgstr ""

#. type: Plain text
#: origin/uml.txt:452
#, no-wrap
msgid ""
"# root has to run build_rootfs to execute losetup environment.\n"
"if\t[[ $UID != 0 ]]\n"
"then\techo \"root has to run $command for losetup\" >&2\n"
"\texit 1\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:456
msgid ""
"# $uml is where root_fs will be temporarily mounted while # it is built.  "
"$uml_root will get blown away by this script.  uml_root=/mnt/uml"
msgstr ""

#. type: Plain text
#: origin/uml.txt:459
msgid "# loopback block device - $loop will be mounted on $uml_root loop=/dev/loop0"
msgstr ""

#. type: Plain text
#: origin/uml.txt:465
#, no-wrap
msgid ""
"# cleanup if build_rootfs bombed in a previous run.\n"
"if\tmount|grep $uml_root >/dev/null\n"
"then\tumount $uml_root\n"
"\tlosetup -d $loop\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:468
msgid ""
"# uml_dest is the directory the uml root filesystem will be built in.  "
"uml_dest=/usr/src/uml"
msgstr ""

#. type: Plain text
#: origin/uml.txt:475
msgid ""
"# root_fs is the default name, if you change it, you'll have to # pass an "
"option to uml with the rootfs name.  root_fs=root_fs # if user is set, the "
"script will su to $user and boot uml at the end # of build_rootfs export "
"user=rwhron"
msgstr ""

#. type: Plain text
#: origin/uml.txt:478
msgid "# size of filesystem in megs megs=200"
msgstr ""

#. type: Plain text
#: origin/uml.txt:486
msgid ""
"# hostname for uml uml_hostname=uml # uml_tun_ip is the address you want the "
"uml machine to have.  uml_tun_ip=\"192.168.0.250\" # interface address of "
"tap0 (interface to uml) - becomes uml defaultroute.  # this should not be "
"the same as eth0 or ppp0.  host_tun_ip=\"192.168.0.230\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:489
msgid "# hostfs lets you mount host filesystem under uml host=$(hostname)"
msgstr ""

#. type: Plain text
#: origin/uml.txt:493
msgid ""
"# set hostfs to true to mount host / on /mnt/$host and # host /usr/src under "
"/mnt/$host/usr/src hostfs=true"
msgstr ""

#. type: Plain text
#: origin/uml.txt:496
msgid "# set devel=true if you want compilers and header files.  devel=true"
msgstr ""

#. type: Plain text
#: origin/uml.txt:502
msgid ""
"# command to create filesystem --format 3.6 needed for # reiserfsprogs "
"3.x.0k-pre14 on linux-2.5.x host, to get # the --format option for "
"mkreiserfs.  #mkfs=\"mkreiserfs --format 3.6\" mkfs=\"mkreiserfs\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:505
msgid ""
"# set network_server=true if you want uml network server commands "
"network_server=true"
msgstr ""

#. type: Plain text
#: origin/uml.txt:527
#, no-wrap
msgid ""
"function usage {\n"
"\techo \"usage: $command [ -d /path/to/uml/dest ] [ -f ] [ -g ] [ -h "
"uml_hostname ]\"\n"
"\techo \"\t[ -i uml_ipaddress ] [ -m megs ] [ -n ] [ -s ] [ -r "
"/path/to/uml_root ]\"\n"
"\techo \"\t[ -u /path/to/uml/patch.bz2 ] [ -v ]\" >&2\n"
"\techo\n"
"\techo \"example: $command -d/usr/src/uml -f -h myuml -i 192.168.0.222 "
"\\\\\"\n"
"\techo \"\t-m 500 -r/mnt/uml2 >&2\"\n"
"\techo\n"
"\techo \"options\t\t\t\t\tdefaults\" >&2\n"
"\techo \" d\tdestination for uml tree\t$uml_dest\" >&2\n"
"\techo \" f\tuse hostfs\t\t\t$hostfs\" >&2\n"
"\techo \" g\tadd development files\t\t$devel\" >&2\n"
"\techo \" h\tuml hostname\t\t\t$uml_hostname\" >&2\n"
"\techo \" i\tuml ip address\t\t\t$uml_tun_ip\" >&2\n"
"\techo \" m\trootfs size in MB\t\t$megs\" >&2\n"
"\techo \" n\tnetwork server\t\t\t$network_server\" >&2\n"
"\techo \" r\tuml root for build\t\t$uml_root\" >&2\n"
"\techo \" s\tsilent make\t\t\ttrue\" >&2\n"
"\techo \"\" >&2\n"
"\texit 1\n"
"}\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:552
#, no-wrap
msgid ""
"# options\n"
"# d     destination for uml tree\n"
"# s     silent make\n"
"# t     tar uncompress option\n"
"# u     user-mode-linux patch\n"
"# v     verbose\n"
"while getopts :d:fgh:i:m:ns arg\n"
"do\n"
"        case $arg in\n"
"                d)      uml_dest=$OPTARG;;\n"
"                f)      hostfs=true;;\n"
"\t\tg)\tdevel=false;;\t# guru\n"
"                h)      uml_hostname=$OPTARG;;\n"
"                i)      uml_tun_ip=$OPTARG;;\n"
"\t\tm)\tmegs=$OPTARG;;\t# number\n"
"\t\tn)\tnetwork_server=false;;\n"
"                r)      uml_root=$OPTARG;;\n"
"                s)      make_opt=-s;;\n"
"                \\?)     echo \"$command: Invalid switch $OPTARG\" >&2\n"
"                        usage;;\n"
"                *)      usage;;\n"
"        esac\n"
"done\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:555
msgid ""
"# list of daemons in /usr/sbin that you want if network_server=true "
"network_usr_sbin_daemons=\"inetd in.telnetd in.rlogind in.ftpd tcpd\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:562
msgid ""
"# commands to grab from /usr/bin on host machine usr_bin=\"awk basename bc "
"cal chroot cksum clear cmp col cut dc diff dirname ed egrep ex expr file "
"find fmt fold free ftp fuser gawk getconf grep head id join last ldd nohup "
"od passwd paste perl pkill procinfo reset setterm sleep sort split ssh "
"ssh-keygen strace strings tail tee test time top tput tr tset tty uptime vi "
"vim vmstat xargs w wc who\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:565
msgid ""
"# these might help figuring out <ctrl c \\> key_cmds=\"dumpkeys getkeycodes "
"setkeycodes showkey\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:567
msgid "usr_bin=\"$usr_bin $key_cmds\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:573
msgid ""
"# eliminate any files that haven't been installed for f in $usr_bin do\t[ -f "
"/usr/bin/$f ] && ub=\"$ub $f\" done usr_bin=\"$ub\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:581
msgid ""
"# readprofile requires System.map usr_sbin=\"klogd readprofile sshd syslogd "
"tcpdump xinetd\" # eliminate any files that haven't been installed for f in "
"$usr_sbin do\t[ -f /usr/sbin/$f ] && us=\"$us $f\" done usr_sbin=\"$us\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:592
msgid ""
"# /usr/bin commands included if $devel is true usr_bin_dev=\"ar as as86 "
"as86_encap autoconf autoexpect autoheader automake autoreconf autoscan "
"autoupdate bison c++ c++filt cc cpp flex flex++ g++ gasp gcc gdb ld ld86 m4 "
"make nm nm86 objcopy objdump objdump86 patch ranlib size size86 strip\" # "
"eliminate any files that haven't been installed for f in $usr_bin_dev do\t[ "
"-f /usr/bin/$f ] && ud=\"$ud $f\" done usr_bin_dev=\"$ud\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:595
msgid "# set v=v for verbose build v=\"\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:598
msgid "# argument to make ARCH=um install_modules quiet silent_make=\"-s\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:600
msgid "########### end of configuration setup ##############"
msgstr ""

#. type: Plain text
#: origin/uml.txt:605
msgid ""
"# host system will need a tap interface if\t[[ ! -c /dev/tap0 ]] then\tmknod "
"/dev/tap0 c 36 16 fi"
msgstr ""

#. type: Plain text
#: origin/uml.txt:607
msgid "cd $uml_dest/linux"
msgstr ""

#. type: Plain text
#: origin/uml.txt:612
msgid ""
"# use /dev/zero for building a file full of 00000000's if\t[[ ! -c /dev/zero "
"]] then\tmknod --mode 0644 /dev/zero c 1 5 fi"
msgstr ""

#. type: Plain text
#: origin/uml.txt:616
msgid ""
"# create root_fs rm -f $root_fs dd if=/dev/zero of=$root_fs seek=$megs "
"count=1 bs=1M"
msgstr ""

#. type: Plain text
#: origin/uml.txt:619
msgid "# loopback setup losetup $loop $uml_dest/linux/$root_fs"
msgstr ""

#. type: Plain text
#: origin/uml.txt:622
msgid "# take the defaults creating reiserfs yes | $mkfs $loop"
msgstr ""

#. type: Plain text
#: origin/uml.txt:624
msgid "mkdir -p $uml_root"
msgstr ""

#. type: Plain text
#: origin/uml.txt:627
msgid "# mount the loopback reiserfs file mount -t reiserfs $loop $uml_root"
msgstr ""

#. type: Plain text
#: origin/uml.txt:632
msgid ""
"cd $uml_root # create directory structure and copy /lib /sbin /dev into "
"rootfs mkdir -p bin dev etc lib mnt proc root sbin tmp usr/{bin,sbin,src} "
"var/{log,run,tmp} chmod 1777 tmp var/tmp"
msgstr ""

#. type: Plain text
#: origin/uml.txt:645
#, no-wrap
msgid ""
"# duplicate the dev directory of the host system \n"
"cd /dev\n"
"echo -en \"/dev\\t\\t\\t\\t\\t\"\n"
"find . -print|cpio -pdm $uml_root/dev\n"
"cd $uml_root/dev\n"
"# create ttyp (slave) and ptyp (master) for console if necessary.\n"
"i=0\n"
"while ((i <= 8))\n"
"do\t[[ ! -c ptyp$i ]] && mknod --mode=644 ptyp$i c 2 $i\n"
"\t[[ ! -c ttyp$i ]] && mknod --mode=644 ttyp$i c 3 $i\n"
"\t((i++))\n"
"done\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:655
msgid ""
"# # put everything in /sbin /bin and /lib on uml root_fs # copy everything "
"in /sbin and /bin on uml root_fs cd /sbin echo -en \"/sbin\\t\\t\\t\\t\\t\" "
"find . -print|cpio -pdm $uml_root/sbin sleep 1 cd /bin echo -en "
"\"/bin\\t\\t\\t\\t\\t\" find . -print|cpio -pdm $uml_root/bin"
msgstr ""

#. type: Plain text
#: origin/uml.txt:663
msgid ""
"# grab some goodies from /usr/bin and /usr/sbin cd /usr/bin echo -en "
"\"/usr/bin\\t\\t\\t\\t\" find $usr_bin|cpio -pdm $uml_root/usr/bin cd "
"/usr/sbin echo -en \"/usr/sbin\\t\\t\\t\\t\" find $usr_sbin|cpio -pdm "
"$uml_root/usr/sbin"
msgstr ""

#. type: Plain text
#: origin/uml.txt:670
msgid ""
"# maybe this will make <ctrl c> work for /dev/console (nope)  cd /usr echo "
"-en \"/usr/share/kbd\\t\\t\\t\\t\" find share/kbd|cpio -pdm $uml_root/usr "
"echo -en \"/usr/share/misc/magic\\t\\t\\t\" find share/misc/magic*|cpio -pdm "
"$uml_root/usr"
msgstr ""

#. type: Plain text
#: origin/uml.txt:674
msgid ""
"# grab linux terminfo and keyboard files mkdir -p "
"$uml_root/usr/share/terminfo/l [[ -f /usr/share/terminfo/l/linux ]] && cp -p "
"/usr/share/terminfo/l/linux $uml_root/usr/share/terminfo/l"
msgstr ""

#. type: Plain text
#: origin/uml.txt:691
#, no-wrap
msgid ""
"# development support files\n"
"if\t[[ $devel == true ]]\n"
"then\techo \"Including files for development\"\n"
"\tcd /usr/bin\n"
"\techo -en \"Development commands\\t\\t\\t\"\n"
"\tfind $usr_bin_dev|cpio -pdm $uml_root/usr/bin\n"
"\t# gcc libs\n"
"\tcd /usr/lib\n"
"\techo -en \"/usr/lib/gcc-lib\\t\\t\\t\"\n"
"\tfind gcc-lib *crt*.o|cpio -pdm $uml_root/usr/lib\n"
"\t# /usr/$MACHTYPE has some support files for binutils.\n"
"\t# get header files too\n"
"\tcd /usr\n"
"\techo -en \"/usr/include\\t\\t\\t\\t\"\n"
"\tfind include $MACHTYPE|cpio -pudm $uml_root/usr\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:703
#, no-wrap
msgid ""
"# networking\n"
"if\t[[ $network_server == true ]]\n"
"then\tcd /usr/sbin\n"
"\tfor f in $network_usr_sbin_daemons\n"
"\tdo\tif\t[[ -f $f ]]\n"
"\t\tthen\tcp -${v}p $f ${uml_root}/usr/sbin/${f}\n"
"\t\t\tchmod +x ${uml}${f}\n"
"\t\tfi\n"
"\tdone\n"
"\tcd -\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:722
#, no-wrap
msgid ""
"# Run ldd on everything to figure out what libs we need.\n"
"cd $uml_root\n"
"echo -en \"Libraries\\t\\t\\t\\t\"\n"
"libs=$(ldd sbin/* bin/* usr/sbin/* usr/bin/* 2>/dev/null|\n"
"awk '/=>/ {print $3}'|egrep -v '^/lib|perl5/'|sort -u|\n"
"sed -e 's:-.*:\\*.so\\*:' -e 's:\\.*so.*:\\*so\\*:')\n"
"cd /\n"
"# grab all of /lib, other libs needed by commands, and /usr/lib/libc*\n"
"find lib/*so* $libs usr/lib/libc*|sed 's:^/::'|cpio -pudm $uml_root\n"
"if\t[[ -f $uml_root/usr/bin/perl ]]\n"
"then\techo -en \"Perl libs\\t\\t\\t\\t\"\n"
"\tfind usr/lib/perl5|cpio -pdm $uml_root\n"
"fi\n"
"chmod +x $uml_root/*\n"
"# create an empty ld.so.conf for ldconfig\n"
"> $uml_root/etc/ld.so.conf\n"
"ldconfig -${v}r $uml_root\n"
"cd -\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:741
msgid ""
"echo -en \"/etc\\t\\t\\t\\t\\t\" # some important things in /etc [[ -f "
"/etc/bashrc ]]\t\t&& cp -p /etc/bashrc $uml_root/etc [[ -f /etc/hosts "
"]]\t\t&& cp -p /etc/hosts $uml_root/etc [[ -f /etc/inetd.conf ]]\t&& cp -p "
"/etc/inetd.conf $uml_root/etc [[ -f /etc/inputrc ]]\t\t&& cp -p /etc/inputrc "
"$uml_root/etc [[ -f /etc/limits ]]\t\t&& cp -p /etc/limits $uml_root/etc [[ "
"-e /etc/localtime ]]\t\t&& cp -d /etc/localtime $uml_root/etc [[ -f "
"/etc/login.defs ]]\t&& cp -p /etc/login.defs $uml_root/etc [[ -f "
"/etc/nsswitch.conf ]]\t&& cp -p /etc/nsswitch.conf $uml_root/etc [[ -f "
"/etc/profile ]]\t\t&& cp -p /etc/profile $uml_root/etc [[ -f /etc/protocols "
"]]\t\t&& cp -p /etc/protocols $uml_root/etc [[ -f /etc/resolv.conf ]]\t&& cp "
"-p /etc/resolv.conf $uml_root/etc [[ -f /etc/services ]]\t\t&& cp -p "
"/etc/services $uml_root/etc [[ -d /etc/ssh ]]\t\t&& cp -rp /etc/ssh "
"$uml_root/etc # UML host will need new host keys rm -f "
"$uml_root/etc/ssh/*key [[ -f /etc/syslog.conf ]]\t&& cp -p /etc/syslog.conf "
"$uml_root/etc"
msgstr ""

#. type: Plain text
#: origin/uml.txt:747
msgid ""
"# instruct about login echo \" You can log into $uml_hostname with one of "
"your normal accounts or root.  The passwords are the same as on "
"$(hostname).  \" > $uml_root/etc/issue"
msgstr ""

#. type: Plain text
#: origin/uml.txt:750
msgid ""
"# Get passwd and shadow so we can login with the same accounts as the host "
"cp -p /etc/passwd /etc/shadow /etc/group $uml_root/etc"
msgstr ""

#. type: Plain text
#: origin/uml.txt:758
msgid ""
"# basic fstab cat<<!>$uml_root/etc/fstab "
"/dev/bd0\t/\t\treiserfs\tdefaults\t0 0 proc\t\t/proc\t\tproc\t\tdefaults\t0 "
"0 none\t\t/dev/pts\tdevpts\t\tdefaults\t0 0 !"
msgstr ""

#. type: Plain text
#: origin/uml.txt:767
#, no-wrap
msgid ""
"# append hostfs to fstab if desired\n"
"if\t[[ $hostfs == true ]]\n"
"then\tcat<<-!>>$uml_root/etc/fstab\n"
"\tnone\t\t/mnt/$host\thostfs\t\tdefaults\t0 0\n"
"\tnone\t\t/mnt/$host/usr/src\thostfs\t\t/usr/src\t0 0\n"
"\t!\n"
"\tmkdir -p $uml_root/mnt/$host/usr/src\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:784
msgid ""
"# inittab for uml cat <<!>$uml_root/etc/inittab # user-mode-linux inittab "
"id:3:initdefault: si::sysinit:/etc/rc.d/rc.sysinit l0:0:wait:/etc/rc.d/rc.0 "
"l1:S1:wait:/etc/rc.d/rc.1 l2:2:wait:/etc/rc.d/rc.2 l3:3:wait:/etc/rc.d/rc.3 "
"l4:4:wait:/etc/rc.d/rc.4 l5:5:wait:/etc/rc.d/rc.5 l6:6:wait:/etc/rc.d/rc.6 "
"ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now su:S016:wait:/sbin/sulogin "
"c1:23:respawn:/sbin/agetty console 38400 linux !"
msgstr ""

#. type: Plain text
#: origin/uml.txt:787
msgid "# startup/rc scripts mkdir $uml_root/etc/rc.d"
msgstr ""

#. type: Plain text
#: origin/uml.txt:792
msgid ""
"# Create rc.sysinit for uml.  cat<<!>$uml_root/etc/rc.d/rc.sysinit #!/bin/sh "
"# begin of /etc/rc.d/rc.sysinit"
msgstr ""

#. type: Plain text
#: origin/uml.txt:795
msgid "# Mount root device ro.  /bin/mount -n -o remount,ro /"
msgstr ""

#. type: Plain text
#: origin/uml.txt:798
msgid "# Mount swap partitions.  /sbin/swapon -a"
msgstr ""

#. type: Plain text
#: origin/uml.txt:801
msgid "# Remount root device rw.  /bin/mount -n -v -o remount,rw /"
msgstr ""

#. type: Plain text
#: origin/uml.txt:804
msgid "echo \"\" > /etc/mtab /bin/mount -f -o remount,rw /"
msgstr ""

#. type: Plain text
#: origin/uml.txt:808
msgid "# Mount special filesystems /bin/mount /proc /bin/mount /dev/pts"
msgstr ""

#. type: Plain text
#: origin/uml.txt:811
msgid "# Initialize loopback network interface.  /sbin/ifconfig lo 127.0.0.1"
msgstr ""

#. type: Plain text
#: origin/uml.txt:814
msgid "# Set hostname.  /bin/hostname -v $uml_hostname"
msgstr ""

#. type: Plain text
#: origin/uml.txt:819
msgid ""
"# Recreate the utmp file so w/who are correct.  rm -f /var/run/utmp touch "
"/var/run/utmp chmod 0644 /var/run/utmp"
msgstr ""

#. type: Plain text
#: origin/uml.txt:822
msgid "# end of /etc/rc.d/rc.sysinit !"
msgstr ""

#. type: Plain text
#: origin/uml.txt:829
msgid ""
"# Create rc.0 for uml.  cat <<!>$uml_root/etc/rc.d/rc.0 #!/bin/sh # "
"/etc/rc.d/rc.0 # Sending TERM signal to all processes.  /sbin/killall5 -15"
msgstr ""

#. type: Plain text
#: origin/uml.txt:832
msgid "# Sending KILL signal to all processes.  /sbin/killall5 -9"
msgstr ""

#. type: Plain text
#: origin/uml.txt:835
msgid "# Unmounting swap partitions.  /sbin/swapoff -a"
msgstr ""

#. type: Plain text
#: origin/uml.txt:845
#, no-wrap
msgid ""
"# put marker in messages\n"
"case \"\\$0\" in\n"
"        *6)\n"
"          /sbin/reboot -w\n"
"          ;;\n"
"        *0)\n"
"          /sbin/halt -w\n"
"          ;;\n"
"esac\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:847
msgid "/bin/sync"
msgstr ""

#. type: Plain text
#: origin/uml.txt:850
msgid "# Remount root filesystem ro.  /bin/mount -n -o remount,ro /"
msgstr ""

#. type: Plain text
#: origin/uml.txt:853
msgid "# Unmount other filesystems /bin/umount -a"
msgstr ""

#. type: Plain text
#: origin/uml.txt:865
#, no-wrap
msgid ""
"case \"\\$0\" in\n"
"        *6)\n"
"          /sbin/reboot -d -f -i\n"
"          ;;\n"
"        *0)\n"
"          /sbin/halt -d -f -p\n"
"          ;;\n"
"esac\n"
"# end of /etc/rc.d/rc.0\n"
"!\n"
"# end of here doc for /etc/rc.d/rc.0\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:870
msgid ""
"# Create rc.1 for uml.  cat<<!>$uml_root/etc/rc.d/rc.1 #!/bin/sh # "
"/etc/rc.d/rc.1"
msgstr ""

#. type: Plain text
#: origin/uml.txt:873
msgid "# Send TERM signal to all processes.  /sbin/killall5 -15"
msgstr ""

#. type: Plain text
#: origin/uml.txt:876
msgid "# Send KILL signal to all processes.  /sbin/killall5 -9"
msgstr ""

#. type: Plain text
#: origin/uml.txt:879
msgid "# Disable eth0.  /sbin/ifconfig eth0 down"
msgstr ""

#. type: Plain text
#: origin/uml.txt:883
msgid "# end of /etc/rc.d/rc.1 ! # end of here document for /etc/rc.d/rc.1"
msgstr ""

#. type: Plain text
#: origin/uml.txt:888
msgid ""
"# Create rc.2 for uml cat<<!>$uml_root/etc/rc.d/rc.2 #!/bin/sh # "
"/etc/rc.d/rc.2"
msgstr ""

#. type: Plain text
#: origin/uml.txt:892
msgid "echo \"Cleaning /tmp\" /bin/rm -rf /tmp /bin/mkdir --mode=1777 /tmp"
msgstr ""

#. type: Plain text
#: origin/uml.txt:895
msgid "# don't put MARK in syslog every 20 minutes /usr/sbin/syslogd -m0"
msgstr ""

#. type: Plain text
#: origin/uml.txt:901
#, no-wrap
msgid ""
"# -c set console log level to 3 (warning?)\n"
"# -x Omits EIP translation and therefore doesn't read the System.map file.\n"
"#    Suggestion from Keith Owens on lkml on 10/31/2001.\n"
"#/usr/sbin/klogd -c3 -x -k /boot/System.map-`uname -r`\n"
"/usr/sbin/klogd -c3 -x\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:904
msgid "# load default keymap #/bin/loadkeys -d"
msgstr ""

#. type: Plain text
#: origin/uml.txt:908
msgid ""
"# Initialize uml eth0.  /sbin/ifconfig eth0 $uml_tun_ip up /sbin/route add "
"default gw $host_tun_ip"
msgstr ""

#. type: Plain text
#: origin/uml.txt:913
msgid ""
"# Starting inetd server.  if\t[[ -r /etc/inetd.conf ]] && [[ -x "
"/usr/sbin/inetd ]] then\t/usr/sbin/inetd fi"
msgstr ""

#. type: Plain text
#: origin/uml.txt:931
#, no-wrap
msgid ""
"if\t[[ -x /usr/sbin/sshd ]]\n"
"then\tif\t[ -d /etc/ssh ]\n"
"\tthen\tif\t[ -f /etc/ssh/ssh_host_key ]\n"
"\t\tthen\techo \"/etc/ssh/ssh_host_key already exists, skipping.\"\n"
"\t\telse\tssh-keygen -t rsa1 -f /etc/ssh/ssh_host_key -N \"\"\n"
"\t\tfi\n"
"\t\tif\t[ -f /etc/ssh/ssh_host_dsa_key ]\n"
"\t\tthen\techo \"/etc/ssh/ssh_host_dsa_key already exists, skipping.\"\n"
"\t\telse\tssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key -N \"\"\n"
"\t\tfi\n"
"\t\tif\t[ -f /etc/ssh/ssh_host_rsa_key ]\n"
"\t\tthen\techo \"/etc/ssh/ssh_host_rsa_key already exists, skipping.\"\n"
"\t\telse\tssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N \"\"\n"
"\t\tfi\n"
"\tfi\n"
"\t/usr/sbin/sshd\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:936
msgid "# Mount other filesystems /bin/mount -a # end of /etc/rc.d/rc.1 !"
msgstr ""

#. type: Plain text
#: origin/uml.txt:943
msgid ""
"# links for rc scripts cd $uml_root/etc/rc.d ln -s rc.2 rc.3 ln -s rc.2 rc.4 "
"ln -s rc.2 rc.5 ln -s rc.0 rc.6"
msgstr ""

#. type: Plain text
#: origin/uml.txt:948
msgid ""
"# permissions for rc scripts cd $uml_root/etc/rc.d chmod 754 rc.[0-2] chmod "
"754 rc.sysinit"
msgstr ""

#. type: Plain text
#: origin/uml.txt:951
msgid "# done with /etc echo \"done\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:957
msgid ""
"# install modules from uml kernel echo -en \"Installing kernel "
"modules\\t\\t\" cd $uml_dest/linux make $silent_make modules_install "
"INSTALL_MOD_PATH=$uml_root ARCH=um echo \"done\""
msgstr ""

#. type: Plain text
#: origin/uml.txt:965
msgid ""
"# basic .bash_profile for root.  cd $uml_root/root cat<<EOF>.bash_profile "
"export PATH=\"\\$PATH:/sbin:/usr/sbin\" set -o vi alias l=\"ls -l\" EOF"
msgstr ""

#. type: Plain text
#: origin/uml.txt:973
msgid ""
"cd / sync echo \"umounting $uml_root\" umount $uml_root echo \"detaching "
"$loop\" losetup -d $loop"
msgstr ""

#. type: Plain text
#: origin/uml.txt:978
msgid ""
"if\t! grep -q $user /etc/passwd then\techo \"change user=$user at the top of "
"$0 to whatever your login name is\" else\tchown $user:root "
"$uml_dest/linux/$root_fs fi"
msgstr ""

#. type: Plain text
#: origin/uml.txt:983
msgid ""
"# load tun driver on host system - only necessar.  if\t[[ -f "
"/lib/modules/`uname -r`/kernel/drivers/net/tun.o ]] && ! modprobe tun "
"then\tinsmod tun fi"
msgstr ""

#. type: Plain text
#: origin/uml.txt:998
#, no-wrap
msgid ""
"cd $uml_dest/linux\n"
"# boot uml if user was specified in script.\n"
"if\t[[ $user != \"\" ]]\n"
"then\t# boot up \n"
"\techo -e \"\\nBooting uml!\\n\"\n"
"\tsu - $user -c \"cd $uml_dest/linux&&./linux rootfs=$root_fs "
"eth0=tuntap,,,$host_tun_ip umid=$uml_hostname\"\n"
"else\techo \"Your uml $root_fs is in $uml_dest\"\n"
"\techo \"boot uml as a non-root user with a command like:\"\n"
"\techo \"cd $uml_dest/linux && ./linux rootfs=$root_fs "
"eth0=tuntap,,,$host_tun_ip umid=$uml_hostname\"\n"
"fi\n"
"# use the line below for no networking, and no init.  It may be useful\n"
"# for troubleshooting.\n"
"#su - $user -c \"cd $uml_dest/linux&&./linux rootfs=$root_fs "
"init=/bin/bash\"\n"
"# end of build_root_fs\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1000
#, no-wrap
msgid ""
"Comments on commands to build root_fs\n"
"=========================================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1006
msgid ""
"Create a 200 megabyte sparse file called root_fs and associate it with "
"/dev/loop0.  Copy devices, /lib, /sbin, /bin, a few things from /etc, and "
"/usr/bin into the loopback root filesystem.  If devel=true is set in "
"build_rootfs, part of /usr/bin, /usr/lib/gcc-lib and /usr/include will be "
"copied too.  Create bsd style init scripts."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1009
msgid ""
"If you defined user=somebody, build_rootfs will boot UML.  You can always "
"boot UML after building root_fs with a command like:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1011
msgid "Switch back to a non-priviledged user and run the kernel:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1013
#, no-wrap
msgid "\t./linux init=/bin/bash\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1015
msgid "or"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1017
#, no-wrap
msgid "\t./linux rootfs=root_fs eth0=ethertap,tap0,,$uml_ip_address umid=$LOGNAME\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1019
#, no-wrap
msgid ""
"Logging in\n"
"==========\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1026
msgid ""
"Login to UML as root with your usual root password.  To the host filesystem, "
"you will still be a non-priviledged user.  You will be root in the UML "
"environment.  Take a look around.  If the terminal doesn't format properly, "
"try the reset(1) command.  When you are done, type /sbin/halt to kill UML.  "
"If you can't shutdown the UML for some reason, just kill the \"linux\" "
"processes from UML."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1028
#, no-wrap
msgid ""
"Using mconsole\n"
"==============\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1034
msgid ""
"You can do some UML management with uml_mconsole.  The \"management\" device "
"is printed in the boot message, and it changes from boot to boot.  You can "
"make the socket used my mconsole stay the same by adding umid=something to "
"the UML command line.  In this example, the socket will by "
"/tmp/uml/something/mconsole."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1039
#, no-wrap
msgid ""
"\t uml_mconsole /tmp/uml/something/mconsole\n"
"\t (something) version\n"
"\t OK Linux uml 2.4.16-2um #1 Tue Dec 11 21:15:47 EST 2001 i686\n"
"\t (something)\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1042
#, no-wrap
msgid ""
"Taking down UML\n"
"===============\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1046
msgid ""
"sync\t\t# halt in mconsole doesn't sync the filesystem.  /sbin/halt\t# from "
"within UML kuml\t\t# alias mentioned earlier if UML processes are still out "
"there."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1048
#, no-wrap
msgid ""
"Taking down loopback filesystem if something went wrong\n"
"=======================================================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1051
msgid "umount /mnt/uml losetup -d /dev/loop0"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1053
#, no-wrap
msgid ""
"Troubleshooting\n"
"===============\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1057
msgid ""
"The first place to look for troubleshooting help is the FAQ at: "
"http://user-mode-linux.sourceforge.net/faq.html Some other troubleshooting "
"suggestions below."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1059
#, no-wrap
msgid ""
"UML didn't compile\n"
"------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1067
msgid ""
"Run \"make ARCH=um menuconfig\" in the uml source tree (default "
"/usr/src/uml/linux)  and disabling drivers that are questionable for UML.  "
"This could include DRI, APM, sound, and other things that you won't use in "
"UML.  Save the possibly better .config file that menuconfig creates into the "
"directory you have build_uml in.  build_uml looks for a .config file in the "
"current directory before it tries /usr/src/linux/.config.  Then run: make "
"ARCH=um dep linux modules"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1069
#, no-wrap
msgid ""
"UML hangs with \"Initializing stdio console driver\"\n"
"--------------------------------------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1072
msgid ""
"The default console is an xterm.  Configure CONFIG_CON_CHAN=pty instead of "
"xterm."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1074
#, no-wrap
msgid ""
"Xterm insane after shutdown\n"
"---------------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1076
msgid ""
"If your X terminal goes haywire, after killing UML, try "
"\"reset;reset;clear\"."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1078
#, no-wrap
msgid ""
"Panic when you have root_fs\n"
"---------------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1081
msgid ""
"If you run UML as non-root, the user running UML must own root_fs.  chown "
"the root_fs file, (not everything inside root_fs)."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1083
#, no-wrap
msgid ""
"Error building kernel\n"
"---------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1093
#, no-wrap
msgid ""
"  gcc -Wl,-T,/usr/src/uml/linux/arch/um/link.ld  -o linux -static \\\n"
"        /usr/src/uml/linux/arch/um/main.o vmlinux.o -L/usr/lib\n"
"\tvmlinux.o: In function `linux_main':\n"
"\t/usr/src/uml/linux/arch/um/kernel/um_arch.c:211: undefined reference\n"
"\tto `remap_profiling_buffers'\n"
"\tcollect2: ld returned 1 exit status\n"
"\tmake: *** [linux] Error 1\n"
"  Somehow CONFIG_GPROF in .config is defined to 1.  make mrproper and try "
"building\n"
"  the kernel again.  Read the build_uml script, there's a sed hack in there "
"for this.\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1096
#, no-wrap
msgid ""
"kernel BUG at page_alloc.c:112!\n"
"------------------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1099
msgid ""
"Similar to the previous error.  CONFIG_GPROF and CONFIG_GCOV are set.  Look "
"at the sed hack for the CONFIG in build_uml.  Here is what the error may "
"look like:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1110
msgid ""
"hrandoz@rushmore:/usr/src/uml/linux$ ./linux tracing thread pid = 17848 "
"Linux version 2.4.15-3um (hrandoz@rushmore) (gcc version 2.95.3 20010315 "
"(release)) #1 Sun Dec 2 13:19:51 EST 2001 On node 0 totalpages: 8192 "
"zone(0): 0 pages.  zone(1): 8192 pages.  zone(2): 0 pages.  Kernel command "
"line: root=/dev/ubd0 Calibrating delay loop... 25.47 BogoMIPS kernel BUG at "
"page_alloc.c:112!"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1112
#, no-wrap
msgid ""
"ifconfig error\n"
"--------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1116
msgid ""
"tuntap_open_tramp failed during ifconfig.  The /usr/include/linux/if_tun.h "
"has changed a lot since you installed glibc.  Copy "
"/usr/src/linux/include/if_tun.h to /usr/include/linux/if_tun.h and rebuild "
"the UML kernel."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1118
#, no-wrap
msgid ""
"ioctl: LOOP_SET_FD: Device or resource busy\n"
"-------------------------------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1122
msgid ""
"This may show up if build_rootfs bombed for some reason.  It means "
"/dev/loop0 is still mounted.  umount /mnt/uml && losetup -d /dev/loop0 and "
"re-run build_rootfs.  Another possiblitity is that you /dev/loop0 device "
"isn't a block device."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1124
#, no-wrap
msgid ""
"make does not return when compiling with UML\n"
"--------------------------------------------\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1127
msgid ""
"I had to reconfigure/compile make on the host system without optimization "
"and these configure options:"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1129
#, no-wrap
msgid "\t./configure --prefix=/usr --disable-job-server \n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1131
msgid "I've had better luck compiling in UML with CFLAGS and CPPFLAGS unset."
msgstr ""

#. type: Plain text
#: origin/uml.txt:1133
#, no-wrap
msgid ""
"Other helpful docs\n"
"==================\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1137
#, no-wrap
msgid ""
"HOWTO: Loopback Encrypted Filesystem HOWTO  (info about building a \n"
"\tfilesystem on a loopback device)\n"
"HOWTO: The Linux Bootdisk HOWTO\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1139
#, no-wrap
msgid ""
"IRC Resources\n"
"=============\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1141
msgid "irc.openprojects.org #kernelnewbies and #uml"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1143
#, no-wrap
msgid ""
"Mailing lists\n"
"=============\n"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1145
msgid "user-mode-linux-user@lists.sourceforge.net"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1147
msgid "#(@) $Id: uml.txt,v 1.1 2003/09/13 16:18:16 tushar Exp $"
msgstr ""

#. type: Plain text
#: origin/uml.txt:1148
msgid "Good Luck!"
msgstr ""
