# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/security.txt:4
#, no-wrap
msgid ""
"TITLE:          Secured LFS\n"
"LFS VERSION:    3.3 (but really any)\n"
"AUTHOR:         James Smaby <jsmaby@virgo.umeche.maine.edu>\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:7
#, no-wrap
msgid ""
"SYNOPSIS:\n"
"        Turn that shiny new LFS into a chained down fortress.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:19
#, no-wrap
msgid ""
"HINT:\n"
"   Most linux distros out there don't pay enough attention to security\n"
"as they should.  They normally sacrifice security for ease of use.\n"
"Unfortunately, LFS--though not a distro--does the same thing.  Sure,\n"
"it doesn't run any services by default, and has only a bare minimum\n"
"of packages installed, but even then, there's a lot that can be fixed\n"
"up.  A linux system should be secured down so that even a cracker with\n"
"a local account can't root the box.  It is generally accepted as being\n"
"trivial to do so with linux though.  After following this hint, it is\n"
"hoped that there will be a base system that will allow you to give\n"
"accounts to even the most questionable friends with ease of mind.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:49
#, no-wrap
msgid ""
"_Worst Case Scenario_\n"
"   In the worst case, a cracker gets root on the system.  If this should\n"
"happen, we want to minimize the damage that can be done.  Normally\n"
"there are five things that the cracker could do:\n"
"1. # nohup dd if=/dev/zero of=/dev/hda\n"
"  This would be a smart, though nasty cracker.  If you don't use hda\n"
"  very often, make it a copy of /dev/null, so that the dd won't trash\n"
"  the hard drive.  And, of course, make backups often.\n"
"2. # rm -rf /\n"
"  A favorite of stupid kiddies that don't like you.  It might be worth\n"
"  patching rm so that this particular command doesn't work.  You could\n"
"  also make a very complex directory structure in /a, so that you have\n"
"  time to kill the rm before it gets to the system.  It's always a good\n"
"  idea to keep as many partitions as possible mounted read-only, and\n"
"  have backups of the system.\n"
"3. # tar zxf my_rootkit.tgz\n"
"  The most common thing for a cracker to do.  Keep md5sums of all the\n"
"  files on the system so that you can see what has changed.\n"
"4. # nmap, tcpdump, etc.\n"
"  If they don't really care about, they'll just start scanning for\n"
"  more open hosts, grab passwords, and so on.  To clean up, kill the\n"
"  processes, and look for an installed rootkit.\n"
"5. # touch ~/haha_I_hacked_you\n"
"  A prankster (maybe an IRC buddy) got in, and wanted to let you know.\n"
"  Ask them how they got in, and close up that hole.  Check for a\n"
"  rootkit, just in case.\n"
"For all these things, you should check your logs to try and figure out\n"
"how they got in, so that you can fix the hole.  Always change your\n"
"passwords if people have had access to you /etc/shadow.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:93
#, no-wrap
msgid ""
"_User-level access_\n"
"   Either a network daemon was compromised, or you've given out accounts\n"
"to the wrong sort of people.  The things they can do to you are:\n"
"1. $ rm -rf /\n"
"  A quite silly thing to do, as it will only delete files that exist in\n"
"  (non-sticky-bit) directories that are writable by that user.  If your\n"
"  IRC client is compromised, this will delete all of you user's files.\n"
"  Since this is quite unwanted, IRC as a dummy account.  Other ways into\n"
"  your account include web browsers (with javascript enabled), some\n"
"  mail clients, and compiling/installing/running untrusted software.\n"
"  All these things can either not be done, or done with a dummy account.\n"
"2. $ find / -perm -4000 -o -perm -2000\n"
"  Programs with the setuid or setgid bits set run as the owner/group of\n"
"  that binary.  Some programs need root privileges in order to work\n"
"  correctly.  A couple examples are su, ping, passwd, and XFree86.\n"
"  These have the setuid bit set so that users can start them.  By\n"
"  looking for bugs in these programs (buffer overflows are a favorite),\n"
"  a crafty cracker can run arbitrary commands as root.  The fix is to\n"
"  remove the bits from any programs that don't need to be run by your "
"user.\n"
"  One can change passwords as root, and start X via xdm.  One could\n"
"  even get rid of all setuid bits completely, and have init put a root\n"
"  shell on tty1 for system maintenance.\n"
"3. $ ps --user=root -u\n"
"  Look for daemons running as root, and try to convince them to do\n"
"  stuff.  Many daemons can drop privileges, and run as nobody, or\n"
"  a specific user.  Those that can't can always bu run in chroot, so\n"
"  in the init script you may have\n"
"    cd /static && chroot . bin/daemon\n"
"  If the daemon is compiled statically, that makes setting up the chroot\n"
"  environment trivial.\n"
"4. $ for PID in `seq $$ $[$$+1000]`; do ln -s /etc/shadow /tmp/foo$PID; "
"done\n"
"  Some programs use mktemp, tmpnam, or just getpid() to choose temporary\n"
"  filenames.  If the program isn't careful, such a symlink attack as\n"
"  shown could lead to mangling the passwd file if the program is run\n"
"  by root.  One should keep a lookout for linktime warnings about mktemp\n"
"  usage, grep ones binaries for the string mktemp, and keep an eye on\n"
"  what files are in /tmp, to see if any have predictable names.\n"
"5. $ echo 'main(){while(1) fork();}' > fork.c && make fork && ./fork\n"
"  There are many ways to DOS a box with a local account.  My favorite is\n"
"  the forkbomb.  To fix it, try as root killall -STOP fork; killall -9 "
"fork\n"
"  To avoid the unpleasant thing from happening in the first place, set\n"
"  ulimit so that a user can't eat up the process table, or fill up RAM,\n"
"  or hog the CPU.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:113
#, no-wrap
msgid ""
"_Remote access_\n"
"   While LFS has no daemons running, it is still accessible from the net.\n"
"You may want to install sshd, a web server, or something else to make\n"
"the box more useful.  Securing these services from remote attackers\n"
"is extremely important.  Some things to keep in mind:\n"
"1. Run network services as an unprivileged user, and preferably in\n"
"  a chroot jail.  Keep up to date on version releases.  Only run\n"
"  services that were written with security in mind (sshd, qmail, not "
"telnet).\n"
"2. LFS comes with inetd from netkit-base.  Don't use it.  Use stand-\n"
"  alone servers, or xinetd.  In the old days, tcpwrappers was used\n"
"  with this.  Now, use iptables to firewall off your service's ports\n"
"  from IPs that don't need to use them (i.e. ssh connections only from\n"
"  your own hosts).\n"
"3. The disgruntled script kiddie that can't get into your box may resort\n"
"  to denial of service attacks.  Stop ping floods by setting an "
"appropriate\n"
"  number in /proc/sys/net/ipv4/icmp_ratelimit.  You can stop SYN floods\n"
"  by enabling syncookies in the kernel.  And if someone is still bothering\n"
"  you, iptables can let you drop all packets from their IP.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:116
msgid "_Other hints_"
msgstr ""

#. type: Plain text
#: origin/security.txt:121
#, no-wrap
msgid ""
"   Apply all the given patches to LFS's sources. There isn't an official\n"
"home for them yet, but try downloading from\n"
"< http://virgo.umeche.maine.edu/misc/security_patches.tar.gz >\n"
"and send bug reports to jsmaby@virgo.umeche.maine.edu\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:126
#, no-wrap
msgid ""
"   Sudo is an excellent little tool which allows a user (depending on the \n"
"configuration) to execute a command as root, but w/o giving them root's \n"
"password.  It's great if you just want a user to be able to \n"
"restart a webserver or certain daemon; http://www.courtesan.com/sudo/\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:130
#, no-wrap
msgid ""
"   For system accounts that people shouldn't be able to log into, use\n"
"/bin/false as the login shell, and /dev/null as home.  If they are\n"
"left blank (bin:x:1:1:bin::), login defaults to /bin/sh and /.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:136
#, no-wrap
msgid ""
"   Make sure to enable MD5 passwords in /etc/login.defs, then change\n"
"your passwords to apply it.  This will allow passwords larger than\n"
"eight characters.  Try running a dictionary-based password cracker on\n"
"the encrypted passwords of you and any user on the system to find\n"
"week passwords that need to be changed.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:142
#, no-wrap
msgid ""
"   Break the system up into multiple partitions.  The only parts of the\n"
"filesystem that should be writable are /home and /var.  Some programs\n"
"may complain about / being mounted read-only though (like kdm).  Parts\n"
"of the filesystem could also be mounted with noexec, nosuid, nodev, and\n"
"so on.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:146
#, no-wrap
msgid ""
"   After getting the system setup the way you want, either use Tripwire,\n"
"or just take md5sums of all the files on the system.  Try the following\n"
"(really slow) script to keep track of md5sums:\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:166
#, no-wrap
msgid ""
"#!/bin/bash\n"
"mv /var/log/checksums /var/log/checksums.old\n"
"DIRS=\"/bin /boot /etc /lib /root /sbin /usr\"\n"
"for DIR in $DIRS; do\n"
"  FILES=`find $DIR -type f -o -type l`\n"
"  for FILE in $FILES; do\n"
"    SUM=`md5sum $FILE 2> /dev/null`\n"
"    echo $SUM >> /var/log/checksums\n"
"    SUM=`echo $SUM | cut -d \" \" -f 1`\n"
"    OLDSUM=`grep \" $FILE$\" /var/log/checksums.old | cut -d \" \" -f 1`\n"
"    if [ \"$SUM\" != \"$OLDSUM\" ]; then\n"
"      echo $FILE\n"
"    fi\n"
"  done\n"
"done\n"
"echo \"Old overall checksum:\"\n"
"md5sum /var/log/checksums.old\n"
"echo \"New overall checksum:\"\n"
"md5sum /var/log/checksums\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:170
msgid ""
"Make sure to put a copy of the checksums on a floppy disk (and take the disk "
"out of the computer), and write down the overall checksums so that you'll "
"know if they've been tampered with."
msgstr ""

#. type: Plain text
#: origin/security.txt:174
#, no-wrap
msgid ""
"   Make sure to check permissions after installing everything.  Look\n"
"for setuid bits, and world writable files and directories.  Use find\n"
"commands similar to the second user-level access cracker's command.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:179
#, no-wrap
msgid ""
"   A good replacement for syslogd is syslog-ng.  It allows for easier\n"
"sorting, and is more powerful.  Either way, consider having logs\n"
"sent to a log server, so that crackers can't cover their tracks\n"
"by editing log files.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:182
#, no-wrap
msgid ""
"   For more fine grained kernel-level security, check out the patches\n"
"at < http://www.lids.org >.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:186
#, no-wrap
msgid ""
"   Another kernel-level security enhancement is at\n"
"< http://www.nsa.gov/selinux >, but is redhat-centered, so maybe\n"
"of minimal use to LFSers.\n"
msgstr ""

#. type: Plain text
#: origin/security.txt:192
#, no-wrap
msgid ""
"   A security-conscious distribution is at < http://www.openwall.com/Owl "
">.\n"
"Their package source is distributed as SRPMs, but after unpacking them,\n"
"patches to the program are given (although not always an explanation\n"
"of what they do).  It is always good to take a look at what patches\n"
"they're applying before installing a new package.\n"
msgstr ""
