# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/entropy.txt:2
msgid "AUTHOR:\t\tRobert Connolly <robert at linuxfromscratch dot org> (ashes)"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:4
msgid "DATE:\t\t2007-05-16"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:6
msgid "LICENSE:\tPublic Domain"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:8
msgid "SYNOPSIS:\tEntropy and random number generators in Linux"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:10
msgid "PRIMARY URL:\thttp://www.linuxfromscratch.org/hints/"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:14
msgid ""
"DESCRIPTION: The word \"entropy\" generally means \"chaos\", \"disorder\", "
"or \"uncertainty\". In this hint \"entropy\" is used to describe random "
"computer data."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:23
msgid ""
"Many system components depend on entropy (random numbers) for various "
"tasks.  One of the simplest examples would be the fortune(6) program, which "
"gives a random quote from a list when we log in. Another simple example is a "
"solitaire card game, or the shuffle option in a music player. Without random "
"numbers these programs would generate the same results every time they "
"run. The above examples are low security applications. It is not critical "
"for them to use high quality random numbers, and in applications like these "
"the current system time and date is usually an adequate source of entropy."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:30
msgid ""
"Examples of medium security uses for entropy would be applications like "
"mktemp(1), password salt, or the Stack Smashing Protector (SSP) GCC "
"feature.  These applications need unpredictable entropy to function "
"securely, but the life span of these applications is generally short, so "
"they do not need to use the highest quality entropy available. Using the "
"system time is unsafe for these applications because it is predictable."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:36
msgid ""
"Cryptographic keys tend to have a very long life, often several years. Even "
"after the key is eventually replaced, everything it was used to encrypt "
"remains only as safe as the entropy used to generate the key. For "
"cryptography we want to use the best entropy possible, and conserve this "
"high quality entropy specifically for cryptography."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:55
msgid ""
"Generating true entropy in a computer is fairly difficult because nothing, "
"outside of quantum physics, is random. The Linux kernel uses keyboard, "
"mouse, network, and disc activities, with a cryptographic algorithm (SHA1), "
"to generate data for the /dev/random device. One of the problems with this "
"is that the input is not constant, so the kernel entropy pool can easily "
"become empty.  The /dev/random device is called a \"blocking device\". This "
"means if the entropy pool is empty applications trying to use /dev/random "
"will have to wait, indefinitely, until something refills the pool. This is "
"both a feature and a nuisance, and can cause a denial of service depending "
"on the application.  Another problem with using the keyboard, mouse, "
"network, and disc activity is that on idle, unmanned, and disc-less systems "
"there is very little, or no, input of this kind. It is also theoretically "
"possible for an observer (keyboard or network sniffer) to predict the "
"entropy pool without having root level access.  The only real solution to "
"these vulnerabilities is in using a hardware-based random number "
"generator. These hardware devices usually use electrical static as a source "
"of entropy, because there is currently no technology that can reliably "
"predict this. The best hardware random number generators use radioactive "
"decay as an entropy source."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:67
msgid ""
"The /dev/urandom device is referred to as a pseudo-random device "
"(like-random), although /dev/random is also pseudo-random but to a lesser "
"extent. /dev/urandom uses small amounts of data from /dev/random to seed a "
"secondary entropy pool.  This has the effect of inflating the real entropy "
"so it can be conserved. Using /dev/urandom can cause /dev/random's pool to "
"become empty, but if this happens /dev/urandom will not block, and it will "
"continue using the last available seed. This makes /dev/urandom "
"theoretically vulnerable to outputting repeating data, depending on the "
"limitations of the algorithm used, but this is extremely rare and to my "
"knowledge has never actually happened. /dev/urandom is widely considered "
"safe for all cryptographic purposes, except by the most paranoid people."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:70
msgid ""
"This hint contains links to web sites and patches to help you get more "
"entropy, and use it more conservatively."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:74
msgid ""
"PREREQUISITES: Glibc-2.5, for the arc4random patch.  The entropy daemons "
"have no prerequisites."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:76
msgid "HINT:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:87
#, no-wrap
msgid ""
"\tContents:\n"
"\t\tGkernel hwrandom daemon\n"
"\t\tAudio/Video entropy daemon\n"
"\t\tLavaRnd entropy daemon\n"
"\t\tFrandom and Erandom kernel drivers\n"
"\t\tFortuna kernel driver\n"
"\t\tArc4random library\n"
"\t\tEntropy pool size\n"
"\t\tOpenSSL modifications\n"
"\t\tTesting\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:93
msgid ""
"- Gkernel hwrandom daemon: http://linuxcertified.com/hw_random.html Some "
"systems have hardware devices for random numbers. The kernel supports many "
"of them. For more information check the above web site. Also see: "
"http://sourceforge.net/projects/gkernel/"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:95
msgid "The installation is strait forward for Glibc:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:99
msgid "./configure --prefix=/usr && make && make install"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:101
msgid "--- End Glibc installation ---"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:107
msgid ""
"The installation is a little messy for uClibc: uClibc does not have argp, "
"because argp is not defined by any standard and does not belong in a C "
"library (it's Glibc specific). So get the stand-alone argp library: "
"http://www.lysator.liu.se/~nisse/misc/argp-standalone-1.3.tar.gz"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:109
msgid "For uClibc first unpack argp-standalone, we don't need to install this:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:112
msgid "cd argp-standalone-1.3 && ./configure --prefix=/usr && make"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:114
msgid "Then unpack rng-tools:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:119
#, no-wrap
msgid ""
"cd rng-tools-2 &&\n"
"env LIBS=-largp \\\n"
"        CFLAGS=\"-O2 -L../argp-standalone-1.3 -I../argp-standalone-1.3\" "
"\\\n"
"        ./configure --prefix=/usr && make && make install\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:121
msgid "--- End uClibc installation ---"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:124
msgid ""
"rng-tools expects to find /dev/hw_random. This device was renamed to "
"/dev/hwrandom in Linux-2.6, so you may need to start 'rngd' like this:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:126
msgid "rngd -r /dev/hw_random"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:128
msgid "This should be started on boot just like audio-entropyd, below."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:130
msgid "This package comes with a test program named 'rngtest'."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:142
msgid ""
"- Audio/Video entropy daemon: http://www.vanheusden.com/aed/ "
"http://www.vanheusden.com/ved/ These two daemons use either the static noise "
"from the sound card, or the video frames from a video4linux device. These "
"devices have a never ending supply of entropy created by thermal fluctuation "
"and electric fields on the devices.  These entropy gathering daemons depend "
"on the kernel driver for your hardware, to work properly, be it your sound "
"or video card. These programs will refill the kernel entropy pool as "
"needed. The programs can be used together in combination, including with "
"Gkernel, to maintain a kernel entropy pool which uses several different "
"sources."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:144
msgid "http://www.vanheusden.com/aed/audio-entropyd-0.0.6.tgz"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:147
msgid "make && install -g 0 -o 0 -m 755 audio-entropyd /usr/sbin/audio-entropyd"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:153
msgid ""
"Edit your /etc/rc.d/init.d/random and start audio-entropyd just after "
"seeding urandom, and stop it just after saving random-seed. Or use the boot "
"script template and make a dedicated boot script. The PID file will be in "
"/var/run.  You don't need to reboot to use it, but you do need your sound "
"card driver loaded, and be root. Add something like this:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:158
#, no-wrap
msgid ""
"if [ -f /usr/sbin/audio-entropyd ] && [ -c /dev/dsp ]; then\n"
"        echo \"Starting audio entropy daemon...\"\n"
"        loadproc /usr/sbin/audio-entropyd\n"
"fi\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:160
msgid "and..."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:163
msgid "echo \"Stopping audio entropy daemon...\" killproc /usr/sbin/audio-entropyd"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:165
msgid "http://www.vanheusden.com/ved/video_entropyd-0.7.tgz"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:168
msgid "make && install -g 0 -o 0 -m 755 video_entropyd /usr/sbin/video_entropyd"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:172
msgid ""
"Add this to root's crontab every minute or so. It can not run as a daemon "
"because it will lock the video device. Depends on video4linux. Using one or "
"both of these daemons should be adequate for sustained moderate-to-heavy "
"use."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:175
msgid ""
"Nothing else needs to be done, applications can continue to use /dev/random "
"and /dev/urandom normally. You should notice crypt keys get made faster."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:177
msgid "Note: I have not personally used video_entropyd."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:182
msgid ""
"- LavaRnd entropy daemon: http://www.lavarnd.org/ This uses hardware as a "
"source of entropy much like Video Entropy Daemon.  I have not personally "
"used this daemon."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:187
msgid ""
"- Frandom and Erandom kernel drivers: http://frandom.sourceforge.net/ "
"Frandom stands for \"fast random\". Erandom stands for \"economical "
"random\".  They both use the arcfour algorithm"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:193
msgid ""
"The /dev/frandom device is similar to /dev/urandom except that it only takes "
"one single seed from /dev/random, each time it is opened. As a result it is "
"able to output random data much faster than /dev/urandom because there is no "
"stirring of frandom's pool. This is ideal for wiping discs, or any time you "
"need gigabytes of random data."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:203
msgid ""
"The /dev/erandom device uses the constantly changing state of frandom's "
"pool, in a read-only mode, for entropy. /dev/erandom consumes no entropy "
"from /dev/random, and is ideal for applications that want to open the device "
"thousands of times, such as Stack Smashing Protector. /dev/erandom is also "
"well suited for any medium security application, and should be used for any "
"non-cryptographic application instead of /dev/urandom. /dev/erandom will "
"eventually output repeating data, but can be reinitialized by using "
"/dev/frandom (dumping one block from /dev/frandom to /dev/null). This is "
"done automatically after each reboot, and should be done once per week."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:206
#, no-wrap
msgid ""
"http://www.linuxfromscratch.org/patches/downloads/linux/\n"
"\tlinux-2.6.21.1-frandom-1.patch\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:208
#, no-wrap
msgid "\tCONFIG_FRANDOM is in \"Character Devices\" and \"UserMode\" menus.\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:212
msgid ""
"Add Udev permissions with the following command: echo 'NAME==\"erandom\", "
"MODE=\"0444\" NAME==\"frandom\", MODE=\"0444\"' "
">>/etc/udev/rules.d/25-lfs.rules"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:215
msgid ""
"Add this to your crontab, so /dev/erandom will be reinitialized weekly: 0 0 "
"* * 1 /bin/dd if=/dev/frandom of=/dev/null count=1 >/dev/null 2>&1"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:219
msgid ""
"Note: The sysctl interfaces are considered obsolete in the latest Linux-2.6 "
"kernels, and may not be supported much longer. As a result the "
"SYSCTL_ERANDOM interface is no longer recommended, but it's there if you "
"want it."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:230
msgid ""
"- Fortuna kernel driver: http://jlcooke.ca/random "
"http://en.wikipedia.org/wiki/Fortuna_(PRNG)  The Fortuna driver is a "
"complete replacement for the Linux random number driver. While the vanilla "
"kernel uses the SHA1 algorithm, the Fortuna driver uses AES and SHA-256, and "
"is capable of producing far more volume of random data from the same "
"entropy, due to using superior algorithms. The Fortuna driver is also able "
"to use any other algorithms supplied by the Linux crypto API. The Fortuna "
"driver includes several other improvements to the vanilla driver."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:233
msgid ""
"At the time of this writing the patch on the Fortuna home page does not "
"build with linux-2.6.21.1, because of changes to the crypto api."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:236
#, no-wrap
msgid ""
"\tCONFIG_CRYPTO_RANDOM_FORTUNA - This depends on CONFIG_CRYPTO, SHA256,\n"
"\t\t\t\t\tand AES, in the crypto menu.\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:242
msgid ""
"- Arc4random library: The arc4random interfaces were designed by OpenBSD to "
"solve the problem of emptying the kernel entropy pool with non-cryptographic "
"applications. In Linux this is solved with /dev/erandom. The arc4random "
"library function is a companion function. It is designed to never fail."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:256
msgid ""
"For example, a program can be coded to try to use /dev/urandom for entropy, "
"and use the gettimeofday library function if /dev/urandom fails (like in a "
"chroot). The problem with this is that when the gettimeofday function is "
"being used it is fairly obvious that the output has a sequence, and it tells "
"an attacker that the system time is being used for entropy in this program.  "
"The arc4random library function also uses /dev/urandom (or /dev/erandom), "
"and the gettimeofday library function if /dev/urandom fails, except that the "
"entropy is digested by the arcfour algorithm. The result is that even with a "
"one microsecond difference from gettimeofday, arc4random's output will be "
"completely different, and it is impossible for an attacker to know whether "
"the entropy came from /dev/urandom or the system time. Furthermore, even if "
"/dev/urandom (or /dev/erandom), and gettimeofday fail, arc4random will use "
"the uninitialized variables in a large character array (garbage data in "
"memory)."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:259
msgid ""
"Many packages will use the arc4random library function if it is found, such "
"as OpenSSL, OpenSSH, OpenNTPD, and Bind9."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:262
msgid ""
"The arc4random library function discards the first 256 bytes of the stream "
"to deal with the early key stream weakness, which is described in the paper "
"below."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:264
msgid "This function is included with uClibc. There is a patch below for Glibc."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:271
#, no-wrap
msgid ""
"Read more about Arcfour here:\n"
"Paper describing Arcfour -\n"
"http://www.mozilla.org/projects/security/pki/nss/\\\n"
"\tdraft-kaukonen-cipher-arcfour-03.txt\n"
"Paper describing the RC4 (and arcfour) weakness -\n"
"http://www.wisdom.weizmann.ac.il/~itsik/RC4/Papers/Rc4_ksa.ps\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:276
msgid ""
"This patch adds the arc4random library function, and uses arc4random() in "
"tempname so it is used by the mktemp() family of functions, instead of "
"gettimeofday(), and to res_init, res_mkquery, and bindrsvprt to improve the "
"resolver and port number randomization, instead of using getpid()."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:279
#, no-wrap
msgid ""
"http://www.linuxfromscratch.org/patches/downloads/glibc/\n"
"\tglibc-2.5-arc4_prng-1.patch\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:282
msgid ""
"This patch also adds the --with-prng-device option. If you're using "
"/dev/erandom then use '--with-prng-device=/dev/erandom' when configuring "
"Glibc."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:285
msgid ""
"Install the arc4random.3 manual page with this command: install -m644 "
"../glibc-2.5/manual/arc4random.3 /usr/share/man/man3"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:288
msgid ""
"OpenSSL will not detect arc4random. If you want to use arc4random with "
"OpenSSL instead of /dev/urandom then use the following command in OpenSSL's "
"source:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:290
msgid "sed -e 's/__OpenBSD__/__linux__/' -i crypto/rand/rand_unix.c"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:293
msgid ""
"This is used with RAND_add, for RAND_bytes and RAND_pseudo_bytes, to re-seed "
"the random number generator for each thread."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:301
msgid ""
"- Entropy pool size: You can increase the size of your kernel entropy "
"pool. This will help you retain entropy when it's available for when you "
"need it. You can see the current size with: cat "
"/proc/sys/kernel/random/poolsize or sysctl kernel.random.poolsize"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:305
msgid ""
"This was recently increased from 512 bytes to 4096 bytes. This /proc file, "
"and sysctl, is read-only, and can not be changed without hard coding it in "
"the kernel."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:308
msgid ""
"If you want to increase this then I suggest you use the Grsecurity kernel "
"patch at: http://www.grsecurity.net/"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:311
#, no-wrap
msgid ""
"And enable the \"Larger entropy pools\" option to double the size:\n"
"\tCONFIG_GRKERNSEC_RANDNET\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:317
msgid ""
"- OpenSSL modifications: OpenSSL command line tools will try to use the "
"$RANDFILE, $HOME/.rnd, or $(pwd)/.rnd file to initially seed its random "
"number generator. If none are found then the \"PRNG not seeded\" error "
"message may occur. We can build OpenSSL with a contingency plan, to use "
"/dev/urandom, instead of causing an error."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:319
msgid "Do this with the following command in the OpenSSL source:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:322
#, no-wrap
msgid ""
"sed -e 's/__OpenBSD__/__linux__/' \\\n"
"\t-e 's/arandom/urandom/' -i crypto/rand/randfile.c\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:327
msgid ""
"- Testing entropy quantity You should try to test this on an idle "
"machine. Nothing compiling in background, no updatedb running, "
"etc. Moving/clicking the mouse, keyboard, and even network traffic will "
"create entropy in the pool, and affect results."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:331
#, no-wrap
msgid ""
"Fetch this:\n"
"http://www.linuxfromscratch.org/~robert/hlfs/hints/attachments/entropy/\n"
"\tentropy_avail.sh\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:334
msgid ""
"Open two windows with non-root login. This is easiest to do in X, else split "
"a console window in two. In one window do this:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:336
msgid "sh ./entropy_avail.sh"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:338
msgid "In the next window do something like this:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:340
msgid "dd if=/dev/{u,f,e}random of=/dev/null bs=1 count=1024"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:346
msgid ""
"If one or both of the entropyd programs are running you should see the pool "
"being refilled. Kill the entropyd program(s) and you should see it does not "
"refill so quickly. Move the mouse and play with it if you like. If you use a "
"small count like count=512 the entropyd program(s) may not refill "
"immediately because the pool is still large enough. This is to improve "
"performance."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:348
msgid "You might want to delete entropy_avail.log when you're done."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:353
msgid ""
"- Testing entropy quality The 'ent' program runs various tests on data you "
"supply to check for patterns.  For a better description see: "
"http://www.fourmilab.ch/random/"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:356
msgid ""
"Download the 'ent' program from here: "
"http://www.fourmilab.ch/random/random.zip"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:360
msgid ""
"This package will unpack to your current directory, so it is best to make a "
"new empty directory and unpack random.zip in there. This package only needs "
"a 'make' command to compile."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:362
msgid "To test your random generators do something like this:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:365
msgid "dd if=/dev/erandom of=erandom.txt count=100 ./ent erandom.txt"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:367
msgid "or:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:369
msgid "dd if=/dev/erandom count=512|./ent -b"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:371
msgid "These tests can take a very long time."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:375
msgid ""
"From the people who made Audio/Video entropy daemon there is another "
"randomness test program: http://www.vanheusden.com/Linux/RNGTEST.tgz"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:377
msgid "To compile RNGTEST:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:379
msgid "gcc -o RNGTEST RNGTEST.c"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:381
msgid "To use RNGTEST:"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:385
msgid "dd if=/dev/frandom count=2048 | RNGTEST and: cat /bin/true | RNGTEST"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:387
msgid "You'll notice /bin/true fails the RNGTEST multiple times."
msgstr ""

#. type: Plain text
#: origin/entropy.txt:395
#, no-wrap
msgid ""
"ACKNOWLEDGMENTS:\n"
"* Thanks to Eli Billauer for the Frandom suite.\n"
"\thttp://frandom.sourceforge.net/\n"
"\thttp://www.billauer.co.il/\n"
"* Thanks to OpenBSD for the arc4random library.\n"
"\thttp://www.openbsd.org/cgi-bin/cvsweb/src/lib/libc/crypt/arc4random.c\n"
"* Thanks to hlfs-dev at linuxfromscratch.org\n"
msgstr ""

#. type: Plain text
#: origin/entropy.txt:440
#, no-wrap
msgid ""
"CHANGELOG:\n"
"[2004-03-29]\n"
"* Initial post\n"
"[2004-03-30]\n"
"* Added test.\n"
"[2004-04-18]\n"
"* Added frandom/erandom.\n"
"[2004-04-25]\n"
"* Added hardware random url and notes.\n"
"* Switched the entropy_avail program to a more simple shell script.\n"
"[2004-05-07]\n"
"* Added patch for kernel 2.6 and for mktemp.\n"
"* Added LavaRnd.\n"
"[2004-10-01]\n"
"* Added libc-headers patch.\n"
"[2004-10-28]\n"
"* New patch tarball url added.\n"
"* Added second url for linux-libc-headers patch.\n"
"[2004-11-03]\n"
"* Added Libarc4random.\n"
"* Changed Mktemp patch from frandom to libarc4random.\n"
"[2004-11-28]\n"
"* Added patch for linux-2.6.7 and older kernels because the 2.6.9 patch\n"
"  does not compile on older kernel versions.\n"
"[2005-02-05]\n"
"* Added bootscript example for aed.\n"
"[2005-02-12]\n"
"* Added pseudo_random kernel patch and integrated arc4random with libc.\n"
"* Added help for increasing entropy pool size.\n"
"[2005-02-15]\n"
"* Added patch for OpenSSL.\n"
"[2005-04-04]\n"
"* Update the kernel random poolsize modification method. This must be hard "
"coded\n"
"  now.\n"
"[2005-04-09]\n"
"* Add argp standalone library so rng-tools will build on uClibc.\n"
"[2007-05-16]\n"
"* Updated the description.\n"
"* Added Fortuna kernel driver.\n"
"* Added some OpenSSL additions.\n"
"* Updated arc4random Glibc patch.\n"
"* Updated Frandom kernel patch.\n"
"* Added table of contents.\n"
"* Added entropy quality tests.\n"
"* Fixed the Udev config thanks to Bryan Kadzban.\n"
msgstr ""
