# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/lfs_bare_build.txt:4
msgid ""
"TITLE:\t\tLFS-BARE-BUILD hint LFS VERSION:\tAny recent LFS with kernel > 2.2 "
"glibc-2.2 gcc 2.95.3 AUTHOR:\t\tFrank Schafer <frank.schafer@setuza.cz>"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:9
#, no-wrap
msgid ""
"SYNOPSIS:\tThis hint is a collection of the experience I made during the\n"
"\t\tbuild of a LFS system on a machine with no OS installed and\n"
"\t\tsome information from different INSTALL-HOWTOs with some\n"
"\t\tfurther suggeetions.\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:11
msgid "VERSION:\t17-10-2001"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:12
#, no-wrap
msgid "============\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:14
#, no-wrap
msgid ""
"Introduction\n"
"============\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:45
#, no-wrap
msgid ""
"Most of the recent Linux distributions provide an easy way to make a "
"machine\n"
"running this wonderful OS -- but there are some disadvantages:\n"
"1'st: Nearly all ( all ) distributors package things together, so one has "
"the\n"
"      possibility to choose, which of the ( distribution ) packages to "
"install,\n"
"      but probably ( mostly ) get things installed she don't wamt to.\n"
"2'nd: Using a lane and plain distribution install-CD one will never "
"understand\n"
"      in deep, how things work under *NIX.\n"
"3'rd: Using a binary distribution one doesn't know, how the single "
"packages\n"
"      were configured.\n"
"4'th: Binary distributions have to ensure, that they can be installed on "
"every\n"
"      machine ( assuming INTEL ). So they build their packages without any\n"
"      subtarget options applied to the compiler, and end up with i386 "
"code.\n"
"      Of course, a PENTIUM IV is able to run this code, but it'll run it "
"faster,\n"
"      if the compiler made real PENTIUM-IV-instructons.\n"
"Thanks to Gerard and friends - LFS came in turn. The LFS people did a "
"great\n"
"work, supplying the knowledge of how to build a custom Linux "
"\"distribution\" to\n"
"almost everybody. Such a custom build has the advantages, that one can "
"choose\n"
"fine grained what will run on her machine, that we know how the packages\n"
"are configured ( we configure ourselves ;-), adding the -march switch to "
"our\n"
"Makefiles can be used, to create code for the processor one has on her\n"
"machine instead if the default i386 code, and last but not least one will\n"
"win a lot of knowledge doing this all.\n"
"The only disadvantage of LFS as-is is, that it is build on a machine with "
"Linux\n"
"already installed into a seperate partition on the harddisk. Mostly there "
"won't\n"
"be so much unused disk space, to create a new partition which is sufficient "
"for\n"
"the task of building a whole system. Furthermore this way we can't plan a\n"
"layout for the filesystem ( we simply have everything in one large partition "
").\n"
"Using a PC with only the BIOS installed, to build the LFS system can solve "
"this.\n"
"In fact, as the time of this writing I've dropped all binary distributions "
"and\n"
"use the LFS style to install ( or better build ? ) new hosts.\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:46
#, no-wrap
msgid "===========\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:48
#, no-wrap
msgid ""
"So let's go\n"
"===========\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:57
msgid ""
"You cannot build an operating system using only the BIOS of a PC - of "
"course. So we will need a machine, where all the nesessary tools are "
"available. You can use every PC with linux installed for this task. In my "
"first case I used a Slackware7.1 distribution with glibc-2.1.3, kernel "
"2.2.16 and gcc-2.91.66. I'll call this machine the MOTHER further on.  I "
"intended to build an LFS system with glibc-2.2.3, kernel 2.4.8 and "
"gcc-2.95.3.  I'll call this machine the CHILD further on.  The first "
"trouble, I ran into was the upgrades of glibc and of the kernel, so be aware "
"if this."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:63
msgid ""
"First preparation steps ( MOTHER )  We need the tools we need to build the "
"system, and what we are using the MOTHER for, on the CHILD too. First we use "
"the MOTHER, to build them.  You will have to look for a filesystem, which "
"has enough free space to build.  Let's say, a:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:65
#, no-wrap
msgid "\t# df -k\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:67
msgid "gives you this output:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:75
#, no-wrap
msgid ""
"\tFilesystem           1k-blocks      Used    Available Use% Mounted on\n"
"\t/dev/hda1            101089         20516   75354     22%  /\n"
"\t/dev/hdb1            1035692        731688  251392    75%  /usr\n"
"\t/dev/hdb3            101089         17      95853     1%   /tmp\n"
"\t/dev/hdb5            101089         2931    92939     4%   /var/spool\n"
"\t/dev/hdb6            497829         260506  211621    56%  /opt\n"
"\t/dev/hdb7            2158384        1110060 1048324   51%  /v_dsk\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:77
msgid "Then you have enough space in /v_dsk."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:81
#, no-wrap
msgid ""
"Note: If You plan ( like I did ) to reuse the static part of the build, "
"you\n"
"      should NOT add any -march switches to your Makefiles. So you ensure "
"to\n"
"      have code, which runs on every machine.\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:121
#, no-wrap
msgid ""
"If you want to reuse the static build for further LFS builds I suggest you "
"to\n"
"create a \"private\" version of glibc and ncurses ( the only libs we need "
"for\n"
"this ). First make a backup of the static libs in /usr/lib and /lib. We "
"could\n"
"of course use the -nostdlib switch to cc and to add all the libs manually, "
"but\n"
"we'd have to do this for every package from chapter 5. That's why I've "
"choosen\n"
"this way.\n"
"The following is \"stolen\" from the lfs-3.0pre3-upgrade hint.\n"
"glibc:\n"
"  You will need to unpack glibc and glibc-linuxthreads, and create the\n"
"  glibc-build directory in your source directory. Then change into "
"glibc-build\n"
"  and do:\n"
"        # ../glibc-2.2.1/configure \\\n"
"          --prefix=/usr \\\n"
"          --disable-shared \\\n"
"          --disable-profile \\\n"
"          --enable-add-ons \\\n"
"          --omit-fp\n"
"        # make\n"
"        # make install_root=/v_dsk/static-libs install\n"
"        # cd /v_dsk/static-libs/usr/lib\n"
"\t# cp -a * /usr/lib\n"
"  Doing this and following my note above, you will end up with i386 code, "
"which\n"
"  don't use a hardware FPU.\n"
"ncurses:\n"
"  Unpack the ncurses package you want to use, change into the ncurses "
"directory\n"
"  and do:\n"
"\t# ./configure \\\n"
"\t  --with-install-prefix=/v_dsk/static-libs \\\n"
"\t  --prefix=/usr \\\n"
"\t  --libdir=/lib \\\n"
"\t  --without-shared \\\n"
"\t  --without-profile \\\n"
"\t  --without-debug \\\n"
"\t  --disable-termcap\n"
"\t# make\n"
"\t# make install\n"
"\t# cd /v_dsk/static-libs/lib\n"
"\t# cp -a *.a /lib\n"
"  This links the ncurses libs against the glibc without FPU usage.\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:123
msgid "Now we can create a directory for the LFS static build in /v_dsk."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:125
#, no-wrap
msgid "\t# mkdir /v_dsk/lfs\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:127
msgid "If you now do an:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:129
#, no-wrap
msgid "\t# export LFS=/v_dsk/lfs\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:137
msgid ""
"you can follow exactly the instructions of chapter 5 of the LFS-BOOK, to "
"build all necessary tools for the build of the final LFS system.  There is "
"one exception: You don't need the kernel header files ( in $LFS ) for this "
"build, so leave this step alown.  Too, at this point, you shouldn't do the "
"steps after ''Installing Textutils''.  Once you finished with chapter 5 of "
"the book, you should burn out $LFS/usr/include."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:139
#, no-wrap
msgid "\t# rm -rf $LFS/usr/include\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:141
msgid "Everything we need is now in $LFS."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:144
msgid ""
"If you have made the \"private\" build for the libs above, you now should "
"restore them from the backup you made."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:158
msgid ""
"At this point we have all we need to make the final build, but we have it on "
"the MOTHER, which is definitively the wrong machine.  So we'll now need to "
"bring the CHILD to life. Again we use the MOTHER. Now we will make a set of "
"floppy disks, which we will boot the CHILD with. This is taken from the "
"Bootdisk-HOWTO. So if something I describe here remains unclear, use this as "
"a reference.  There are still some things, we still havent built, which are "
"nesessary for a system boot. We'll need a kernel, of course, init and login "
"must be available on a rootdisk, we will need to mount filesystems, we will "
"need to partition the disk on the CHILD ( fdisk ) and we will need to create "
"filesystems ( mke2fs )  and, because we won't be able to build without, we "
"need to create and turn on swap on the CHILD ( mkswap, swapon ). Because "
"we'll use NFS during the build we'll need to configure our NIC ( ifconfig, "
"route )."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:161
msgid ""
"Let's now populate the filesystem for our root-disk. We'll create first a "
"directory for this."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:163
#, no-wrap
msgid "\t# mkdir /v_dsk/rootfs\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:166
msgid ""
"The root filesystem will have all programs in /bin or /sbin and all "
"libraries in /lib for simplicity. So:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:168
#, no-wrap
msgid "\t# mkdir /v_dsk/rootfs/{bin,dev,etc,lib,mnt,proc,sbin,var,MOTHER}\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:172
msgid ""
"is sufficient.  The /MOTHER directory will be used later on the CHILD, to "
"mount the directory, which contains the static binaries via NFS from the "
"MOTHER."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:174
msgid "And we have to do:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:177
#, no-wrap
msgid ""
"\t# mkdir /v_dsk/rootfs/var/{log,run}\n"
"\t# touch /v_dsk/rootfs/var/run/utmp\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:179
msgid "Because these directoties/files are needed by login."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:182
msgid ""
"Next we'll create the devices ( in /dev of course ). I'll use the "
"traditional ``mknod'' here."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:184
#, no-wrap
msgid "\t# cd /v_dsk/rootfs/dev\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:187
msgid ""
"You could copy all the devices from /dev to here of course, and delete, what "
"you don't need, but on the rootdisk we need only a few, so we do:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:193
#, no-wrap
msgid ""
"\t# mknod -m 660 console c 5 1\n"
"\t# mknod -m 660 fd0 b 2 0\n"
"\t# mknod -m 660 hda b 3 0\n"
"\t# mknod -m 660 hda1 b 3 1\n"
"\t...\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:198
msgid ""
"Which HD devices you want to create depends on, how many partitions you plan "
"to create on your HDs and what disk(s) you have. More information on the "
"commands above you find in the manual for mknod, and in the devices.txt "
"file, which is part of the kernel distribution."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:212
#, no-wrap
msgid ""
"\t# mknod -m 660 initrd b 1 250\n"
"\t# mknod -m 660 kmem c 1 2\n"
"\t# mknod -m 666 null c 1 3\n"
"\t# mkdir pts\n"
"\t# chmod 755 pts\n"
"\t# mknod -m 660 ram0 b 1 0\n"
"\t# mknod -m 644 random b 1 8\n"
"\t# mknod -m 666 tty c 5 0\n"
"\t# mknod -m 600 tty0 c 4 0\n"
"\t# mknod -m 600 tty1 c 4 1\t# 2 virtual consoles are enough\n"
"\t# mknod -m 600 tty2 c 4 2\t# for a rootdisk floppy\n"
"\t# mknod -m 644 urandom c 1 9\n"
"\t# mknod -m 666 zero c 1 5\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:214
msgid "The next diectory we'll have to populate is /etc. So let's go there;"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:216
#, no-wrap
msgid "\t# cd /v_dsk/rootfs/etc\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:218
msgid "First, we need an rc-script. The one we use is fairly simple."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:229
#, no-wrap
msgid ""
"\t# cat > rc\n"
"\t#!/bin/sh\n"
"\t/bin/mount -av\n"
"\t/sbin/ifconfig lo 127.0.0.1\n"
"\t/sbin/route add -net 127.0.0.0 netmask 255.0.0.0 lo\n"
"\t/sbin/ifconfig eth0 IP.OF.THE.CLD broadcast BROADCAST \\\n"
"\t\t\t\t\t      netmask NETMASK\n"
"\t/bin/mount -t nfs IP.OF.THE.MTR:/v_dsk/lfs /MOTHER\n"
"\t^D\n"
"\t# chmod 755 rc\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:234
msgid ""
"Replace ``IP.OF.THE.CLD'' with the IP-address, you have choosen for the "
"CHILD, and BROADCAST and NETMASK with the broadcast address and netmask of "
"your site respectively.  The same way replace ``IP.OF.THE.MTR'' with the "
"IP-address of the MOTHER."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:236
msgid "Now we'll create the fstab file."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:242
#, no-wrap
msgid ""
"\t# cat > fstab\n"
"\t/dev/ram0       /               ext2    defaults\n"
"\t/dev/fd0        /               ext2    defaults\n"
"\t/proc           /proc           proc    defaults\n"
"\t^D\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:244
msgid "Here is the inittab file for our rootdisk."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:251
#, no-wrap
msgid ""
"\t# cat > inittab\n"
"\tid:2:initdefault:\n"
"\tsi::sysinit:/etc/rc\n"
"\t1:12:respawn:/sbin/agetty tty1 9600\n"
"\t2:2:respawn:/sbin/agetty tty2 9600\n"
"\t^D\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:254
msgid ""
"All services on our boot/rootdisk booted CHILD are provided by local "
"files. So the creation of the nsswitch.conf looks like this:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:272
#, no-wrap
msgid ""
"\t# cat > nsswitch.conf\n"
"\tpasswd:     files\n"
"\tshadow:     files\n"
"\tgroup:      files\n"
"\thosts:      files\n"
"\tservices:   files\n"
"\tnetworks:   files\n"
"\tprotocols:  files\n"
"\trpc:        files\n"
"\tethers:     files\n"
"\tnetmasks:   files\n"
"\tbootparams: files\n"
"\tautomount:  files\n"
"\taliases:    files\n"
"\tnetgroup:   files\n"
"\tpublickey:  files\n"
"\t^D\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:276
msgid ""
"Oh, and somebody needs to be able to log into the CHILD. This should be the "
"person who builds it, what is done by the administrator ( of course ). So "
"we'll create passwd and group this way:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:283
#, no-wrap
msgid ""
"\t# cat > passwd\n"
"\troot::0:0:The cruely admin:/:bin/sh\n"
"\t^D\n"
"\t# cat > group\n"
"\troot::0:root\n"
"\t^D\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:286
msgid ""
"Be aware, that root doesn't have a password this way, so have the floppies "
"on a secure place."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:288
msgid "We'll use bash, so the profile could have the following form:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:295
#, no-wrap
msgid ""
"\t# cat > profile\n"
"\tPS1='LFS-BUILD : \\w \\$ '\n"
"\tPS2='>'\n"
"\tPATH=/MOTHER/sbin:/MOTHER/bin:/MOTHER/usr/bin:/bin:/sbin\n"
"\texport PS1 PS2 PATH\n"
"\t^D\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:298
msgid ""
"The floppy system will be dynamically linked, that's why we'll need "
"ld.so.conf and ld.so.cache too."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:303
#, no-wrap
msgid ""
"\t# cat > ld.so.conf\n"
"\t/lib\n"
"\t^D\n"
"\t# touch ld.so.cache\t# ( this is needed by ldconfig )\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:305
msgid ""
"In the case, the MOTHER uses ``termcap'' one will have to copy the termcap "
"file."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:307
#, no-wrap
msgid "\t# cp /etc/termcap .\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:309
msgid "In this case I advise, to delete all but the linux entry in this file."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:313
msgid ""
"In the case the MOTHER uses terminfo, one will have to copy the terminfo "
"database ( and create the appropriate directories ). For that case it should "
"be sufficient, to do a:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:316
#, no-wrap
msgid ""
"\t# mkdir -p /v_dsk/rootfs/usr/lib/terminfo/l\n"
"\t# cp /usr/lib/terminfo/l/linux /v_dsk/rootfs/usr/lib/terminfo/l\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:318
msgid "The location on the MOTHER obove is only an example."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:323
msgid ""
"This is all we need in /etc, and next we'll provide the programs in /bin and "
"/sbin. We'll \"borrow\" all the programs, which we need to boot and which "
"are not available from the static build, from the mother. I've already "
"mentioned theese above."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:337
#, no-wrap
msgid ""
"\t# cd /v_dsk/rootfs/sbin\n"
"\t# cp /sbin/agetty .\n"
"\t# cp /sbin/fdisk .\n"
"\t# cp /sbin/ifconfig .\n"
"\t# cp /sbin/init .\n"
"\t# cp /sbin/ldconfig .\n"
"\t# cp /sbin/mke2fs .\n"
"\t# cp /sbin/mkfs .\n"
"\t# cp /sbin/mkfs.ext2 .\n"
"\t# cp /sbin/mkswap .\n"
"\t# cp /sbin/modprobe .\n"
"\t# cp /sbin/route .\n"
"\t# cp /sbin/swapon .\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:344
#, no-wrap
msgid ""
"\t# cd /v_dsk/rootfs/bin\n"
"\t# cp /bin/bash .\n"
"\t# ln bash sh\n"
"\t# cp /bin/login .\n"
"\t# cp /bin/mount .\n"
"\t# cp /bin/umount .\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:350
msgid ""
"More we don't need to boot. Some of the utils above could be located in "
"other directories on YOUR MOTHER. You should use ``which'' to see where they "
"are and copy them to the appropriate location in /v_dsk/rootfs.  Note, that "
"THIS part of your floppy system is dynamically linked, so we have to provide "
"/lib too."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:352
#, no-wrap
msgid "\t# cd /v_dsk/rootfs/lib\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:355
msgid ""
"To see, which libs we need, we will have a look at every of the above "
"programs using ldd. Here is an example:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:371
#, no-wrap
msgid ""
"\t# ldd /sbin/agetty\n"
"\tlibc.so.6 => /lib/libc.so.6 (0x4001d000)\n"
"\t/lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)\n"
"\t# ls -l /lib/libc.so.6\n"
"\tlrwxrwxrwx 1 root root  13 Jul 13 16:15 /lib/libc.so.6 -> libc-2.2.3.so\n"
"\t# ls -l /lib/libc-2.2.3.so\n"
"\t-rwxr-xr-x 1 root root   1191848 Jul 13 10:59 /lib/libc-2.2.3.so\n"
"\t# cp /lib/libc-2.2.3.so .\n"
"\t# ln libc-2.2.3.so libc.so.6\n"
"\t# ls -l /lib/ld-linux.so.2\n"
"\tlrwxrwxrwx 1 root root 11 Jul 13 16:15 /lib/ld-linux.so.2 -> ld-2.2.3.so\n"
"\t# ls -l /lib/ld-2.2.3.so\n"
"\t-rwxr-xr-x 1 root root  94888 Jul 13 10:59 /lib/ld-2.2.3.so\n"
"\t# cp /lib/ld-2.2.3.so .\n"
"\t# ln ld-2.2.3.so ld-linux.so.2\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:383
msgid ""
"This must be done for all the programs in /bin and /sbin. One don't need to "
"copy libs already copied of course. In the example above, I used ``ls -l'' "
"to see, if this is a link or the lib itself. For the latter case I've copied "
"it, in the former case, I created a link too. Note that I use "
"hardlinks. This saves a lot of inodes on the floppy ( BTW: on a production "
"system this speeds up library loading ).  Don't forget to do the ``ldd''s "
"for the libs too.  This part of the population of the filesystem is ( due to "
"my experiences ) most error prone. So be careful to not forget anything.  "
"One library needed we probably won't find using the technique above: the NSS "
"library. We put ``files'' for everything into nsswitch.conf. So we need "
"only:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:386
#, no-wrap
msgid ""
"\t# cp /lib/libnss_files-2.2.3.so .\n"
"\t# ln libnss_files-2.2.3.so libnss_files.so.2\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:389
msgid ""
"One cuold have another version, so the name of the files is - again - only "
"an example."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:391
msgid "On MY example - MOTHER the content of /lib looks like this:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:405
#, no-wrap
msgid ""
"\t# ls -i\n"
"\t 210671 ld-2.2.3.so         210672 libext2fs.so.2\n"
"\t 210671 ld-linux.so.2       210672 libext2fs.so.2.4\n"
"\t 210670 libc-2.2.3.so       210676 libncurses.so\n"
"\t 210670 libc.so.6           210676 libncurses.so.5\n"
"\t 210673 libcom_err.so.2     210676 libncurses.so.5.2\n"
"\t 210673 libcom_err.so.2.0   210680 libnss_files-2.2.3.so\n"
"\t 210679 libcrypt-2.2.3.so   210680 libnss_files.so.2\n"
"\t 210679 libcrypt.so.1       210678 libshadow.so.0\n"
"\t 210677 libdl-2.2.3.so      210678 libshadow.so.0.0.0\n"
"\t 210677 libdl.so.2          210675 libuuid.so.1\n"
"\t 210674 libe2p.so.2         210675 libuuid.so.1.2\n"
"\t 210674 libe2p.so.2.3\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:409
msgid ""
"At this point we could provide kernel modules. I don't do this, because I'll "
"build a special kernel for the bootdisk, which everything needed has "
"directly built in, and everything not needed ( FOR THE BOOTDISK ) disabled."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:413
msgid ""
"At this point we are done with the population of the directory structure for "
"the root filesystem. So let's make it a real filesystem. First we'll create "
"a file for it."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:415
#, no-wrap
msgid "\t# dd if=/dev/zero of=/v_dsk/FSFILE bs=1k count=4096\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:417
msgid ""
"The initial ram-disk of the kernel is 4 MB, so I've created a file of this "
"size."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:419
#, no-wrap
msgid "\t# mke2fs -m 0 /v_dsk/FSFILE\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:423
msgid ""
"Here we'll get a warning about the fact, that we create a filesystem not "
"using a special block device, but that's exactly what we intend to do, and "
"we can ignore this ( say Y to the question mke2fs asks )."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:425
#, no-wrap
msgid "\t# mount -t ext2 -o loop /v_dsk/FSFILE /mnt\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:428
msgid ""
"Possibly the kernel of your MOTHER doesn't provide loopdevice support. In "
"this case you'll have to rebuild your kernel before running the last "
"command."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:435
#, no-wrap
msgid ""
"\t# cd /v_dsk/rootfs\n"
"\t# cp -a * /mnt\n"
"\t# cd /mnt\n"
"\t# chroot /mnt /sbin/ldconfig\n"
"\t# cd /v_dsk\n"
"\t# umount /mnt\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:437
msgid "Now put a newly formatted floppy disk into your mechanic and do:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:440
#, no-wrap
msgid ""
"\t# dd if=FSFILE bs=1k | gzip -v9 > rootfs.gz\n"
"\t# dd if=rootfs.gz of=/dev/fd0 bs=1k\t\t# ... and\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:442
msgid "umpf, we have our rootdisk."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:451
msgid ""
"Next we make the bootdisk. This contains only the kernel. I've coosen this "
"way for simplicity again. We could make a combined boot/rootdisk but we'd "
"have to take care for more aspects.  Making the kernel, we do the same "
"procedure as with every kernel rebuild. The kernel MUST support RAM-Disk, "
"INITRD and MUST have support for the NIC built in. Due to the fact, that we "
"will mount the MOTHER via NFS, we need NFS support of course. It MUST NOT "
"have devfs support, and it SHOULD NOT support things not necessary for a "
"bootdisk ( sound, isdn, NLS, ... )."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:454
msgid ""
"Next we make a bare bootdisk without LILO. Again, put a newly formatted "
"floppy into your drive. From your kernel source directory do:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:457
#, no-wrap
msgid ""
"\t# cd arch/i386/boot\n"
"\t# dd if=bzImage of=/dev/fd0 bs=1k\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:460
msgid ""
"The kernel make built a kernel set up for your harddisk. We have to change "
"this to have a kernel for the floppy."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:463
#, no-wrap
msgid ""
"\t# rdev /dev/fd0 /dev/fd0\n"
"\t# rdev -R /dev/fd0 0\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:467
msgid ""
"The last step for the bootdisk is to set up the ramdisk word. Bit 14 "
"indicates the kernel, that a ramdisk is to be load. Bit 15 indicates, that "
"the kernel should prompt for the insertion of the root floppy disk."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:471
#, no-wrap
msgid ""
"\t# echo $(( 2 ** 14 + 2 ** 15 ))\n"
"\t49152\n"
"\t# rdev -r /dev/fd0 49152\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:480
msgid ""
"At this point we have nearly everything prepared for our CHILD. The last we "
"do sitting on the MOTHER is to share /v_dsk/lfs to the child.  If your "
"MOTHER doesn't support NFS server, you'll have to recompile the kernel "
"again.  Now make sure, that the portmapper is started before inetd, and that "
"rpc.nfsd and rpc.mountd is started after inetd.  We have to edit "
"/etc/exports now, to enable the export we want. Evtl. we have to create this "
"file."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:484
#, no-wrap
msgid ""
"\t# cat > /etc/exports\n"
"\t/v_dsk/lfs\tADR.OF.THE.CLD(ro,insecure,no_root_squash)\n"
"\t^D\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:487
msgid ""
"Change ``ADR.OF.THE.CLD'' with the IP address, you have choosen for the "
"CHILD.  Now we apply the changes in /etc/exports."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:493
#, no-wrap
msgid ""
"\t# ps ax | grep mountd\n"
"\t132 ?        S      0:00 rpc.mountd\n"
"\t# ps ax | grep nfsd\n"
"\t135 ?        S      0:00 rpc.nfsd\n"
"\t# kill -1 132 135\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:496
msgid ""
"O.K., I know ... I could use some killall* or pidof here, but THIS works too "
"and everywhere."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:500
msgid ""
"The packages needed to build the system are naturally stored on the disks of "
"the MOTHER. It should be a good choice, to copy these to a location, the "
"CHILD will see later. On the example MOTHER these were in /usr/src/pkgs."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:503
#, no-wrap
msgid ""
"\t# cd /usr/src\n"
"\t# cp -a pkgs /v_dsk/lfs\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:505
msgid "This way, the CHILD will see the packages in /MOTHER/pkgs."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:508
msgid ""
"Finally we've reached the point, we can lift our ass from the chair in front "
"of the MOTHER."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:511
msgid ""
"Before you sit down again ( this time in front of the CHILD ), you should "
"have a cup or glass or bottle of some drink you prefer."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:514
#, no-wrap
msgid ""
"NOTE: If you choose bottle and your preferred drink is Whisky, I suggest "
"you\n"
"      NOT to continue before next day afternoon.\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:518
msgid ""
"Welcome back to the server - center. Take now the floppies made above and "
"sit down in front of the CHILD.  Put the boo .... I think we know how to "
"start a Linux box from floppies."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:520
msgid "We see:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:522
#, no-wrap
msgid "\t( none ) login: \n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:525
msgid ""
"That's o.k., we don't have a hostname yet. If login as ``root'' you should "
"get a prompt without supplying a password."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:527
#, no-wrap
msgid "\tLFS-BUILD : / #\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:530
msgid ""
"There is still one thing, what could be wrong at this point -- the "
"connection to the MOTHER."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:535
#, no-wrap
msgid ""
"\tLFS-BUILD : / # mount\n"
"\t/\t/dev/ram0\n"
"\tproc\t/proc\n"
"\t/MOTHER IP.OF.THE.MTR/v_dsk/lfs\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:537
msgid "If you see something like this, everything is fine."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:555
msgid ""
"We still don't have any space, to make the final build of the LFS to. So we "
"have to plan our filesystem layout now.  How this layout looks like, depends "
"of course heavily from the main tasks the machine is planned for.  A size of "
"the ``/'' filesystem of about 100MB is more than sufficient for Linux.  With "
"about 1GB for /usr we can build the whole system including X there, and will "
"still have some reserve. How much ``/tmp'' you plan is server dependent. I "
"suggest NOT to leave it on ``/''. This directory is word writeable, and "
"having something world writeable on ``/'' could lead to some kind of ``ROOT "
"FILESYSTEM FULL''. I usually plan about 500MB for ``/opt'' ( There I use to "
"have things like Netscape, GNOME, Windowmanagers etc. ). If there shall run "
"something with heavy logging or spooling, it's not a bad choice, to plan en "
"extra fs for ``/var''. One could plan some space for ``/usr/local''. I do "
"so, because I configure all subsystems special for a host ( proxy, "
"webserver, dhcp, dns ... )  to live there.  I'll give the fs-layout which I "
"use to set up for an experimantal server as an example:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:563
#, no-wrap
msgid ""
"\thda1\t/\t\t 100 MB\n"
"\thdb1\t/usr\t\t1000 MB\n"
"\thdb2\t/usr/local\t 500 MB\n"
"\thdb3\t/tmp\t\t 200 MB\n"
"\thdb5\t/var\t\t 200 MB\n"
"\thdb6\t/opt\t\t 500 MB\n"
"\thdb7\t/v_dsk\t\twhat remains on the HD I have\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:569
msgid ""
"I use to use a 100MB disk ( I have a couple of them ) as root-disks. hdb4 is "
"an extended partition, and the swap is on hdb8.  If you say: \"I don't wanna "
"wonder about this. So I'll place everything into one large partition.\" "
"however, nobody will bite you.  Don't forget to plan some swap space and to "
"create a partition for it."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:573
msgid ""
"Having the fiilesystem layout planned, we create the partitions with "
"``fdisk'' and the filesystems and swap on them with ``mke2fs'' and "
"``mkswap''. Last we can ( and should ) activate the swap space."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:576
msgid ""
"Onesmore we populate a filesystem, but this time the FINAL for the LFS "
"system.  I'll do this due to the example above, thus this could differ for "
"you."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:586
#, no-wrap
msgid ""
"\t# mount /dev/hda1 /mnt\n"
"\t# mkdir /mnt/{usr,tmp,var,opt,root,v_dsk}\n"
"\t# mount /dev/hdb1 /mnt/usr\n"
"\t# mkdir /mnt/usr/local\n"
"\t# mount /dev/hdb2 /mnt/usr/local\n"
"\t# mount /dev/hdb3 /mnt/tmp\n"
"\t# mount /dev/hdb5 /mnt/var\n"
"\t# mount /dev/hdb6 /mnt/opt\n"
"\t# mount /dev/hdb7 /mnt/v_dsk\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:589
#, no-wrap
msgid ""
"\t# mkswap /dev/hda8\n"
"\t# swapon /dev/hdb8\t# if not already done\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:591
msgid "Now set the LFS environment variable for the CHILD."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:594
#, no-wrap
msgid ""
"\t# export LFS=/mnt\n"
"\t# mkdir $LFS/usr/include\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:598
msgid ""
"I've choosen this point to install the kernel header files ( from chapter 5 "
").  This way we have only things NEEDED in $LFS, and we can SECURE say, that "
"the base system and the new system aren't wired in any kind."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:600
#, no-wrap
msgid "\t# mkdir $LFS{etc,lib}\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:603
msgid ""
"Here You should complete chapter 5. Remember, we still didn't the points "
"``Creating passwd and group files'' to the end of this chapter."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:606
msgid ""
"The ``.profile'' ( or bash_profile due to the book ) remains in $LFS/root "
"and should contain:"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:613
#, no-wrap
msgid ""
"\t# cat > $LFS/root/.profile\n"
"\tPS1='LFS-BUILD : \\w \\$ '\n"
"\tPS2='> '\n"
"\tPATH=/MOTHER/sbin:/MOTHER/bin:/MOTHER/usr/bin\n"
"\texport PS1 PS2 PATH\n"
"\t^D\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:617
msgid ""
"Here we are in a pinch a bit. We need ``chroot'', which is amongst the tools "
"imported from the MOTHER, but inside the chroot'ed environment we'll loose "
"all these tools."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:625
#, no-wrap
msgid ""
"\t# cd $LFS\n"
"\t# mkdir /mnt/MOTHER\n"
"\t# cp /MOTHER/usr/bin/chroot /bin\n"
"\t# umount /MOTHER\n"
"\t# mount -t nfs ADR.OF.THE.MTR:/v_dsk/lfs /mnt/MOTHER\n"
"\t# chroot $LFS /MOTHER/usr/bin/env -i HOME=/root TERM=$TERM \\\n"
"\t\t/MOTHER/bin/bash --login\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:627
msgid "... will solve this problem."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:630
msgid ""
">From here on You can follow the instructions of the LFS-BOOK chapter 4 ( "
"except the things already done ) and the remainder of chapter 6 to The End "
"..."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:632
msgid "... and You are done."
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:654
#, no-wrap
msgid ""
"Some final suggestion:\n"
"\tI broke the instructions of chapter 4 a bit. I didn't make the link\n"
"\tbetween ``/usr/doc'' and ``/usr/share/doc''. Instead I've created\n"
"\tboth directories. In ``/usr/doc'' I create for every package I install\n"
"\ta directory ``package-ver.s.ion'', and in these directory 2 files,\n"
"\tNOTES and URL. URL should be clear, and in NOTES I remember, how I've\n"
"\tconfigured the package. O.K., one could say: \"Leave the source tree\n"
"\tintact, and use config.status!\", but I don't have the TB disk, required\n"
"\tfor this, at hand just now :o(. One can choose another location for this\n"
"\tof course, but doing this at all will ease your administration later.\n"
"\tSure you know situations, when you read in a manpage: \"... If thisprog\n"
"\tis configured with superfeature enabled, you can use the --sf switch\n"
"\tto do superious things\". Or one plans to build and install newprog, and\n"
"\tthe INSTALL instructions say, that dependprog with neededfeature\n"
"\tenabled has to be installed first. In these cases this helps a lot.\n"
"\tAll the real doc goes to ``/usr/share/doc''.\n"
"\tIf you add --with-info-dir=/usr/share/info to every package you install,\n"
"\tyou'll get probably the most complete info directory you have ever \n"
"\tseen.\n"
"\tIf You'd choose this way to build Your LFS system, it's not a bad choice\n"
"\tto have a hardcopy of the LFS-BOOK at hand.\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:666
#, no-wrap
msgid ""
"\tYou don't need to use NFS. Of course it is possible, to use floppies to\n"
"\ttransfer the statics from the MOTHER to the CHILD. In this case you will\n"
"\tneed some more tools on your rootdisk.\n"
"\tOnce ( To say the truth, I did it twice. ) done this I changed NFS to\n"
"\tCD-ROM, having the static part on a CD and only the kernel on a combined\n"
"\tboot/rootdisk.\n"
"\tIt's - too - possible to make a complete system upgrade this way.\n"
"\tSimply replace the NFS mount with a mount of the partiton containing\n"
"\tthe lfs directory, and change the paths in the profile on the rootdisk\n"
"\tand in the chroot'ed environment accordingly. Then burn out all other\n"
"\tpartitions and build.\n"
msgstr ""

#. type: Plain text
#: origin/lfs_bare_build.txt:667
msgid "END OF LFS-BARE-BUILD hint"
msgstr ""
