# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/intel-c-compiler.txt:3
#, no-wrap
msgid ""
"AUTHOR:\tRobert Connolly <robert at linuxfromscratch dot org> (ashes)\n"
"\tDaniel Baumann <daniel.baumann at panthera-systems.net>\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:5
msgid "DATE: 2006-11-06"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:7
msgid "LICENSE: GNU General Public License"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:9
msgid "SYNOPSIS: Installing and using the Intel C/C++ compiler with LFS."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:12
msgid ""
"PRIMARY URL: "
"http://www.linuxfromscratch.org/hints/downloads/files/intel-c-compiler.txt"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:21
msgid ""
"DESCRIPTION: The Intel C/C++ compiler collection (ICC) is a full featured "
"compiler and debugger suite, which is close to compatible with the GNU C/C++ "
"compiler collection (GCC). ICC is made only for Intel chips and takes "
"advantage of Intel technology, such as Hyper-Threading, more than GCC "
"does. Software compiled with ICC usually performs better than if it were "
"compiled with GCC.  The performance difference can range between 2% and 40% "
"depending on the software and compiler flags. Most of the LFS base system "
"will compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:25
msgid ""
"The Intel compiler is not opensource. A non-commercial Linux user license is "
"available for application developers. This license does not expire but only "
"entitles you to upgrades for one year (you may be able to renew the "
"license)."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:28
msgid ""
"A commercial license allows you to distribute packages you built with ICC, "
"and costs up to $400. Discounts are available for students."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:31
msgid ""
"If you are using ICC for personal use, to help develop ICC, the "
"non-commercial application developer license is right for you."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:34
msgid ""
"There is a PDF document describing ICC-9.0 here: "
"http://cache-www.intel.com/cd/00/00/22/23/222301_222301.pdf"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:37
msgid "PREREQUISITES: - An Intel CPU (Intel-clones may not work)."
msgstr ""

#. type: Bullet: '- '
#: origin/intel-c-compiler.txt:40
msgid ""
"The Intel website says a PentiumII with 256MB of RAM is required to use "
"ICC-9.1."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:42
msgid "- Glibc (icc is linked to /lib/ld-linux.so.2)."
msgstr ""

#. type: Bullet: '- '
#: origin/intel-c-compiler.txt:45
msgid ""
"4GB of free space, above the LFS requirement, to be able to build DB, Bash, "
"and Perl with code profiling (they will be normal size when installed)."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:47
msgid "- This hint is for i86, but could be adapted for other Intel platforms."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:51
msgid ""
"HINT: The homepage for the Intel compiler (application developer license) is "
"here: "
"http://www.intel.com/cd/software/products/asmo-na/eng/compilers/clin/219856.htm"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:54
msgid ""
"The ICC-9.1 compiler is compatible with gcc-4.1 and supports the newest "
"Intel CPU's."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:58
msgid ""
"To obtain the Intel compiler, and user license, go to the homepage and "
"register. You should receive an email with a URL for the ICC tarball, and a "
"user license attachment."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:60
msgid "After that you should have two files (the versions may be different):"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:64
msgid "l_cc_c_9.1.042.tar.gz (279MB)  and NCOM_L_CMP_CPP_NZDM-FT472MJ3.lic"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:74
#, no-wrap
msgid ""
"*****************\n"
"Table of contents\n"
"*****************\n"
"\t- Installing ICC\n"
"\t\tInstalling ICC files\n"
"\t\tConfiguring ICC files\n"
"\t\tConfiguring system files\n"
"\t- Optimizations\n"
"\t- Building LFS packages\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:78
msgid ""
"# *************************************** # - INSTALLING ICC - Installing "
"ICC files # ***************************************"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:87
msgid ""
"# The rpm packages for ICC are designed to install ICC to /opt. This is # "
"convienient because ICC headers can overwrite libc headers, but is # "
"inconvienient because software built with ICC will be linked to /opt. I "
"don't # like /opt because I think it's redundent. So this hint installs ICC "
"to /usr, # and configures ICC to use private header directories so that ICC "
"will not # overwrite headers from other packages. Installing ICC to /usr is "
"also # compatible with any use, whether you want to use ICC for specific "
"software, # or use ICC to build most of LFS."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:90
msgid ""
"# ICC does not currently build Glibc, so ICC must be installed after Glibc, "
"# Binutils, and GCC, are installed in the chapter 6 chroot."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:92
msgid "# As a general rule, always apply GCC4 patches for packages if available."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:97
msgid ""
"# We need Cpio to unpack the ICC rpm packages. Cpio can be compiled in the # "
"chapter 6 chroot after Binutils. Follow the BLFS instructions: # "
"http://www.linuxfromscratch.org/blfs/view/svn/general/cpio.html # You can "
"rebuild Cpio with ICC later if you want."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:100
msgid ""
"# We also need the rpm2cpio script: # "
"http://www.rpm.org/tools/scripts/rpm2cpio.sh"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:102
msgid "# Install rpm2cpio to /usr:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:104
msgid "install -v rpm2cpio.sh /usr/bin/rpm2cpio"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:108
msgid ""
"# Set your ICC package version in the shell environment (you may need to # "
"modify the values for your version). This is done so that the rest of the # "
"commands in this hint can be copied and pasted:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:113
msgid ""
"export ICC_V_MAJOR=9 export ICC_V_MINOR=1 export ICC_V_PATCH=042 export "
"ICC_VERSION=\"${ICC_V_MAJOR}.${ICC_V_MINOR}.${ICC_V_PATCH}\""
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:115
msgid "# Unpack the Intel CC tarball and change to the data/ directory:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:118
msgid "tar zxvf l_cc_c_${ICC_VERSION}.tar.gz && cd l_cc_c_${ICC_VERSION}/data/"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:120
msgid "# Extract the rpm file for the C/C++ compiler:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:125
#, no-wrap
msgid ""
"rpm2cpio intel-icc?????-${ICC_VERSION}*.i386.rpm | \\\n"
"\tcpio --make-directories --extract --verbose &&\n"
"rm -vf opt/intel/cc/${ICC_VERSION}/bin/uninstall.sh &&\n"
"chown -vR 0:0 opt/\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:127
msgid "# Copy the files to /usr:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:134
msgid ""
"install -vd /usr/share/doc/icc-${ICC_VERSION} && mv -v "
"opt/intel/cc/${ICC_VERSION}/doc /usr/share/doc/icc-${ICC_VERSION} && mv -v "
"opt/intel/cc/${ICC_VERSION}/licenses /usr/share/doc/icc-${ICC_VERSION} && mv "
"-v opt/intel/cc/${ICC_VERSION}/man/man1/* /usr/share/man/man1 && install -vd "
"/usr/include/icc/ && mv -v opt/intel/cc/${ICC_VERSION}/include/* "
"/usr/include/icc"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:136
msgid "# The iccvars.*sh files are shell startup/profile files, and belong in /etc:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:139
msgid ""
"mv -v opt/intel/cc/${ICC_VERSION}/bin/iccvars.*sh /etc && mv -v "
"opt/intel/cc/${ICC_VERSION}/bin/* /usr/bin"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:141
msgid "# Runtime libraries should be installed to /lib:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:145
msgid ""
"mv -v opt/intel/cc/${ICC_VERSION}/lib/libirc.so /lib && mv -v "
"opt/intel/cc/${ICC_VERSION}/lib/libsvml.so /lib && mv -v "
"opt/intel/cc/${ICC_VERSION}/lib/libimf.so /lib"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:147
msgid "# The rest of the libraries can go in /usr/lib:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:151
msgid ""
"mv -v opt/intel/cc/${ICC_VERSION}/lib/locale /usr/lib/locale && mv -v "
"opt/intel/cc/${ICC_VERSION}/lib/* /usr/lib && rm -rf opt/"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:153
msgid "# Extract the rpm and tar files for the ICC headers:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:163
#, no-wrap
msgid ""
"rpm2cpio intel-isubh*-${ICC_VERSION}*.i386.rpm \\\n"
"\t| cpio --make-directories --extract --verbose &&\n"
"tar -zvxf opt/intel/cc/${ICC_VERSION}/substitute_headers/libio.tar.gz -C "
"\\\n"
"\topt/intel/cc/${ICC_VERSION}/substitute_headers/ &&\n"
"chown -vR 0:0 opt/ &&\n"
"find opt/intel/cc/${ICC_VERSION}/substitute_headers/libio -type d \\\n"
"\t-exec chmod -v 755 {} \\; &&\n"
"find opt/intel/cc/${ICC_VERSION}/substitute_headers/libio -type f \\\n"
"\t-exec chmod -v 644 {} \\;\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:165
msgid "# Install the ICC headers:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:169
#, no-wrap
msgid ""
"mv -v opt/intel/cc/${ICC_VERSION}/substitute_headers/libio/* \\\n"
"\t/usr/include/icc &&\n"
"rm -rf opt/\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:171
msgid "# Extract the rpm for the debugger:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:176
#, no-wrap
msgid ""
"rpm2cpio intel-iidb*-${ICC_VERSION}*.i386.rpm | \\\n"
"\tcpio --make-directories --extract --verbose &&\n"
"rm -vf opt/intel/idb/${ICC_VERSION}/bin/uninstall.sh\n"
"chown -vR 0:0 opt/\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:178
msgid "# Install the ICC debugger, idbvars.sh belongs in /etc:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:184
msgid ""
"mv -v opt/intel/idb/${ICC_VERSION}/bin/idbvars.*sh /etc && mv -v "
"opt/intel/idb/${ICC_VERSION}/bin/* /usr/bin && mv -v "
"opt/intel/idb/${ICC_VERSION}/doc /usr/share/doc/idb-${ICC_VERSION} && mv -v "
"opt/intel/idb/${ICC_VERSION}/man/man1/* /usr/share/man/man1 && rm -rf opt/"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:188
msgid ""
"# **************************************** # - INSTALLING ICC - Configuring "
"ICC files # ****************************************"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:191
msgid ""
"# The compiler suite is installed. Now we set it up. First install the # "
"license file:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:193
msgid "install -v -m444 *.lic /usr/share/doc/icc-${ICC_VERSION}/licenses/"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:195
msgid "# Configure the compiler:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:199
#, no-wrap
msgid ""
"sed -e \\\n"
"\"s/<installpackageid>/l_cc_c_${ICC_V_MAJOR}\\.${ICC_V_MINOR}\\.${ICC_V_PATCH}/\" "
"\\\n"
"\t-i /usr/share/doc/icc-${ICC_VERSION}/doc/csupport\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:204
#, no-wrap
msgid ""
"sed -e \\\n"
"\"s/<INSTALLDIR>\\/licenses/\\/usr\\/share\\/doc\\/icc-${ICC_VERSION}\\/licenses/g\" "
"\\\n"
"\t-e 's/<INSTALLDIR>\\/bin/\\/usr\\/bin/g' \\\n"
"\t-e 's/<INSTALLDIR>\\/lib/\\/usr\\/lib/g' -i /usr/bin/icc\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:209
#, no-wrap
msgid ""
"sed -e \\\n"
"\"s/<INSTALLDIR>\\/licenses/\\/usr\\/share\\/doc\\/icc-${ICC_VERSION}\\/licenses/g\" "
"\\\n"
"\t-e 's/<INSTALLDIR>\\/bin/\\/usr\\/bin/g' \\\n"
"\t-e 's/<INSTALLDIR>\\/lib/\\/usr\\/lib/g' -i /usr/bin/icpc\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:215
#, no-wrap
msgid ""
"sed -e \\\n"
"\"s/<INSTALLDIR>\\/licenses/\\/usr\\/share\\/doc\\/icc-${ICC_VERSION}\\/licenses/g\" "
"\\\n"
"\t-e 's/<INSTALLDIR>\\/bin/\\/usr\\/bin/g' \\\n"
"\t-e 's/<INSTALLDIR>\\/lib/\\/usr\\/lib/g' \\\n"
"\t-e 's/<INSTALLDIR>\\/man/\\/usr\\/share\\/man/g' -i /etc/iccvars.csh\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:221
#, no-wrap
msgid ""
"sed -e \\\n"
"\"s/<INSTALLDIR>\\/licenses/\\/usr\\/share\\/doc\\/icc-${ICC_VERSION}\\/licenses/g\" "
"\\\n"
"\t-e 's/<INSTALLDIR>\\/bin/\\/usr\\/bin/g' \\\n"
"\t-e 's/<INSTALLDIR>\\/lib/\\/usr\\/lib/g' \\\n"
"\t-e 's/<INSTALLDIR>\\/man/\\/usr\\/share\\/man/g' -i /etc/iccvars.sh\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:223
msgid "source /etc/iccvars.sh"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:225
msgid "# If you get \"bash: manpath: command not found\", don't worry about it."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:227
msgid "# Configure the Intel debugger:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:231
#, no-wrap
msgid ""
"sed -e \\\n"
"\"s/<installpackageid>/l_cc_c_${ICC_V_MAJOR}\\.${ICC_V_MINOR}\\.${ICC_V_PATCH}/\" "
"\\\n"
"\t-i /usr/share/doc/idb-${ICC_VERSION}/idbsupport\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:236
#, no-wrap
msgid ""
"sed -e \\\n"
"\"s/<INSTALLDIR>\\/licenses/\\/usr\\/share\\/doc\\/icc-${ICC_VERSION}\\/licenses/g\" "
"\\\n"
"\t-e 's/<INSTALLDIR>\\/bin/\\/usr\\/bin/g' \\\n"
"\t-e 's/<INSTALLDIR>\\/man/\\/usr\\/share\\/man/g' -i /etc/idbvars.csh\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:241
#, no-wrap
msgid ""
"sed -e \\\n"
"\"s/<INSTALLDIR>\\/licenses/\\/usr\\/share\\/doc\\/icc-${ICC_VERSION}\\/licenses/g\" "
"\\\n"
"\t-e 's/<INSTALLDIR>\\/bin/\\/usr\\/bin/g' \\\n"
"\t-e 's/<INSTALLDIR>\\/man/\\/usr\\/share\\/man/g' -i /etc/idbvars.sh\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:243
msgid "source /etc/idbvars.sh"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:245
msgid "# - INSTALLING ICC - Configuring system files:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:250
msgid ""
"# ICC links programs to libgcc_s.so. On an LFS system libgcc_s.so is in # "
"/usr/lib. On some systems libgcc_s.so is in /lib. If you plan to install # "
"software built with ICC to /bin or /sbin, you should move libgcc_s.so to # "
"/lib if it is not already there (this is recommended):"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:254
msgid ""
"mv -v /usr/lib/libgcc_s.so.1 /lib/ && rm -v /usr/lib/libgcc_s.so && ln -vs "
"libgcc_s.so.1 /lib/libgcc_s.so"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:257
msgid ""
"# We also need to tell ICC where to find the headers we installed to # "
"/usr/include/icc:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:261
msgid ""
"echo \"-I/usr/include/icc\" >> /usr/bin/icc.cfg echo \"-I/usr/include/icc\" "
">> /usr/bin/icpc.cfg echo \"-I/usr/include/icc/c++\" >> /usr/bin/icpc.cfg"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:263
msgid "# Now we can use the Intel compiler."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:265
msgid "# Test ICC to see that it is working:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:270
msgid ""
"echo \"int main () {return 0;}\" > /tmp/main.c && icc -o /tmp/main "
"/tmp/main.c && /tmp/main && rm /tmp/main{,.c}"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:272
msgid "# If there are no errors then it worked."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:274
msgid "# You can unset these now:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:276
msgid "unset ICC_VERSION ICC_V_MAJOR ICC_V_MINOR ICC_V_PATCH"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:278
msgid "# Now we can configure the system to use ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:284
msgid ""
"# Configure a GNU autoconf site file for ICC. This makes this hint shorter, "
"# and our lives easier. GNU ./configure scripts will search for # "
"\"${prefix}/share/config.site\" and use it to source environment variables.  "
"# Alternately you can put, and name, the \"config.site\" anywhere and set # "
"the CONFIG_SITE environment variable to point to it:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:294
msgid ""
"cat > /usr/share/config.site-icc << \"EOF\" CC=\"icc\" CXX=\"icpc\" "
"LD=\"xild\" AR=\"xiar\" LANG=\"en\" LANGUAGE=\"en\" LC_ALL=\"C\" EOF"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:297
msgid ""
"# If you want to build most of your LFS system with ICC you should export # "
"this site configuration:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:299
msgid "export CONFIG_SITE=\"/usr/share/config.site-icc\""
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:301
msgid "# If you only want to use ICC for specific packages then you can use this:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:303
msgid "env CONFIG_SITE=\"/usr/share/config.site-icc\" ./configure..."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:307
msgid "# *************** # - Optimizations # ***************"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:310
msgid ""
"# Now you can read the ICC man pages for more information about its features "
"# and usage."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:313
msgid ""
"# You should also look at: # "
"http://gentoo-wiki.com/HOWTO_ICC_and_Portage#CFLAGS"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:316
msgid ""
"# and: # "
"http://sc.tamu.edu/help/intel/9.0/main_cls/mergedProjects/optaps_cls/whnjs.htm"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:319
msgid ""
"# I scribbled some notes while reading the ICC man page, and posted them "
"here: # http://www.linuxfromscratch.org/~robert/new/icc-cflag-notes.txt"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:322
msgid ""
"# We can add our optimizations to the ICC config file. This is what I use "
"for # my Prescott:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:324
msgid "# The -xP optimization is just like GCC's -march=prescott:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:327
msgid "echo \"-xP\" >> /usr/bin/icc.cfg echo \"-xP\" >> /usr/bin/icpc.cfg"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:329
msgid "# Note that -axP is just like '-march=i586 -mtune=prescott'."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:333
msgid ""
"# The -fomit-frame-pointer optimization removes frame pointers from object # "
"code, and makes it perform better. Note that this option makes programs # "
"harder to debug:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:336
msgid ""
"echo \"-fomit-frame-pointer\" >> /usr/bin/icc.cfg echo "
"\"-fomit-frame-pointer\" >> /usr/bin/icpc.cfg"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:341
msgid ""
"# The -mno-ieee-fp optimization disables floating-point precision. This "
"breaks # ANSI conformance but increases performance. This can break some "
"software, # if it does then add -mp to CFLAGS. Note that this option makes "
"programs # harder to debug:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:344
msgid ""
"echo \"-mno-ieee-fp\" >> /usr/bin/icc.cfg echo \"-mno-ieee-fp\" >> "
"/usr/bin/icpc.cfg"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:349
msgid ""
"# The -no-prec-div optimization disables floating-point division "
"computations.  # Note that the man page entry for this option is not "
"completely correct, # check google for this option. Note that this option "
"makes programs harder # to debug:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:352
msgid ""
"echo \"-no-prec-div\" >> /usr/bin/icc.cfg echo \"-no-prec-div\" >> "
"/usr/bin/icpc.cfg"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:355
msgid ""
"# The -rcd enabled fast float-to-int conversions. This option breaks ANSI # "
"conformance:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:358
msgid "echo \"-rcd\" >> /usr/bin/icc.cfg echo \"-rcd\" >> /usr/bin/icpc.cfg"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:360
msgid "# This option tells ICC which GCC version to be compatable with:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:363
msgid ""
"echo \"-gcc-version=410\" >> /usr/bin/icc.cfg echo \"-gcc-version=410\" >> "
"/usr/bin/icpc.cfg"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:369
msgid ""
"# Use -no-gcc to break GCC compatability. This will perform better, and some "
"# packages will need this. Libraries compiled with ICC should get -gcc # "
"added to CFLAGS, so that programs compiled with GCC can use the libraries # "
"compiled with ICC. I will provide commands to add -gcc to LFS packages, # "
"but you need to keep this in mind with BLFS packages:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:372
msgid "echo \"-no-gcc\" >> /usr/bin/icc.cfg echo \"-no-gcc\" >> /usr/bin/icpc.cfg"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:378
msgid ""
"# Software-based Speculative Pre-computation (-ssp) performs thread based # "
"prefetching and takes advantage of hyper-threading. This option increases # "
"performance signicicantly. See google for more information. This option # "
"should not go together with -prof_gen, but -prof_use is okay. It might # "
"depend on profrun. This is 5 stage profiling:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:384
msgid ""
"-prof-gen ./a.out -prof-gen-sampling -prof-use profrun -dcache ./a.out "
"-prof-use -ssp"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:387
msgid ""
"# The newer Pentium4 cpus perform Hardware-based Speculative "
"Pre-computation, # so I have never tried to use the -ssp option."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:392
msgid ""
"# The -ansi-alias optimization will add additional optimizations but must # "
"only be used if the package adheres to the ISO C Standard. The -strict-ansi "
"# option should be used with -ansi-alias, to make sure the source comforms # "
"to ansi."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:398
msgid ""
"# Interprocedural optimizations (-ipo) is a fantastic feature which "
"optimizes # code at link time, including expanding inline functions across "
"multiple # files. This is equivilent to combining all the source code into a "
"single # file. This allows the compiler to make better judgements. This "
"option can # be very particular and error prone (at compile time)."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:402
msgid ""
"# The -ipo option can take an integer argument to specify the limit of "
"output # files it can generate. By default the limit is 1. -ipo0 will allow "
"the # compiler to decide how many object files to create depending on their "
"size."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:406
msgid ""
"# The -Ob2 optimization adds -ip, a subset of -ipo but for single file # "
"compilation, and inlines functions at the compiler's descretion. This # "
"option can be used with all code."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:413
msgid ""
"# -Ob2, -ip, and -ipo can not be used during profile generation (see below)  "
"# and will cause a compiler warning if we try. If you decide not to profile "
"# your packages then you can add -ipo0 or -Ob2 to the icc.cfg and icpc.cfg # "
"files. Using -ipo0 on the command line will supersede -ip and -Ob2 in # "
"icc.cfg. If you do not plan to use profiling then you can add -ipo0 to the # "
"icc.cfg and icpc.cfg files."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:421
msgid ""
"# The -fast option enables \"-O3 -ipo -static -no-prec-div -xP\". Make sure "
"# your cpu works with the -xP (pentium4 sse3) optimization before using "
"-fast.  # Because this optimization statically links programs I do not "
"suggest building # most packages with it. Statically linked programs do not "
"share virtual # memory, and will eventually consume all memory when most of "
"the system is # statically linked. I do suggest using -fast with programs "
"which are freed # from memory quickly and are not run often, like Bzip2."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:424
msgid ""
"# The -ipo option does not work with private static libraries, which most # "
"packages have. So -ipo has to be surgically added."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:428
msgid ""
"# In ICC the -g option will disable the default -O2 optimization, unless # "
"-O1/-O2/-O3 are used on the command line. Setting CFLAGS in the environment "
"# will remove the -g option from most packages."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:440
msgid ""
"# Packages configured with Libtool add the --with-pic configure switch. This "
"# switch will build both shared and static libraries with -fPIC. We can take "
"# advantage of this by adding -gcc beside -fPIC so that -gcc will only be # "
"added to libraries, and not the programs. There is a disadvantage too.  # "
"Static libraries compiled with -fPIC will perform slightly slower, however # "
"in LFS we link almost everything dynamically, so this should not become an # "
"issue. In this hint I will provide instructions to add -gcc beside -fPIC # "
"to make shared libraries GCC compatable, but not the static libraries. If # "
"the static libraries cause issues for you, you should rebuild the package # "
"with --with-pic. This way if you compile programs statically with ICC they # "
"will perform as well as possible."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:450
msgid ""
"# Profile-guided optimizations works by first compiling a program, or "
"library, # with profile generation (-prof_gen). When that program is "
"executed it will # generate data files with details about how the program "
"works at runtime, # such as which functions are called the most and how they "
"relate to other # functions. Then the program is recompiled to use the "
"profiling data with # -prof_use. This means compiling the package twice, but "
"also means the # installed package will perform as well as possible. You do "
"not have to do # this, but I do. If you choose not to profile your packages "
"you can skip # much of the rest of this hint and simply use the config.site "
"file as-is."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:459
msgid ""
"# Rather than resetting our CFLAGS twice for every profiled package, it's # "
"easier to use a script. Some packages use 'libtool' to build packages, # and "
"using 'make CC=\"icc -prof_gen\"' for these packages will not work. When # "
"profiling packages I suggest reconfiguring them. Also, some packages do not "
"# use CFLAGS/CXXFLAGS for all components because the package developer may # "
"not want particular parts of the programs optimized. So it is best to modify "
"# the CC/CXX environment variables, instead of CFLAGS/CXXFLAGS, when using # "
"-prof_gen and -prof_use."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:462
msgid ""
"# The following commands will add the profiling options to a few scripts, # "
"including additional optimizations when profile data is being used:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:477
msgid ""
"cat > /usr/bin/prof_gen-env << \"EOF\" unset CONFIG_SITE export LANG=\"en\" "
"export LANGUAGE=\"en\" export LC_ALL=\"C\" export LD=\"xild\" export "
"AR=\"xiar\" export CFLAGS=\"-O2\" export CXXFLAGS=\"-O2\" export CC=\"icc "
"-prof_gen -prof_dir=$(pwd)\" export CXX=\"icpc -prof_gen -prof_dir=$(pwd)\" "
"\"$@\" EOF chmod -v +x /usr/bin/prof_gen-env"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:492
msgid ""
"cat > /usr/bin/prof_use-env << \"EOF\" unset CONFIG_SITE export LANG=\"en\" "
"export LANGUAGE=\"en\" export LC_ALL=\"C\" export LD=\"xild\" export "
"AR=\"xiar\" export CFLAGS=\"-O2 -ipo0\" export CXXFLAGS=\"-O2 -ipo0\" export "
"CC=\"icc -prof_use -prof_dir=$(pwd)\" export CXX=\"icpc -prof_use "
"-prof_dir=$(pwd)\" nice -n 19 \"$@\" EOF chmod -v +x /usr/bin/prof_use-env"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:507
msgid ""
"cat > /usr/bin/prof_use-fast-env << \"EOF\" unset CONFIG_SITE export "
"LANG=\"en\" export LANGUAGE=\"en\" export LC_ALL=\"C\" export LD=\"xild\" "
"export AR=\"xiar\" export CFLAGS=\"-O3 -fast -ipo0\" export CXXFLAGS=\"-O3 "
"-fast -ipo0\" export CC=\"icc -prof_use -prof_dir=$(pwd)\" export CXX=\"icpc "
"-prof_use -prof_dir=$(pwd)\" nice -n 19 \"$@\" EOF chmod -v +x "
"/usr/bin/prof_use-fast-env"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:512
msgid ""
"# For some reason most GNU ./configure scripts do not pass environment set # "
"AR to Makefile. We need to use Intel's AR, not GNU's. So we need to create # "
"a 'make' wrapper script which will always override the AR variable. I added "
"# LD for good measure:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:517
msgid ""
"cat > /usr/bin/icc-make << \"EOF\" nice make AR=\"xiar\" LD=\"xild\" \"$@\" "
"EOF chmod -v +x /usr/bin/icc-make"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:519
msgid "# Use 'icc-make' instead of 'make' whenever you are compiling with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:523
msgid ""
"# *********************** # - Building LFS packages # "
"***********************"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:527
msgid ""
"# To build packages without profiling then './configure && icc-make'. The # "
"/usr/share/config.site-icc file will be used. You may want to add # \"-O2 "
"-ipo0\" to CFLAGS and CXXFLAGS in /usr/share/config.site-icc:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:530
msgid ""
"echo 'CFLAGS=\"-ipo0 -O2\"' >> /usr/share/config.site-icc echo "
"'CXXFLAGS=\"-ipo0 -O2\"' >> /usr/share/config.site-icc"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:535
msgid ""
"# Some packages, such as Perl and Bash, generate large amounts of profiling "
"# data. You can expect these packages to use 4GB of storage, and more, "
"during # the build. Packages which generate especially large amounts of "
"profiling # data also take a lot of system resources to process this data."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:539
msgid ""
"# Some packages do not have testsuites, so we can not easily generate "
"profiling # data for them. With small packages we can manually run common "
"commands to # generating the profiling data."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:545
msgid ""
"# Beware I have frozen my system while computing profiling data (with "
"Perl).  # Since then I began using 'nice -n 19' when using -prof_use, and "
"have not # frozen my system since. You can renice your whole login... first "
"find your # process ID for your LFS chroot with 'ps a | grep "
"/tools/bin/bash', and then # 'renice 10 -p ???'."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:553
msgid ""
"# The truely best way to generate profiling data is to install the "
"programs.  # This way the program will be profiled against your specific "
"system and uses.  # If you wish to do this, I'll let you modify the "
"following instructions. You # will need to store the profiling data in a "
"dedicated directory, like # /home/icc/prof_data/coreutils, reboot the system "
"and run it normally for a # few days, then rebuild with make-icc-prof_use "
"(-prof_use). I have never # tried this."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:555
msgid "# In general, to profile packages, we would do something like this:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:563
msgid ""
"prof_gen-env ./configure && icc-make && icc-make check && icc-make distclean "
"&& prof_use-env ./configure && icc-make && icc-make install"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:565
msgid "# Packages (in the \"Linux From Scratch - Version SVN-20061029\" order):"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:568
msgid ""
"# You should unset environment CFLAGS/CXXFLAGS, if you set them, so that # "
"ICC will use the optimizations in the icc config files."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:570
msgid "# You should also run the testsuies whether you are using profiling or not."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:577
msgid ""
"# - Berkeley DB (and TCL)  # DB compiles with ICC, but the testsuite does "
"not work without a full # installation of TCL. Berkeley DB's testsuite takes "
"about 150 SBU (many hours)  # to complete. If you are not prepared to do "
"that then simply install Berkeley # DB without profiling, like the LFS book "
"does. These tests will also use # about 4GB of space."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:584
msgid ""
"# If you want to profile Berkeley DB then install TCL from the BLFS book.  # "
"Berkeley DB and TCL contain libraries, so you may want to add the -gcc # "
"option. I built my system using ICC as much as possible, so I did not build "
"# these libraries with -gcc because I have no compatability to worry about.  "
"# TCL can also be profiled with ICC. If you want GCC compatability with "
"TCL's # libraries then run this command:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:586
msgid "sed -e 's/-.*PIC/& -gcc /' -i unix/configure"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:589
msgid ""
"# To profile TCL (make sure the ./configure --options are the same as in the "
"# BLFS book):"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:594
msgid ""
"cd unix && prof_gen-env ./configure --prefix=/usr --enable-threads && "
"icc-make && icc-make test"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:598
msgid ""
"# TCL will fail several tests because networking does not work, and will "
"also # complain about the profiling data files being left behind, that's "
"fine. Then # rebuild TCL to use the profile data and -ipo:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:602
msgid ""
"icc-make distclean && prof_use-env ./configure --prefix=/usr "
"--enable-threads && icc-make"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:604
msgid "# You can 'make test' again if you're paranoid. Then install TCL."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:606
msgid "# We need GCC compatability with Berkeley DB libraries for Man-DB:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:608
msgid "sed -e 's/-.*PIC/& -gcc /' -i dist/configure"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:611
msgid ""
"# Build Berkeley DB just like TCL, with the prof_gen-env and prof_use-env # "
"scripts. Also add TCL and tests to the configure command:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:616
#, no-wrap
msgid ""
"cd build_unix &&\n"
"prof_gen-env ../dist/configure --prefix=/usr --enable-cxx \\\n"
"\t--enable-tcl --with-tcl=/usr/lib --enable-test &&\n"
"icc-make\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:618
msgid "# Then to run the testsuite open the tclsh shell:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:620
msgid "tclsh"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:622
msgid "# At the % promt run the tests (this will take hours):"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:626
msgid "source ../test/test.tcl run_parallel 5 run_std exit"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:628
msgid "# Then clean Berkeley DB and rebuild:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:633
#, no-wrap
msgid ""
"icc-make realclean &&\n"
"prof_gen-env ../dist/configure --prefix=/usr --enable-cxx \\\n"
"\t--enable-tcl --with-tcl=/usr/lib &&\n"
"icc-make\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:635
msgid "# Then install Berkeley DB."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:638
msgid ""
"# - E2fsprogs # E2fsprogs does not build properly with ICC. Build E2fsprogs "
"with GCC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:641
msgid "env -u CONFIG_SITE ../configure...  make"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:644
msgid "# - Coreutils # Build Coreutils with profiling:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:647
msgid "prof_gen-env ./configure --prefix=/usr && icc-make"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:650
msgid ""
"# Then run the testsuite, distclean, and rebuild with the profiling # "
"information:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:653
msgid "prof_use-env ./configure --prefix=/usr && icc-make"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:655
msgid "# Then install Coreutils."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:657
msgid "# - Iana-Etc has nothing to compile."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:660
msgid "# - M4 # M4 is typical. Build and install it just like Coreutils."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:663
msgid "# - Bison: # Bison is a typical build, like M4."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:667
msgid ""
"# - Ncurses # Ncurses builds with ICC, but I had serious issues with "
"Bash. So for now # I suggest building Ncurses with GCC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:669 origin/intel-c-compiler.txt:716 origin/intel-c-compiler.txt:801 origin/intel-c-compiler.txt:965 origin/intel-c-compiler.txt:977
msgid "env -u CONFIG_SITE ./configure..."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:673
msgid ""
"# - Procps does not compile with ICC. It will compile with GCC by default.  "
"# If you really want a pure ICC system, you can use the Procps utilities "
"from # Busybox."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:678
msgid ""
"# - Sed # I compile Sed with -fast. If you don't want to, and/or you are not "
"using # the -xP optimization, then build Sed like Coreutils. To build Sed "
"with # -fast:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:685 origin/intel-c-compiler.txt:792
msgid ""
"prof_gen-env ./configure...  icc-make icc-make check icc-make distclean "
"prof_use-fast-env ./configure...  icc-make"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:687
msgid "# Then install Sed."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:691
msgid ""
"# - Libtool # 'libtool' itself is a script, but the package includes a "
"library. To add # GCC compatability (this is optional):"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:693
msgid "sed -e 's/^CFLAGS =/& -gcc/' -i libltdl/Makefile.in"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:696
msgid ""
"# Then profile Libtool like Coreutils, but use 'make clean' instead of # "
"'distclean'."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:702
msgid ""
"# - Perl # Since I started using AR=\"xiar\" I have not been able to get "
"Perl to build # with ICC. Even without AR=\"xiar\" Perl will fail a couple "
"tests. For these # reasons I suggest building Perl with GCC. Just build Perl "
"normally, it will # ignore the config.site file."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:705
msgid "# - Readline # Readline is a library and you may want to add -gcc (I don't):"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:707
msgid "sed -e 's/^CFLAGS =/& -gcc/' -i {,shlib/}Makefile.in"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:711
msgid ""
"# Readline does not have a testsuite, so it can not easily be "
"profiled. Build # it normally and it will use the config.site file to use "
"ICC. Remember to # use 'icc-make'."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:714
msgid ""
"# - Zlib can compile with ICC, but X11 will not be able to link to it even "
"if # -gcc is used, so I do not suggest it. To build Zlib with GCC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:718
msgid "# - Autoconf and Automake are perl scripts."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:725
msgid ""
"# - Bash # Bash-3.1 can compile with ICC, and bash-3.2 does not. I do not "
"suggest # using Bash-3.2 because I had bad expirence with it (it's screwy).  "
"# Bash-3.1 can be built with profiling, but not with -ipo. Remember to use # "
"the bash-3.1 upstream patch. The Bash sources directory will grow to almost "
"# 3GB with profiling data. Build Bash like this:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:734
#, no-wrap
msgid ""
"prof_gen-env ./configure...\n"
"icc-make\n"
"icc-make tests\n"
"icc-make distclean\n"
"nice -n 19 env -u CONFIG_SITE LANG=\"en\" LANGUAGE=\"en\" LC_ALL=\"C\" \\\n"
"\tLD=\"xild\" AR=\"xiar\" CC=\"icc -prof_use -prof_dir=$(pwd)\" \\\n"
"\t./configure...\n"
"icc-make\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:736
msgid "# Then install Bash."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:740
msgid ""
"# - Bzip2 # I'm building bzip2.so,a with -ipo, and bzip2 and bzip2recover "
"with -fast.  # If you are not using -xP then change -fast to -ipo0."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:748
#, no-wrap
msgid ""
"icc-make CC=icc CFLAGS=\"-prof_gen -prof_dir=$(pwd) \\\n"
"\t-D_FILE_OFFSET_BITS=64 -O2\" \\\n"
"\tAR=xiar LD=xild -f Makefile-libbz2_so &&\n"
"icc-make clean &&\n"
"icc-make CC=icc CFLAGS=\"-prof_gen -prof_dir=$(pwd) \\\n"
"\t-D_FILE_OFFSET_BITS=64 -O2\" \\\n"
"\t\tAR=xiar LD=xild\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:752
msgid ""
"# The bzip2 testsuite tests the bzip2 which has libbz2.a linked to it, so # "
"the libbz2.so shared libraries doesn't get tested and doesn't generate # "
"profiling data. We can do this ourselves:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:760
#, no-wrap
msgid ""
"dd if=/dev/urandom of=urandom.file bs=1M count=17\n"
"env LD_PRELOAD=./libbz2.so.1.0 ./bzip2-shared urandom.file\n"
"env LD_PRELOAD=./libbz2.so.1.0 ./bzip2-shared -d urandom.file.bz2\n"
"cat CHANGES LICENSE bzip2 | \\\n"
"\tenv LD_PRELOAD=./libbz2.so.1.0 ./bzip2-shared -4 -c > non-random.bz2\n"
"env LD_PRELOAD=./libbz2.so.1.0 ./bzip2-shared -d non-random.bz2\n"
"env LD_PRELOAD=./libbz2.so.1.0 ./bzip2-shared --help\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:762
msgid "# Then rebuild Bzip2 with the profiling data:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:770
#, no-wrap
msgid ""
"icc-make clean &&\n"
"icc-make -f Makefile-libbz2_so clean &&\n"
"icc-make CC=icc CFLAGS=\"-prof_use -prof_dir=$(pwd) -O -gcc -ipo0 -O2 \\\n"
"\t-D_FILE_OFFSET_BITS=64\" AR=xiar LD=xild -f Makefile-libbz2_so &&\n"
"icc-make clean &&\n"
"icc-make CC=icc CFLAGS=\"-prof_use -prof_dir=$(pwd) -D_FILE_OFFSET_BITS=64 "
"\\\n"
"\t-ipo0 -fast\" AR=xiar LD=xild\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:773
msgid ""
"# Then when installing bzip2, do not install the 'bzip2-shared' version, # "
"install the statically linked (with -fast) 'bzip2' file instead."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:776
msgid ""
"# - Diffutils does not have a testsuite. You can build it with ICC the way "
"the # LFS book builds Diffutils. Remember to use 'icc-make'."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:779
msgid ""
"# - File # File builds with ICC, and does not have a testsuite, just like "
"Diffutils."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:785
msgid ""
"# - Findutils # Findutils can be compiled with ICC profiling, just like "
"Coreutils or M4.  # I compile Findutils with -fast because 'find' and "
"'locate' usually do # intense operations and don't stay in memory after. To "
"build Findutils with # -fast:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:794
msgid "# Then install Findutils."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:797
msgid "# - Flex # Build and install Flex typically, like Coreutils and M4."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:799
msgid "# - Grub does not compile with ICC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:805
msgid ""
"# - Gawk # Build and install Gawk typically, like Flex. I used -fast with "
"Gawk, via # prof_use-fast-env."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:808
msgid "sed -e 's/CFLAGS =/& -fast/' -i {,awklib/}Makefile && make-icc-prof_use"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:810
msgid "# Then install Gawk."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:813
msgid ""
"# - Gettext # Gettext contains libraries, so you may want to add -gcc (I "
"don't):"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:816
#, no-wrap
msgid ""
"find gettext-runtime/ -name Makefile.in \\\n"
"\t-exec sed -e 's/^CFLAGS =/& -gcc/' -i {} \\;\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:819
msgid ""
"# I couldn't get Gettext to build with -ipo, but it builds with profiling.  "
"# After 'make distclean':"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:822
#, no-wrap
msgid ""
"nice -n 19 env -u CONFIG_SITE LANG=\"en\" LANGUAGE=\"en\" LC_ALL=\"C\" \\\n"
"\tLD=\"xild\" AR=\"xiar\" CC=\"icc -prof_use -prof_dir=$(pwd)\" "
"./configure..\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:825
msgid "# - Grep # Build and install Grep typically. I used -fast for Grep too."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:829
msgid ""
"# - Groff # Groff does not build with -ipo, and does not have a "
"testsuite. Build Groff # like this:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:832
#, no-wrap
msgid ""
"env -u CONFIG_SITE CC=\"icc\" CXX=\"icpc\" LD=\"xild\" AR=\"xiar\" \\\n"
"\tLANG=\"en\" LANGUAGE=\"en\" LC_ALL=\"C\" ...\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:834
msgid "# Remember to use 'icc-make'."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:837
msgid "# - Gzip # Gzip doesn't have a testsuite, but we can mimick one:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:843
msgid ""
"dd if=/dev/urandom of=urandom.file bs=2M count=10 ./gzip -9 urandom.file "
"./gzip -d urandom.file.gz cat AUTHORS README README-alpha ChangeLog | ./gzip "
"-4 -c > non-random.gz ./gzip -d non-random.gz"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:845
msgid "# I build Gzip with -fast too."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:848
msgid ""
"# - Inetutils # Inetutils does not have a testsuite but will compile with "
"ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:851
msgid ""
"# - Iproute2 # Iproute2 needs the -gcc option, and does not have a "
"testsuite:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:854
msgid ""
"icc-make SBINDIR=/sbin CC=\"icc -gcc\" && icc-make SBINDIR=/sbin CC=\"icc "
"-gcc\" install"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:857
msgid "# - Kdb # Kbd does not have a testsuite:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:859
msgid "icc-make CC=\"icc\""
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:862
msgid "# - Less # Less does not have a testsuite. Configure and build it normally."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:865
msgid "# - Make # Build and install Make typically."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:868
msgid ""
"# - Man-DB # Man-DB does not have a testsuite. Configure and build it "
"normally."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:871
msgid "# - Mktemp # Mktemp does not have a testsuite, but we can simulate one:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:876
msgid ""
"./mktemp --help ./mktemp -V ./mktemp -p . && ./mktemp -p . XXXXXXXX ./mktemp "
"-p . -d && ./mktemp -p . -d XXXXXXXX"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:878
msgid "# You can build Mktemp with -fast if you like."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:883
msgid ""
"# - Module-init-tools # I suggest you use this patch to dynamically link "
"insmod: # "
"http://www.linuxfromscratch.org/patches/downloads/module-init-tools/ "
"#\tmodule-init-tools-3.2.2-nostatic-1.patch"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:885
msgid "# Run the Module-init-tools tests like this:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:889
msgid ""
"prof_gen-env ./configure && prof_gen-env icc-make check && icc-make "
"distclean"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:891
msgid "# Then rebuild with 'prof_use-env'."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:894
msgid "# - Patch # Patch does not have a testsuite. Build and install it normally."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:897
msgid ""
"# - Psmisc # Psmisc does not have a testsuite. Build and install it "
"normally."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:900
msgid ""
"# - Shadow # Shadow does not have a testsuite. Build and install it "
"normally."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:903
msgid ""
"# - Sysklogd # Sysklogd does not have a testsuite. Build Sysklogd with ICC "
"like this:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:905
msgid "icc-make CC=\"icc -ipo0\""
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:908
msgid ""
"# - Sysvinit # Sysvinit does not have a testsuite. Build Sysvinit with ICC "
"like this:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:910
msgid "icc-make -C src CC=\"icc -ipo0\""
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:913
msgid "# - Tar # Tar can be built typically, like Coreutils."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:916
msgid "# - Texinfo # Texinfo can be built typically, like Coreutils."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:918
msgid "# - Udev does not compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:920
msgid "# - Util-linux does not compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:924
msgid ""
"# - Vim # Vim can be built typically. Vim's testsuite will almost certainly "
"screw up # your terminal. Pipe the output to a log, or /dev/null:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:926
msgid "make test 2>&1>/dev/null"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:928
msgid "# Opening and reading the log can also screw up your terminal."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:930
msgid "# After LFS is installed add the environment files to /etc/profile:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:935
msgid ""
"echo \"source /etc/idbvars.sh\" >> /etc/profile echo \"source "
"/etc/iccvars.sh\" >> /etc/profile echo 'export "
"CONFIG_SITE=\"/usr/share/config.site-icc\"' >> /etc/profile source "
"/etc/profile"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:937
msgid "# There is a project to compile the Linux kernel with ICC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:939
msgid "# http://www.pyrillion.org/linuxkernelpatch.html"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:941
msgid "# But I couldn't get it to work."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:943
msgid "# Your system should now be running like lightning :-)"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:945
msgid "# Beyond LFS packages which compile with ICC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:948
msgid "# - OpenSSL # I couldn't get OpenSSL to compile with 'xiar'."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:953
msgid ""
"# - OpenSSH # OpenSSH can compile with profiling, but has a couple "
"issues. First the # 'optreset' Glibc function doesn't resolve, but we can "
"use the 'optreset' # included with OpenSSH:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:955
msgid "prof_gen-env env ac_cv_have_getopt_optreset=no ./configure..."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:958
msgid ""
"# The other issue is with 'ld' not resolving symbols from the Glibc # "
"library, but we can 'icc' instead:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:960
msgid "make LD=icc AR=xiar"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:963
msgid "# - LibPNG # LibPNG can compile with ICC, but X11 won't be able to use it:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:967
msgid "# - Freetype doesn't compile with profiling, but can compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:969
msgid "# - Expat doesn't compile with profiling, but can compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:971
msgid "# - Fontconfig can compile with ICC profiling."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:975
msgid ""
"# - Wget # Wget will compile with ICC but has weird buggy behaviour, so I "
"suggest # building Wget with GCC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:980
msgid "# - Pkg-config # Pkg-config will build with profiling, like Coreutils."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:983
msgid "# - Xorg # Don't build Xorg with ICC, its not well supported. Use:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:985
msgid "env -u CONFIG_SITE ../build.sh..."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:988
msgid ""
"# Jpeg-6b can compile with ICC profiling. Add -gcc to CFLAGS and because "
"this # is a library."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:991
msgid ""
"# LCMS can compile with ICC profiling. Add -gcc to CFLAGS because of the # "
"library."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:993
msgid "# LibMNG can compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:995
msgid "icc-make CC=icc CFLAGS=\"$ICC_CFLAGS -gcc\""
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:998
msgid ""
"# QT supports ICC.  # Add \"-platform linux-icc -thread\" to the ./configure "
"command."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1000
msgid "# Pkgconfig can compile with ICC profiling."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1002
msgid "# Glib2 can compile with ICC profiling. Add -gcc to CFLAGS/CXXFLAGS."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1004
msgid "# Libogg can compile with ICC profiling. Add -gcc to CFLAGS/CXXFLAGS."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1006
msgid "# Libvorbis does not compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1008
msgid "# Alsa-lib doesn't compile with profiling, but does compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1010
msgid "# Alsa-utils can compile with ICC profiling."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1012
msgid "# Audiofile can compile with ICC profiling. Add -gcc to CFLAGS/CXXFLAGS."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1014
msgid "# Libmad can compile with ICC profiling. Add -gcc to CFLAGS/CXXFLAGS."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1018
msgid ""
"# Arts supports ICC, but the newest version of ICC does not build the latest "
"# stable release of Arts. So, for now, it doesn't work. I emailed KDE about "
"it, # after trying to build an Arts snapshot."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1020
msgid "# Libart_lgpl does not compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1022
msgid "# Wget can compile with ICC profiling."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1024
msgid "# Libxml2 can compile with ICC profiling. Add -gcc to CFLAGS/CXXFLAGS."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1026
msgid "# Libxslt can compile with ICC profiling. Add -gcc to CFLAGS/CXXFLAGS."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1028
msgid "# KDE does not compile with ICC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1030
msgid "# Zip compiles with ICC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1032 origin/intel-c-compiler.txt:1038
msgid "sed -e 's|gcc|icc|g' -i unix/Makefile"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1034
msgid "# And use \"generic_icc\" as the make target."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1036
msgid "# Unzip compiles with ICC. Run this after applying the patches:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1040
msgid "# Cpio can compile with ICC profiling."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1042
msgid "# Tcsh can compile with ICC profiling."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1044
msgid "# GnuPG can compile with ICC profiling."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1046
msgid "# LibIDL can compile with ICC profiling."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1048
msgid "# Others that compile with ICC:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1071
msgid ""
"# Glib # Gtk # Pango # Atk # Gtk2 # Libogg # Libxml # Libxst # Audiofile # "
"Libmad # Which # GnuPG # Cdparanoia # Libungif # Giflib # Imlib2 # Aalib # "
"SDL # Libdvdcs # Libdvdread # Xvidcore # Lzo"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1076
msgid ""
"# Lame # If Lame is compiled with ICC it will cause problems with other "
"packages, like # FFmpeg, which try to link to libmp3lame. This package "
"should be compiled with # GCC."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1090
msgid ""
"# Xine-lib # Popt # Libao # Flac123 # Wget # Cvs # Ncftp # Subversion # Ntp "
"# Lynx # Bind-utils # Vorbis-tools # Mpg123"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1092
msgid "# For Mpg123 do:"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1094
msgid "sed -e 's at gcc@/opt/bin/icc at g' -i Makefile"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1096
msgid "# LibIDL"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1102
msgid ""
"# Vorbisgain # Libaal # Reiser4progs # Cdrtools # Add \"CC=/opt/bin/icc\" to "
"the make command."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1104
msgid "# Irssi"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1106
msgid "# And more..."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1108
msgid "# ICC has its own Prelink program... check the man pages."
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1113
#, no-wrap
msgid ""
"ACKNOWLEDGMENTS:\n"
"\t* Thanks to Daniel Baumann for the original hint.\n"
"\t* Thanks to Gentoo for their wiki page:\n"
"\t\thttp://gentoo-wiki.com/HOWTO_ICC_and_Portage\n"
msgstr ""

#. type: Plain text
#: origin/intel-c-compiler.txt:1151
#, no-wrap
msgid ""
"CHANGELOG:\n"
"[2005-06-25]\n"
"\t* Adopted hint.\n"
"[2005-06-26]\n"
"\t* Added more supported packages.\n"
"[2005-07-04]\n"
"\t* It can reboot now.\n"
"[2005-12-08]\n"
"\t* New Intel CC version.\n"
"\t* New Cpio security patch.\n"
"\t* Point Cpio to the correct location of rmt in /tools.\n"
"\t* Use icpc for CXX.\n"
"\t* Several more packages compile now.\n"
"\t* Added instructions to profile code.\n"
"\t* Added -gcc for Iproute2.\n"
"[2006-05-19]\n"
"\t* Run 'make check' after building with prof_gen, to generate profiling "
"data.\n"
"[2006-05-22]\n"
"\t* Added notes for the -ipo option.\n"
"\t* Added warning about Perl's large amount of generated profiling data.\n"
"\t* Bash may compile with ICC now.\n"
"\t* Fixed up the bzip2 instructions a bit.\n"
"\t* Added note about Diffutils and File's lack of testsuite.\n"
"[2006-06-24]\n"
"\t* Bump to icc-9.1.\n"
"\t* Use some shell variables for icc version to make it easier for users\n"
"\t  who are using a different icc version.\n"
"\t* Add sed commands for -ipo.\n"
"\t* Make a config.site for ICC.\n"
"\t* Added make scripts for code profiling, to make things easier.\n"
"\t* Add ICC_CFLAGS to the ICC config file, to make things easier.\n"
"\t* Spell checked.\n"
"[2006-11-06]\n"
"\t* Bump to ICC-9.1.042.\n"
"\t* Added more uses for the -fast option, and other options.\n"
"\t* Bumped to LFS-SVN-20061021\n"
"\t* Static libraries can be built with -ipo, but only works if AR=xiar\n"
"\t* Added icc-make so xiar (AR) is used.\n"
msgstr ""
