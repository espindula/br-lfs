# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/lin2win.txt:9
#, no-wrap
msgid ""
"TITLE:                  Linux to Windows \n"
"LFS VERSION:            LFS CVS [20030603]\n"
"AUTHOR:                 Nathan Coulson <conathan@conet.dyndns.org>\n"
"                        Seth W. Klein <sk@sethwklein.net>\n"
"SYNOPSIS:\n"
"        Ever want to compile windows programs from linux?  This hint shows\n"
"how to build i386-pc-mingw32, i386-pc-cygwin32, and i386-pc-msdosdjgpp\n"
"cross compilers.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:14
#, no-wrap
msgid ""
"VERSION:        0.1\n"
"CHANGELOG:\n"
"        0.1: Text has been fixed up, updated to gcc 3.3.1  Compile "
"libraries\n"
"             first\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:20
#, no-wrap
msgid ""
"HINT:\n"
"        First, to cover some of the basics. To compile the libraries for\n"
"these compilers, you need the compilers, but to compile the compilers, you\n"
"need the libraries.  This circular dependency is solved by starting with\n"
"binary versions of the libraries.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:24
#, no-wrap
msgid ""
"        I am going to define some variables for use in the commands below,\n"
"and you may edit them as you see fit.  PREFIX is the destination "
"directory,\n"
"while TARGET is the type of compiler you wish to install.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:26
#, no-wrap
msgid ""
"i386-pc-mingw32 [binary libraries]\n"
"==================================\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:31
#, no-wrap
msgid ""
"        MinGW is a collection of freely available and freely distributable\n"
"Windows specific header files and import libraries combined with GNU "
"toolsets\n"
"that allow one to produce native Windows programs that do not rely on any\n"
"3rd-party DLLs.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:37
#, no-wrap
msgid ""
"FILES:\n"
"        binutils-2.14.tar.bz2           [ftp://ftp.gnu.org/gnu/binutils]\n"
"        gcc-3.3.1.tar.bz2               [ftp://ftp.gnu.org/gnu/gcc]\n"
"        mingw-runtime-3.0.tar.bz2       [http://www.sf.net/projects/mingw]\n"
"        w32api-2.3.tar.bz2              [http://www.sf.net/projects/mingw]\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:42
#, no-wrap
msgid ""
"ENV:\n"
"        PREFIX=/opt/cross-compile_bin\n"
"        TARGET=i386-pc-mingw32\n"
"        export PATH=$PREFIX/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:44
msgid "LIBRARIES:"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:48
#, no-wrap
msgid ""
"        These must be installed into the correct directories, so we use "
"tar's\n"
"-C option to specify the destination.  We also make sure that the "
"directory\n"
"exists\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:52
#, no-wrap
msgid ""
"        mkdir -p $PREFIX/$TARGET\n"
"        tar -xjf mingw-runtime-3.0.tar.bz2 -C $PREFIX/$TARGET\n"
"        tar -xjf w32api-2.3.tar.bz2 -C $PREFIX/$TARGET\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:56
#, no-wrap
msgid ""
"BINUTILS:\n"
"        And now for binutils.  The only difference from the LFS "
"instructions,\n"
"is the --target flag.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:63 origin/lin2win.txt:300
#, no-wrap
msgid ""
"        tar -xjf binutils-2.13.2.tar.bz2\n"
"        mkdir binutils-build\n"
"        cd binutils-build\n"
"        ../binutils-2.13.2/configure --prefix=$PREFIX --target=$TARGET\n"
"        make\n"
"        make install\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:68
#, no-wrap
msgid ""
"GCC:\n"
"        We then compile GCC last, so it uses the above libraries.  You may "
"have\n"
"noticed the --enable-version-specific-runtime-libs, I have added that, so "
"that\n"
"libraries are installed within their own seperate folder.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:77
#, no-wrap
msgid ""
"        tar -xjf gcc-3.2.3.tar.bz2\n"
"        mkdir gcc-build\n"
"        cd gcc-build\n"
"        ../gcc-3.2.3/configure --prefix=$PREFIX --target=$TARGET \\\n"
"          --enable-threads=win32 --enable-languages=c,c++ \\\n"
"          --enable-version-specific-runtime-libs\n"
"        make\n"
"        make install\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:81
#, no-wrap
msgid ""
"END:\n"
"        To use your new cross-compiler, put $PREFIX/bin first in your "
"PATH.\n"
"(It will already be there if you set the variables as above.)\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:83 origin/lin2win.txt:203
#, no-wrap
msgid "        If you want to try it out, type in the following\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:86 origin/lin2win.txt:206
#, no-wrap
msgid ""
"        echo 'main() { puts(\"Hello World\"); }' > test.c\n"
"        $TARGET-gcc test.c -o test.exe\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:89
#, no-wrap
msgid ""
"        Copy this to a windows machine (if avaliable), and run it.  (It\n"
"should print \"Hello World\" to the screen before exiting).\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:91
msgid "MinGW does not require any addition files to run on windows."
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:93
#, no-wrap
msgid ""
"i386-pc-mingw32 [compiled libraries]\n"
"====================================\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:100
#, no-wrap
msgid ""
"FILES:\n"
"        binutils-2.13.2.tar.bz2         [ftp://ftp.gnu.org/gnu/binutils]\n"
"        gcc-3.2.3.tar.bz2               [ftp://ftp.gnu.org/gnu/gcc]\n"
"        mingw-runtime-3.0-src.tar.bz2   [http://www.sf.net/projects/mingw]\n"
"        w32api-2.3-src.tar.bz2          [http://www.sf.net/projects/mingw]\n"
"  * Note that we use the source code of the 2 libraries this time\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:108
#, no-wrap
msgid ""
"ENV:\n"
"        PREFIX=/opt/cross-compile \n"
"        TARGET=i386-pc-mingw32\n"
"        export PATH=$PREFIX/bin:$PATH\n"
"  * We have changed the prefix to /opt/cross-compile, as to make a fresh "
"install\n"
"  * This path adds onto the previous path for the binary version, otherwise "
"it\n"
"    cannot find $TARGET-gcc.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:118
#, no-wrap
msgid ""
"LIBRARIES:\n"
"        Since we now have a i386-pc-mingw32 toolchain, we can install the\n"
"libraries.  We move w32api-2.3 to w32api, because mingw-runtime searches "
"for\n"
"header files in ../w32api/include.  [you can watch the packages as it "
"compiles\n"
"to verify this].  We install to $PREFIX/$TARGET, as the libraries do not "
"install\n"
"themselves to the $TARGET directory by default, and if we installed to "
"/usr,\n"
"this would overwrite our default headers.  I also had to override the "
"programs\n"
"that configure uses by default on mingw-runtime, for it does not appear to "
"use\n"
"the --target flag.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:136
#, no-wrap
msgid ""
"        tar -xjf mingw-runtime-3.0-src.tar.bz2\n"
"        tar -xjf w32api-2.3-src.tar.bz2\n"
"        mv w32api-2.3 w32api\n"
"        mkdir mingw-build\n"
"        cd mingw-build\n"
"        ../mingw-runtime-3.0/configure --prefix=$PREFIX/$TARGET "
"--target=$TARGET\n"
"        make CC=\"i386-pc-mingw32-gcc\" DLLTOOL=\"i386-pc-mingw32-dlltool\" "
"\\\n"
"            AS=\"i386-pc-mingw32-as\" AR=\"i386-pc-mingw32-ar\" \\\n"
"            LD=\"i386-pc-mingw32-ld\" RANLIB=\"i386-pc-mingw32-ranlib\"\n"
"        make install\n"
"        cd ..\n"
"        mkdir w32api-build\n"
"        cd w32api-build\n"
"        ../w32api/configure --prefix=$PREFIX/$TARGET --host==$TARGET\n"
"        make\n"
"        make install\n"
"        cd ..\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:139
#, no-wrap
msgid ""
"BINUTILS:\n"
"        Compile as above.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:142
#, no-wrap
msgid ""
"GCC:\n"
"        Compile as above.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:145
#, no-wrap
msgid ""
"END:\n"
"        The compiled version should work the same way as the binary way.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:147
#, no-wrap
msgid ""
"i386-pc-cygwin32 [binary libraries] (Untested)\n"
"===================================\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:149
#, no-wrap
msgid "        Cygwin is a Linux-like environment for Windows.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:157
#, no-wrap
msgid ""
"FILES:\n"
"        binutils-2.13.2.tar.bz2         [ftp://ftp.gnu.org/gnu/binutils]\n"
"        gcc-3.2.3.tar.bz2               [ftp://ftp.gnu.org/gnu/gcc]\n"
"        cygwin-1.3.22-1.tar.bz2         "
"[http://www.cygwin.com/mirrors.html]\n"
"        w32api-2.3.tar.bz2              [http://www.sf.net/projects/mingw]\n"
"  * I got w32api-2.3 from mingw, and just used it for cygwin.  seems to "
"work... but I\n"
"  beleive you can also download w32api from www.cygwin.com/mirrors.html\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:162
#, no-wrap
msgid ""
"ENV:\n"
"        PREFIX=/opt/cross-compile_bin\n"
"        TARGET=i386-pc-cygwin32\n"
"        export PATH=$PREFIX/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:167
#, no-wrap
msgid ""
"LIBRARIES:\n"
"        I am not completely familiar with where libraries files go,  but "
"it\n"
"seems good enough to compile the next part.  [If anyone has any useful\n"
"information, please email conathan@conet.dyndns.org].\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:174
msgid ""
"mkdir -p $PREFIX/$TARGET mkdir tmp tar -xjf cygwin-1.3.22-1.tar.bz2 -C tmp "
"cp -a tmp/usr/include/* $PREFIX/$TARGET/include cp -a tmp/usr/lib/* "
"$PREFIX/$TARGET/lib tar -xjf w32api-2.3.tar.bz2 -C $PREFIX/$TARGET"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:182
#, no-wrap
msgid ""
"BINUTILS:\n"
"        tar -xjf binutils-2.13.2.tar.bz2\n"
"        mkdir binutils-build\n"
"        cd binutils-build\n"
"        ../binutils-2.13.2/configure --prefix=$PREFIX --target=$TARGET\n"
"        make\n"
"        make install\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:186
#, no-wrap
msgid ""
"GCC:\n"
"        When I checked gcc -v on cygwin, it was compiled with \n"
"--enable-threads=posix, so I'll use it below.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:195
#, no-wrap
msgid ""
"        tar -xjf gcc-3.2.3.tar.bz2\n"
"        mkdir gcc-build\n"
"        cd gcc-build\n"
"        ../gcc-3.2.3/configure --prefix=$PREFIX --target=$TARGET \\\n"
"            --enable-threads=posix --enable-languages=c,c++ \\\n"
"            --enable-version-specific-runtime-libs\n"
"        make\n"
"        make install\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:201
#, no-wrap
msgid ""
"END:\n"
"        To use your new cross-compiler, put $PREFIX/bin first in your "
"PATH.\n"
"        (It will already be there if you set the variables as above.) In\n"
"        addition, when building a package configured with autoconf, pass\n"
"        --host=$TARGET to the configure script.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:212
#, no-wrap
msgid ""
"        Copy this to a windows machine (if avaliable), and run it.  (It\n"
"should print \"Hello World\" to the screen before exiting).  Please note "
"that\n"
"you require the cygwin environment for windows, downloadable at "
"www.cygwin.com.\n"
"The advantage of cygwin over mingw, is that most linux programs could "
"probably\n"
"be easly compiled for cygwin, although requiring the cygwin.dll to run.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:214
#, no-wrap
msgid ""
"i386-pc-cygwin32 [compiled libraries] (Untested)\n"
"==============================================\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:224
#, no-wrap
msgid ""
"FILES:\n"
"        binutils-2.13.2.tar.bz2         [ftp://ftp.gnu.org/gnu/binutils]\n"
"        gcc-3.2.3.tar.bz2               [ftp://ftp.gnu.org/gnu/gcc]\n"
"        cygwin-1.3.22-1-src.tar.bz2      "
"[http://www.cygwin.com/mirrors.html]\n"
"        w32api-2.3-src.tar.bz2           "
"[http://www.sf.net/projects/mingw]\n"
"  * again, I got w32api-2.3 from mingw, and just used it for cygwin.  seems "
"to \n"
"    work...\n"
"  * This path adds onto the previous path for the binary version, otherwise "
"it\n"
"    cannot find $TARGET-gcc.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:229
#, no-wrap
msgid ""
"ENV:\n"
"        PREFIX=/opt/cross-compile\n"
"        TARGET=i386-pc-cygwin32\n"
"        export PATH=$PREFIX/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:236
#, no-wrap
msgid ""
"LIBRARIES:\n"
"        It appears that the cygwin libraries behave better then the mingw "
"ones\n"
"do, and a simple --prefix=$PREFIX should install nicely.  It even uses\n"
"the correct programs to recompile itself.  w32api is automatically "
"compiled\n"
"when you add it to the winsup directory, and the cygwin sources will\n"
"not compile without it, afaik.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:240
#, no-wrap
msgid ""
"        tar -xjf cygwin-1.3.22-1-src.tar.bz2\n"
"        tar -xzf w32api-2.3-src.tar.gz\n"
"        mv w32api-2.3 cygwin-1.3.22-1/winsup/w32api\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:248
#, no-wrap
msgid ""
"        mkdir cygwin-build\n"
"        cd cygwin-build\n"
"        ../cygwin-1.3.22-1/configure --prefix=/usr --target=$TARGET\n"
"        make\n"
"        make install\n"
"        cd ..\n"
"        rm -rf cygwin-1.3.22-1 cygwin-build\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:251
#, no-wrap
msgid ""
"BINUTILS:\n"
"        The above instructions are sufficient.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:254
#, no-wrap
msgid ""
"GCC:\n"
"        The above instructions are sufficient.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:257
#, no-wrap
msgid ""
"END:\n"
"        The compiled version should work the same way as the binary way\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:259
#, no-wrap
msgid ""
"i386-pc-msdosdjgpp [binary libraries]\n"
"==================================\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:267
#, no-wrap
msgid ""
"FILES:\n"
"        binutils-2.13.2.tar.bz2         [ftp://ftp.gnu.org/gnu/binutils]\n"
"        gcc-3.2.3.tar.bz2               [ftp://ftp.gnu.org/gnu/gcc]\n"
"        gcc323s2.zip                    "
"[http://www.delorie.com/pub/djgpp/current/v2gnu/]\n"
"        djcrx203.zip                    "
"[http://www.delorie.com/pub/djgpp/current/v2/]\n"
"        autoconf-2.13.tar.bz            [ftp://ftp.gnu.org/gnu/autoconf]\n"
"        automake-1.5.tar.bz2            [ftp://ftp.gnu.org/gnu/automake]\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:272
#, no-wrap
msgid ""
"ENV:\n"
"        PREFIX=/opt/cross-compile_bin\n"
"        TARGET=i386-pc-msdosdjgpp\n"
"        export PATH=$PREFIX/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:277
#, no-wrap
msgid ""
"LIBRARIES:\n"
"        We use the -a on unzip, so that it automatically formats the text "
"files\n"
"for linux.  Compile stubify [used for GCC I believe], and then just copy "
"over\n"
"the headers and libraries.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:289
#, no-wrap
msgid ""
"        mkdir -p $PREFIX/$TARGET/{bin,include,lib}\n"
"        mkdir tmp\n"
"        cd tmp\n"
"        unzip -a ../../lfs.packages/djcrx203.zip\n"
"        cp -r include/* $PREFIX/$TARGET/include\n"
"        cp -r lib/* $PREFIX/$TARGET/lib\n"
"        cd src/stub\n"
"        gcc stubify.c -o $PREFIX/$TARGET/bin/stubify\n"
"        cd ../..\n"
"        cd ..\n"
"        rm -rf tmp\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:293
#, no-wrap
msgid ""
"BINUTILS:\n"
"        binutils does not appear to require any libraries to compile itself, "
"so\n"
"we install it first.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:306
#, no-wrap
msgid ""
"GCC:\n"
"        GCC is harder to build then the above targets, as we have to patch "
"the\n"
"sources first.  On the http://www.delorie.com/djgpp site, you can find a \n"
"gcc323s.zip file, but it does not store filepermissions and therefore it "
"is\n"
"easier for us to patch.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:309
#, no-wrap
msgid ""
"        We require older versions of autoconf and automake to patch gcc\n"
"properly, as indicated on the gcc's faq.  The instructions are provided "
"below.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:311
#, no-wrap
msgid "        export PATH=$PREFIX/tmp/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:327
#, no-wrap
msgid ""
"        mkdir -p $PREFIX/tmp\n"
"        tar -xjf /autoconf-2.13.tar.bz2\n"
"        cd autoconf-2.13\n"
"        ./configure --prefix=$PREFIX/tmp\n"
"        make\n"
"        make install\n"
"        cd ..\n"
"        rm -rf autoconf-2.13\n"
"        tar -xjf ../lfs.packages/automake-1.5.tar.bz2\n"
"        cd automake-1.5\n"
"        ./configure --prefix=$PREFIX/tmp\n"
"        make\n"
"        make install\n"
"        cd .. \n"
"        rm -rf automake-1.5 \n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:329
#, no-wrap
msgid "        Now, onto patching the gcc source.  Any errors\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:336
#, no-wrap
msgid ""
"        mkdir gcc\n"
"        cd gcc\n"
"        unzip -a ../../lfs.packages/gcc323s2.zip\n"
"        chmod 755 unpack-gcc.sh\n"
"        ./unpack-gcc.sh ../../lfs.packages/gcc-3.2.3.tar.gz\n"
"        cd ..\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:339
#, no-wrap
msgid ""
"        This has unarchived and patched the source to gcc/gnu/gcc3.23,\n"
"and we can finally compile it\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:350
#, no-wrap
msgid ""
"        cd gcc/gnu\n"
"        mkdir gcc-build\n"
"        cd gcc-build\n"
"        ../gcc-3.23/configure --prefix=$PREFIX --target=$TARGET \\\n"
"          --with-headers=$PREFIX/$TARGET/include --enable-languages=c,c++ "
"\\\n"
"          --enable-version-specific-runtime-libs\n"
"        make\n"
"        make install\n"
"        cd ../../..\n"
"        rm -rf gcc\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:352
#, no-wrap
msgid "        We do not require the autotools anymore, so...\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:354
#, no-wrap
msgid "\trm -rf $PREFIX/tmp\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:360
#, no-wrap
msgid ""
"END:\n"
"        To use your new cross-compiler, put $PREFIX/bin first in your "
"PATH.\n"
"(It will already be there if you set the variables as above.) In addition,\n"
"when building a package configured with autoconf, pass --host=$TARGET to "
"the\n"
"configure script.\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:362
#, no-wrap
msgid ""
"TODO\n"
"====\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:372
#, no-wrap
msgid ""
"i386-pc-cygwin32:\n"
"\t-Test Compiled Binaries, and determine requiraments to run\n"
"i386-pc-msdosdjgpp: (Test, Find a way to compmile the libraries [hard])\n"
"        -Test Instructions\n"
"        -Figure out how to actually run the compiled programs [listed on\n"
"djgpp's howto page at www.delorie.com/djgpp]\n"
"        -Compile the libraries [looks like extracting djlsr203.zip, then\n"
"extract djcrx203.zip into it]\n"
"        -check --enable-threads value\n"
msgstr ""

#. type: Plain text
#: origin/lin2win.txt:377
msgid ""
"gcc, I noticed like to stick C++ libraries under the /include directory.  I "
"dont know if that is good or not, so I used "
"--enable-version-specific-runtime-libs to counteract this.  (It was probably "
"a typo, and was my fault though.  I'll double check someday)."
msgstr ""
