# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-09-02 09:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: origin/optimization.txt:5
#, no-wrap
msgid ""
"AUTHOR:\t\tJim Gifford <lfs-hints at jg555.com>\n"
"\t\tOriginally by Gerard Beekmans < gerard at linuxfromscratch.org >\n"
"\t\tOriginally by Thomas -Balu-Walter < tw at itreff.de >\n"
"\t\tOriginally by Eric Olinger <eric at supertux.com> optimization2.txt\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:7
msgid "DATE:\t\t2003-10-30"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:9
msgid "LICENSE:\tGNU Free Documentation License Version 1.2"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:11
msgid "SYNOPSIS:\tCompiler-optimization"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:14
#, no-wrap
msgid ""
"DESCRIPTION:\tThis hint will act as a guide on how-to or not-to use\n"
"\t\tcompiler optimization routines.\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:16
msgid "PREREQUISITES:\tNone"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:18
msgid "HINT:"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:21
msgid ""
"The origin of this text is the 2.4.3-version of the book - Chapter 6. I "
"modified it a little to create this hint."
msgstr ""

#. type: Plain text
#: origin/optimization.txt:28
msgid ""
"Most programs and libraries by default are compiled with optimizing level 2 "
"(gcc options -g and -O2) and are compiled for a specific CPU. On Intel "
"platforms software is compiled for i386 processors by default. If you don't "
"wish to run software on other machines other than your own, you might want "
"to change the default compiler options so that they will be compiled with a "
"higher optimization level, and generate code for your specific architecture."
msgstr ""

#. type: Plain text
#: origin/optimization.txt:39
msgid ""
"There are a few ways to change the default compiler options. One way is to "
"edit every Makefile file you can find in a package, look for the CFLAGS and "
"CXXFLAGS variables (a well designed package uses the CFLAGS variable to "
"define gcc compiler options and CXXFLAGS to define g++ compiler options) and "
"change their values. Packages like binutils, gcc, glibc and others have a "
"lot of Makefile files in a lot of subdirectories so this would take a lot of "
"time to do.  Instead there's an easier way to do things: create the CFLAGS "
"and CXXFLAGS environment variables. Most configure scripts read the CFLAGS "
"and CXXFLAGS variables and use them in the Makefile files. A few packages "
"don't follow this convention and those package require manual editing."
msgstr ""

#. type: Plain text
#: origin/optimization.txt:42
msgid ""
"To set those variables you can do the following commands in bash (or in your "
".bashrc if you want them to be there all the time):"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:45
#, no-wrap
msgid ""
"    export CFLAGS=\"-O3 -march=<architecture>\" &&\n"
"    CXXFLAGS=$CFLAGS\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:56
msgid ""
"This is a minimal set of optimizations that ensures it works on almost all "
"platforms. The option march will compile the binaries with specific "
"instructions for that CPU you have specified. This means you can't copy this "
"binary to a lower class CPU and execute it. It will either work very "
"unreliable or not at all (it will give errors like \"Illegal Instruction, "
"core dumped\").  You'll have to read the GCC Info page to find more possible "
"optimization flags.  In the above environment variable you have to replace "
"<architecture> with the appropriate CPU identifiers such as i586, i686, "
"powerpc and others. I suggest to have a look at the gcc-manual at "
"http://gcc.gnu.org/onlinedocs/gcc_toc.html \"Hardware Models and "
"Configurations\"."
msgstr ""

#. type: Plain text
#: origin/optimization.txt:63
#, no-wrap
msgid ""
"/*\n"
" * Ed. note\n"
" * \"Reboant\" dropped a note about how using -Os (optimize for size) "
"showed\n"
" * incredibly good results. So if you want is small binary size rather than "
"fast\n"
" * execution time, you might want to take a look at this.\n"
" */\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:75
msgid ""
"Please keep in mind that if you find that a package doesn't compile and "
"gives errors like \"segmentation fault, core dumped\" it's most likely got "
"to do with these compiler optimizations. Try lowering the optimizing level "
"by changing -O3 to -O2. If that doesn't work try -O or leave it out all "
"together.  Also try changing the -march variable. Compilers are very "
"sensitive to certain hardware too. Bad memory can cause compilation problems "
"when a high level of optimization is used, like the -O3 setting. The fact "
"that I don't have any problems compiling everything with -O3 doesn't mean "
"you won't have any problems either. Another problem can be the Binutils "
"version that's installed on your system which often causes compilation "
"problems in Glibc (most noticable in RedHat because RedHat often uses beta "
"software which aren't always very stable."
msgstr ""

#. type: Plain text
#: origin/optimization.txt:78
msgid ""
"\"RedHat likes living on the bleeding edge, but leaves the bleeding up to "
"you\" (quoted from somebody on the lfs-discuss mailinglist)."
msgstr ""

#. type: Plain text
#: origin/optimization.txt:80
msgid "DEFINITIONS FOR FLAGS:"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:83
msgid ""
"For more information on compiler optimization flags see the GCC Command s "
"page in the Online GCC 3.3.1 docs at:"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:86
msgid ""
"http://gcc.gnu.org/onlinedocs/gcc-3.3.1/gcc/Optimize-Options.html#Optimize%20Options "
"http://gcc.gnu.org/onlinedocs/gcc-3.3.1/gcc/i386-and-x86-64-Options.html#i386%20and%20x86-64%20Options"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:90
#, no-wrap
msgid ""
"-s\n"
"        A linker option that remove all symbol table and relocation \n"
"        information from the binary.\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:103
#, no-wrap
msgid ""
"-O3\n"
"        This flag sets the optimizing level for the binary.\n"
"                3\tHighest level, machine specific code is generated.\n"
"   \t\t        Auto-magically adds the -finline-functions and \n"
"\t\t\t-frename-registers flags. \n"
"                2       Most make files have this set up as Default, "
"performs all  \n"
"\t\t\tsupported optimizations that do not involve a space-speed \n"
"\t\t\ttradeoff. Adds the -fforce-mem flag auto-magically.\n"
"                1  \tMinimal optimizations are performed. Default for the "
"compiler, \n"
"   \t\t\tif nothing is given.\n"
"                0       Don't optimize.\n"
"                s       Same as O2 but does additional optimizations for "
"size.\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:111
#, no-wrap
msgid ""
"-fomit-frame-pointer \n"
"        Tells the compiler not to keep the frame pointer in \n"
"        a register for functions that don't need one.  This \n"
"        avoids the instructions to save, set up and restore \n"
"        frame pointers; it also makes an extra register available \n"
"        in many functions. It also makes debugging impossible \n"
"        on some machines.\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:133
#, no-wrap
msgid ""
"-march=pentium3\n"
"        Defines the instructions set to use when compiling. -mpcu is implied "
"\n"
"\tbe the same as -march when only -march is used.\n"
"                i386                    Intel 386 Prcoessor\n"
"                i486                    Intel/AMD 486 Processor\n"
"                pentium                 Intel Pentium Processor\n"
"                pentiumpro      \tIntel Pentium Pro Processor\n"
"\t\tpentium2\t\tIntel PentiumII/Celeron Processor\n"
"\t\tpentium3\t\tIntel PentiumIII/Celeron Processor\n"
"                pentium4                Intel Pentium 4/Celeron Processor\n"
"                k6                      AMD K6 Processor\n"
"\t\tk6-2\t\t\tAMD K6-2 Processor\n"
"\t\tK6-3\t\t\tAMD K6-3 Processor\n"
"                athlon          \tAMD Athlon/Duron Processor\n"
"\t\tathlon-tbird\t\tAMD Athlon Thunderbird Processor\n"
"\t\tathlon-4\t\tAMD Athlon Version 4 Processor\n"
"\t\tathlon-xp\t\tAMD Athlon XP Processor\n"
"\t\tathlon-mp\t\tAMD Athlon MP Processor\n"
"\t\twinchip-c6\t\tWinchip C6 Processor\n"
"\t\twinchip2\t\tWinchip 2 Processor\n"
"\t\tc3\t\t\tVIA C3 Cyrix Processor\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:141
#, no-wrap
msgid ""
"-mmmx\n"
"-msse\n"
"-msse2\n"
"-m3dnow\n"
"\tThese switches enable or disable the use of built-in functions\n"
"\tthat allow direct access to the MMX, SSE and 3Dnow extensions\n"
"\tof the instruction set.\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:143
msgid "OPTIMIZATION LINKS:"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:146
msgid ""
"Safe flags to use for gentoo-1.4 "
"http://www.freehackers.org/gentoo/gccflags/flag_gcc3.html"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:149
msgid ""
"Securing & Optimizing Linux: The Ultimate Solution v2.0 "
"http://www.openna.com/products/books/sol/solus.php"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:151
msgid "PERSON EXPERIENCE:"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:155
msgid ""
"I have tried using all optimization levels, but to my disappointment, "
"results varied from package to package. Using -O(any number) using GCC 3.3.1 "
"can give unpredictable responses."
msgstr ""

#. type: Plain text
#: origin/optimization.txt:160
msgid ""
"Some of those unpredicatable responses can be seen with the following bugs "
"sent to GCC.  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=12590 "
"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=10655 "
"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=8440"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:162
msgid "VERSION:\t1.2"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:166
#, no-wrap
msgid ""
"CHANGELOG:\t1.2 Fixed Typos\n"
"\t\t1.1 Fixed Typos and Cut-n-Paste Errors\n"
"\t\t1.0 Adopted by Jim Gifford\n"
msgstr ""

#. type: Plain text
#: origin/optimization.txt:168
#, no-wrap
msgid ""
" New Version of this document can be viewed from "
"http://cvs.jg555.com/viewcvs.cgi/lfs-hints\n"
msgstr ""
