<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-partitioning-hostreqs" xreflabel="Exigências do Sistema Anfitrião">
  <?dbhtml filename="hostreqs.html"?>

  <title>Exigências do Sistema Anfitrião</title>

  <sect2>
     <title>Hardware</title>

     <para>Os(As) editores(as) do LFS recomendam que a CPU do sistema tenha pelo menos
quatro núcleos e que o sistema tenha pelo menos oito (08) GB de memória. Os
sistemas mais antigos que não atendam a essas exigências ainda funcionarão,
porém o tempo para construir os pacotes será significantemente maior que o
documentado.
  </para>

  </sect2>

  <sect2>
     <title>Software</title>

    <para>O teu sistema anfitrião deveria ter o seguinte logiciário com as versões
mínimas indicadas. Isso não deveria ser um problema para a maioria das
distribuições modernas do Linux. Também, observe que muitas distribuições
colocarão cabeçalhos de logiciários dentro de pacotes separados,
frequentemente na forma de
<literal><replaceable>&lt;nome-pacote&gt;</replaceable>-devel</literal> ou
<literal><replaceable>&lt;nome-pacote&gt;</replaceable>-dev</literal>.
Certifique-se de instalá-los se a tua distribuição os fornecer.</para>

   <para>Versões anteriores dos pacotes de software listados possivelmente funcionem,
porém não foram testados.</para>

  <itemizedlist spacing="compact">

    <listitem>
      <para><emphasis role="strong">Bash-3.2</emphasis> (/bin/sh deveria ser um link
simbólico ou real para bash)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Binutils-2.13.1</emphasis> (Versões maiores que
&binutils-version; não são recomendadas dado que elas não foram testadas)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bison-2.7</emphasis> (/usr/bin/yacc deveria ser um
link para bison ou script pequeno que executa bison)</para>
    </listitem>

    
    <!-- In Coreutils-8.1 the nproc program is added.  -->
<listitem>
      <para><emphasis role="strong">Coreutils-8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Diffutils-2.8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Findutils-4.2.31</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gawk-4.0.1</emphasis> (/usr/bin/awk deveria ser um
link para gawk)</para>
    </listitem>

    <listitem>
      
      <!-- Pass 1 GCC FTBFS with GCC-5.1 because of
           https://gcc.gnu.org/PR65801. -->
<para><emphasis role="strong">GCC-5.2</emphasis> incluindo o compilador C++,
<command>g++</command> (Versões maiores que &gcc-version; não são
recomendadas dado que elas não foram testadas). As bibliotecas C e C++
padrão (com cabeçalhos) também precisam estar presentes, de forma que o
compilador C++ possa construir aplicativos hospedados</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Grep-2.5.1a</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gzip-1.3.12</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Núcleo Linux-&min-kernel;</emphasis></para>

      <para>A razão para a exigência da versão do núcleo é a de que nós especificamos
essa versão quando da construção da <application>glibc</application> no
<xref linkend="chapter-cross-tools"/> e <xref
linkend="chapter-building-system"/>, de forma que as soluções alternativas
para os núcleos mais antigos não estão habilitadas e a
<application>glibc</application> compilada é ligeiramente mais rápida e
menor. Em fevereiro de 2024, &min-kernel; é o lançamento mais antigo do
núcleo ainda suportado pelos(as) desenvolvedores(as) do núcleo. Alguns
lançamentos de núcleo mais antigos que &min-kernel; possivelmente ainda
sejam suportados por equipes de terceiros, porém não são considerados
lançamentos oficiais de desenvolvedor(a) do núcleo; leia-se <ulink
url='https://kernel.org/category/releases.html'/> para os detalhes.</para>

      <para>Se o núcleo do anfitrião for anterior a &min-kernel;, [então] você precisará
substituir o núcleo por uma versão mais atualizada. Existem duas maneiras de
você fazer isso. Primeira, veja se seu fornecedor Linux fornece um pacote do
núcleo &min-kernel; ou mais atual. Se sim, [então] você possivelmente deseje
instalá-lo. Se seu fornecedor não oferecer um pacote de núcleo aceitável ou
você preferisse não instalá-lo, [então] você mesmo(a) pode compilar um
núcleo. Instruções para a compilação de núcleo e configuração de carregador
de inicialização (presumindo que o anfitrião usa GRUB) estão localizadas no
<xref linkend="chapter-bootable"/>.</para>

      <para>Nós exigimos que o núcleo do anfitrião suporte o pseudo terminal UNIX 98
(PTY). Ele deveria estar habilitado em todas as distribuições desktop ou
servidor que embarquem o Linux &min-kernel; ou um núcleo mais recente. Se
você estiver construindo um núcleo personalizado de anfitrião, certifique-se
de que <option>CONFIG_UNIX98_PTYS</option> esteja configurada como
<literal>y</literal> na configuração do núcleo.</para>

    </listitem>

    <listitem>
      <para><emphasis role="strong">M4-1.4.10</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Make-4.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Patch-2.5.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Perl-5.8.8</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Python-3.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Sed-4.1.5</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Tar-1.22</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Texinfo-5.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Xz-5.0.0</emphasis></para>
    </listitem>

  </itemizedlist>

  <important>
    <para>Perceba que os links simbólicos mencionados acima são exigidos para
construir um sistema LFS usando as instruções contidas neste livro. Links
simbólicos que apontem para outro software (tais como dash, mawk, etc.)
possivelmente funcionem, porém não são testados ou suportados pela equipe de
desenvolvimento do LFS e possivelmente exijam ou desvio das instruções ou
remendos adicionais para alguns pacotes.</para>
  </important>

  
  <!-- Use an empty sect2 element to prevent a pdf warning.  -->
<bridgehead renderas="sect2"
              id="version-check"
              xreflabel="Exigências do Sistema Anfitrião">
  </bridgehead>
  

  <!--<title>
 </title>-->
<para >Para ver se o seu sistema anfitrião tem todas as versões apropriadas e a
habilidade de compilar aplicativos, execute os seguintes comandos:</para>

<screen role="nodump"><?dbfo keep-together="auto"?><userinput>cat &gt; version-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
# Um conjunto sequencial de comandos para listar os números de versão de ferramentas críticas de desenvolvimento

# Se você tiver ferramentas instaladas em outros diretórios, [então] ajuste "PATH" aqui E
# em ~lfs/.bashrc (seção 4.4) também.

LC_ALL=C 
PATH=/usr/bin:/bin

bail() { echo "FATAL: $1"; exit 1; }
grep --version > /dev/null 2> /dev/null || bail "grep não funciona"
sed '' /dev/null || bail "sed não funciona"
sort   /dev/null || bail "sort não funciona"

ver_check()
{
   if ! type -p $2 &amp;>/dev/null
   then 
     echo "ERRO: Não conseguiu encontrar $2 ($1)"; return 1; 
   fi
   v=$($2 --version 2>&amp;1 | grep -E -o '[0-9]+\.[0-9\.]+[a-z]*' | head -n1)
   if printf '%s\n' $3 $v | sort --version-sort --check &amp;>/dev/null
   then 
     printf "OK:    %-9s %-6s >= $3\n" "$1" "$v"; return 0;
   else 
     printf "ERRO:  %-9s é MUITO ANTIGO ($3 ou posterior exigido)\n" "$1"; 
     return 1; 
   fi
}

ver_kernel()
{
   kver=$(uname -r | grep -E -o '^[0-9\.]+')
   if printf '%s\n' $1 $kver | sort --version-sort --check &amp;>/dev/null
   then 
     printf "OK:    núcleo Linux $kver >= $1\n"; return 0;
   else 
     printf "ERRO:  núcleo Linux ($kver) é MUITO ANTIGO ($1 ou posterior exigido)\n" "$kver"; 
     return 1; 
   fi
}

# "Coreutils" primeiro, pois "--version-sort" precisa do "Coreutils" >= 7.0
ver_check Coreutils      sort     8.1 || bail "Coreutils muito antigo, pare"
ver_check Bash           bash     3.2
ver_check Binutils       ld       2.13.1
ver_check Bison          bison    2.7
ver_check Diffutils      diff     2.8.1
ver_check Findutils      find     4.2.31
ver_check Gawk           gawk     4.0.1
ver_check GCC            gcc      5.2
ver_check "GCC (C++)"    g++      5.2
ver_check Grep           grep     2.5.1a
ver_check Gzip           gzip     1.3.12
ver_check M4             m4       1.4.10
ver_check Make           make     4.0
ver_check Patch          patch    2.5.4
ver_check Perl           perl     5.8.8
ver_check Python         python3  3.4
ver_check Sed            sed      4.1.5
ver_check Tar            tar      1.22
ver_check Texinfo        texi2any 5.0
ver_check Xz             xz       5.0.0
ver_kernel &min-kernel;

if mount | grep -q 'devpts on /dev/pts' &amp;&amp; [ -e /dev/ptmx ]
then echo "OK:    núcleo Linux suporta PTY do UNIX 98";
else echo "ERRO:  núcleo Linux NÃO suporta PTY do UNIX 98"; fi

alias_check() {
   if $1 --version 2>&amp;1 | grep -qi $2
   then printf "OK:    %-4s is $2\n" "$1";
   else printf "ERRO:  %-4s is NOT $2\n" "$1"; fi
}
echo "Aliases:"
alias_check awk GNU
alias_check yacc Bison
alias_check sh Bash

echo "Verificação do compilador:"
if printf "int main(){}" | g++ -x c++ -
then echo "OK:    g++ funciona";
else echo "ERRO:  g++ NÃO funciona"; fi
rm -f a.out

if [ "$(nproc)" = "" ]; then
   echo "ERRO: nproc não está disponível ou ele produz saída gerada vazia"
else
   echo "OK:   nproc informa que $(nproc) núcleos lógicos estão disponíveis"
fi</literal>
EOF

bash version-check.sh</userinput></screen>

 </sect2>
</sect1>
