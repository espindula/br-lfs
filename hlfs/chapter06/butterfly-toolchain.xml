<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-butterfly-toolchain" role="wrap">
  <?dbhtml filename="butterfly-toolchain.html"?>

  <title>L'ensemble d'outils papillon</title>

  <indexterm zone="ch-system-butterfly-toolchain">
    <primary sortas="a-Binutils">Binutils</primary>
  </indexterm>

  <indexterm zone="ch-system-butterfly-toolchain">
    <primary sortas="a-GCC">GCC</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Le paquet GCC contient le <foreignphrase>GNU compiler 
		collection</foreignphrase>, qui inclut les compilateurs C et C++. Le 
    paquet Binutils contient un éditeur de liens, un assembleur et d'autres
    outils pour la gestion des fichiers objet.</para>

    <para>Notes utilisateur&nbsp;: <ulink url="&hlfs-wiki;/toolchain"/></para>

  </sect2>

  <sect2 role="installation">
    <title>Installation de GCC</title>

    <para>Ce paquet est connu pour avoir des problèmes quant ses drapeaux
    d'optimisation par défaut (incluant les options
		<parameter>-march</parameter> et <parameter>-mtune</parameter>) sont
		modifiées. Si une variable d'environnement remplace les optimisations
    par défaut, comme <envar>CFLAGS</envar> et <envar>CXXFLAGS</envar>, 
		désinitialisez-les lors de la compilation de GCC.</para>

    <para>Déballez les sources des paquets binutils-&binutils-version;, 
		gcc-core-&gcc-version;, gcc-g++-&gcc-version;, et
		gcc-testsuite-&gcc-version; mais ne changez pas de répertoire. Puis, 
    combinez les deux paquets en un même répertoire avec les commandes  
    suivantes&nbsp;:</para>

<screen><userinput>mv -v gcc-&gcc-version;/ butterfly-toolchain
mv -v binutils-&binutils-version; butterfly-toolchain/
cd butterfly-toolchain/
ln -vs binutils-&binutils-version;/{bfd,binutils,gas,gprof,ld,opcodes} .</userinput></screen>

    <para condition="uclibc">La commande suivante ajuste l'emplacement de 
		l'éditeur de liens dynamique par défaut pour qu'il pointe vers celui
		d'uClibc&nbsp;:</para>

<screen condition="uclibc"><userinput>sed 's@ld-linux.so.2@ld-uClibc.so.0@' \
    -i.orig gcc/config/i386/linux.h</userinput></screen>

    <para>Ce correctif est issu de la branche CVS 
		<quote>binutils-2_17-branch</quote>. Cette branche n'est ouverte que pour la
    réparation de bogues et n'ajoute aucune nouvelle fonctionalité. Appliquez
    ce correctif avec la commande suivante&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&binutils-branch_update-patch;</userinput></screen>

    <para>Ceci vient du CVS de Binutils&nbsp;:
    <ulink url="http://sourceware.org/ml/binutils-cvs/2006-10/msg00044.html"/>
    et ajoute le support pour la fonction mkstemp(3) de la bibliothèque C pour
		la création de fichiers temporaires plus sûrs. Appliquez ce correctif
    avec la commande suivante&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&binutils-hardened_tmp-patch;</userinput></screen>

    <para>Corrigez pour ajouter <option>-z lazy</option>&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&binutils-lazy-patch;</userinput></screen>

    <para>Le correctif <option>-z lazy</option> ajoute une nouvelle option aux
		pages de manuel et d'info pour <command>ld</command>. Binutils ne
		régénèra pas ces fichiers par défaut, donc nous les supprimons pour 
    obliger Binutils à les recompiler avec la nouvelle option&nbsp;:</para>

<screen><userinput>rm -v ld/ld.{1,info}</userinput></screen>

    <para>Ce correctif synthétise des différences entre divers CVS de Binutils et
    corrige des avertissements causés par <parameter>-D_FORTIFY_SOURCE</parameter>&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&binutils-fortify_warnings-patch;</userinput></screen>

    <para>Le correctif suivant vient du CVS de Binutils&nbsp;:
    <ulink url="http://sourceware.org/ml/binutils-cvs/2007-04/msg00021.html"/>
    et corrige <parameter>--warn-shared-textrel --fatal-warnings</parameter> 
    afin que l'avertissement ne soit pas fatal&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&binutils-PR4304-patch;</userinput></screen>

    <para>Le script <filename>configure</filename> dans cette version de
		Binutils ne gère pas les numéros de version à deux chiffres de Texinfo. Le 
		correctif suivant est issu du CVS de binutils&nbsp;:
    <ulink url="http://sourceware.org/cgi-bin/cvsweb.cgi/src/configure.diff?r1=1.268&amp;r2=1.268.2.1&amp;cvsroot=src"/>.
    Appliquez le correctif avec la commande suivante&nbsp;:</para>

<screen><userinput>cd binutils-&binutils-version;/
patch -Np1 -i ../../&binutils-texinfo_fix-patch;
cd ../</userinput></screen>

    <para role="pax">Corrigez Binutils pour PT_PAX_FLAGS&nbsp;:</para>

<screen role="pax"><userinput>cd binutils-&binutils-version;/
patch -Np1 -i ../../&binutils-pt_pax-patch;
cd ..</userinput></screen>

    <para>Le correctif suivant est issu du CVS de GCC&nbsp;:
    <ulink url="http://gcc.gnu.org/viewcvs?view=rev&amp;revision=113179"/> et
    corrige un bogue lorsque <filename class="libraryfile">libmudflap</filename>
		est lié à un programme multithreadé. Le rapport de bogue est ici&nbsp;:
    <ulink url="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=26864"/>. Appliquez
    ce correctif avec la commande suivante&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&gcc-PR26864-patch;</userinput></screen>

    <para>Cette version de GCC a le même bogue Texinfo que Binutils et a été 
    corrigé dans le CVS de GCC&nbsp;:
		<ulink url="http://gcc.gnu.org/viewcvs/trunk/configure?r1=128495&amp;r2=128497&amp;diff_format=h"/>.
    Appliquez ce correctif avec la commande suivante&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&gcc-texinfo_fix-patch;</userinput></screen>

    <para condition="glibc">Appliquez le correctif DWARF3&nbsp;:</para>

<screen condition="glibc"><userinput>patch -Np1 -i ../&gcc-DW_CFA_val-patch;</userinput></screen>

    <para>Appliquez le correctif <parameter>-Wno-overlength-strings</parameter>&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&gcc-Wno_overlength_strings-patch;</userinput></screen>

    <para>Ajoutez le correctif pour <function>__strncat_chk</function>, le
		contrôle pendant la compilation&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&gcc-strncat_chk-patch;</userinput></screen>

    <para>Appliquez le correctif specs de GCC
		<parameter>-D_FORTIFY_SOURCE=2</parameter>&nbsp;:</para>

<screen><userinput>patch -Np1 -i ../&gcc-fortify_source-patch;</userinput></screen>

    <para role="ssp">Appliquez le correctif specs de GCC
		<parameter>-fstack-protector-all</parameter>&nbsp;:</para>

<screen role="ssp"><userinput>patch -Np1 -i ../&gcc-fstack_protector-patch;</userinput></screen>

    <para role="aslr">Appliquez le correctif <parameter>-fPIE</parameter>&nbsp;:</para>

<screen role="aslr"><userinput>patch -Np1 -i ../&gcc-fpie-patch;</userinput></screen>

    <para condition="uclibc">Appliquez ces correctifs pour le support uClibc.
		Le correctif de locale est nécessaire même si vous avez désactivé le support
		de locale&nbsp;:</para>

<screen condition="uclibc"><userinput>cd binutils-&binutils-version;/
patch -Np1 -i ../../&binutils-uClibc_conf-patch;
cd ../
patch -Np1 -i ../&gcc-uClibc_conf-patch;
patch -Np1 -i ../&gcc-uClibc_locale-patch;</userinput></screen>

    <para condition="uclibc">Les commandes suivantes contournent un problème
    de GCC qui lie 
		<filename class="libraryfile">libssp_nonshared.a</filename> plusieurs
		fois et provoque de multiples définitions de symboles&nbsp;:</para>

<screen condition="uclibc"><userinput>echo 'postdeps="${postdeps//-lssp_nonshared}"' >> ltcf-cxx.sh
echo 'postdeps="${postdeps//-lssp}"' >> ltcf-cxx.sh
sed 's@\$(LIBS)@&amp; -lssp_nonshared -lssp@' -i.orig \
    ./libstdc++-v3/src/Makefile.in</userinput></screen>

    <para condition="uclibc">Utilisez cette commande pour lier en dur
    <parameter>LIBS="-lintl"</parameter>&nbsp;:</para>

<screen condition="uclibc"><userinput>sed 's/%{shared:-lc}/%{!nointl: -lintl} &amp;/' \
    -i gcc/config/linux.h</userinput></screen>

    <para>Corrigez RPATH_ENVVAR pour bfd et opcode&nbsp;:</para>

<screen><userinput>sed -e 's@/.:$$r@/.libs:$$r@' -e 's@/.:@/.libs:@' -i.orig Makefile.in</userinput></screen>

    <para>La fonction de débogage mudflap incluse avec GCC permettra normalement
		à un programme de continuer à s'exécuter lors de violations pour donner
		aux utilisateurs plus d'informations. La commande suivante va modifier ce
		comportement par défaut pour que <filename class="libraryfile">libmudflap</filename>
    envoie un signal ABRT pour interrompre le programme. Cela peut être
		réinitialisé avec la variable d'environnement
		<envar>MUDFLAP_OPTIONS</envar>. Merci de garder à l'esprit que mudflap est
    une fonctionnalité de débogage et n'a pas été prévue pour être une option de
    sécurité et est implémentée de la sorte ici car c'est mieux que de ne pas
    l'utiliser du tout. Cette modification peut être évitée par un 
		paramétrage de la variable d'environnement <envar>LD_PRELOAD</envar> de
    l'utilisateur pour charger une autre bibliothèque
    <filename class="libraryfile">libmudflap</filename>&nbsp;:</para>

<screen><userinput>sed 's/violation_mode = viol_nop/violation_mode = viol_abort/' \
    -i.orig libmudflap/mf-runtime.c</userinput></screen>


    <para>Créez à nouveau un répertoire de compilation séparé&nbsp;:</para>

<screen><userinput>mkdir -v ../butterfly-build
cd ../butterfly-build</userinput></screen>

    <para>Préparez la compilation&nbsp;:</para>

<screen condition="glibc"><userinput>../butterfly-toolchain/configure --prefix=/usr \
    --libexecdir=/usr/lib --enable-shared \
    --enable-threads=posix --enable-__cxa_atexit \
    --enable-clocale=gnu --enable-languages=c,c++ \
    --enable-checking --disable-werror</userinput></screen>

<screen condition="uclibc"><userinput>../butterfly-toolchain/configure --prefix=/usr \
    --libexecdir=/usr/lib --enable-shared \
    --enable-threads --enable-__cxa_atexit \
    --enable-clocale --enable-languages=c,c++ \
    --enable-checking --disable-werror</userinput></screen>

    <para>Compilez le paquet&nbsp;:</para>

<screen><userinput>make tooldir=/usr</userinput></screen>

    <variablelist>
      <title>Voici la signification du paramètre de make&nbsp;:</title>

      <varlistentry>
        <term><parameter>tooldir=/usr</parameter></term>
        <listitem>
          <para>Normalement, le tooldir (le répertoire où les exécutables se    
          situeront au final) est initialisé à
					<filename class="directory">$(exec_prefix)/$(target_alias)</filename>.
          Par exemple, les machines i686 étendraient cela à
					<filename class="directory">/usr/i686-pc-linux-gnu</filename>. Ceci
					étant un système personnalisé, ce répertoire spécifique à la cible 
          dans <filename class="directory">/usr</filename> n'est pas requis.
					<filename class="directory">$(exec_prefix)/$(target_alias)</filename>
					serait utilisé si le système était utilisé pour une compilation 
					croisée (par exemple, compilation d'un paquet sur une machine Intel
          qui génère du code qui peut être exécuté sur des machines PowerPC),</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Pour tester les résultats&nbsp;:</para>

<screen><userinput>make -k check</userinput></screen>

    <para>Il y a un test SSP dans
    <filename class="directory">gcc.misc-tests/</filename>. La suite de test
		va être très mauvaise. SSP et PIC doivent être désactivés dans
		CFLAGS_FOR_TARGET et -L/usr/lib/static doit probablement être ajouté afin
		que les bibliothèques statiques puissent être utilisées.</para>

    <para>Installez le paquet&nbsp;:</para>

<screen><userinput>make tooldir=/usr install</userinput></screen>

    <para condition="uclibc">Refaites les changements pour les en-têtes 
		Libssp pour le système final. Si vous réinstallez cet ensemble d'outils, 
		ne réitérez pas cette commande&nbsp;:</para>

<screen condition="uclibc"><userinput>mv -v /usr/include/{stdio,stdio-uclibc}.h
mv -v /usr/include/{string,string-uclibc}.h
mv -v /usr/include/{unistd,unistd-uclibc}.h

sed -e 's/.*include_next.*/#include &lt;stdio-uclibc.h&gt;/' -e 's@ssp.h@ssp/ssp.h@' \
    `dirname $(gcc -print-libgcc-file-name)`/include/ssp/stdio.h \
    &gt; /usr/include/stdio.h

sed -e 's/.*include_next.*/#include &lt;string-uclibc.h&gt;/' -e 's@ssp.h@ssp/ssp.h@' \
    `dirname $(gcc -print-libgcc-file-name)`/include/ssp/string.h \
    &gt; /usr/include/string.h

sed -e 's/.*include_next.*/#include &lt;unistd-uclibc.h&gt;/' -e 's@ssp.h@ssp/ssp.h@' \
    `dirname $(gcc -print-libgcc-file-name)`/include/ssp/unistd.h \
    &gt; /usr/include/unistd.h</userinput></screen>

    <para>Si vous prévoyez de lier les paquets suid à
    <filename class="libraryfile">libmudflap</filename> vous devez déplacer
		les bibliothèques mudflap vers <filename class="directory">/lib</filename>
		avec la commande suivante&nbsp;:</para>

<screen><userinput>mv -v /usr/lib/libmudflap{,th}.so* /lib
ln -vsf ../../lib/libmudflap.so.0 /usr/lib/libmudflap.so
ln -vsf ../../lib/libmudflapth.so.0 /usr/lib/libmudflapth.so</userinput></screen>

    <para>Déplacez les bibliothèques statiques installées par GCC&nbsp;:</para>

<screen condition="glibc"><userinput>mv -v /usr/lib/{libsupc++,libstdc++}.a /usr/lib/static/
mv -v /usr/lib/{libbfd,libiberty,libmudflap,libmudflapth}.a /usr/lib/static
mv -v /usr/lib/{libopcodes,libssp,libssp_nonshared}.a /usr/lib/static
mv -v /usr/lib/gcc/$(gcc -dumpmachine)/&gcc-version;/libgcov.a /usr/lib/static/</userinput></screen>

<screen condition="uclibc"><userinput>mv -v /usr/lib/{libsupc++,libstdc++}.a /usr/lib/static/
mv -v /usr/lib/{libbfd,libiberty,libmudflap,libmudflapth}.a /usr/lib/static
mv -v /usr/lib/{libopcodes,libssp,libssp_nonshared}.a /usr/lib/static
mv -v /usr/lib/gcc/$(gcc -dumpmachine)/&gcc-version;/libgcov.a /usr/lib/static/
mv -v /usr/lib/libstdc++_pic.a /usr/lib/static/</userinput></screen>

    <para>Déplacez <filename class="libraryfile">libc.a</filename> et
    <filename class="libraryfile">libdl.a</filename> du paquet de la 
		bibliothèque C&nbsp;:</para>

<screen><userinput>mv -v /usr/lib/{libc,libdl}.a /usr/lib/static</userinput></screen>

    <para>Certains paquets s'attendent à ce que le préprocesseur C soit installé
		dans le répertoire <filename class="directory">/lib</filename>. Pour
    supporter ces paquets, créez ce lien symbolique&nbsp;:</para>

<screen><userinput>ln -vs ../usr/bin/cpp /lib</userinput></screen>

    <para>Un grand nombre de paquets utilisent le nom <command>cc</command> pour
		appeler le compilateur. Pour satisfaire ces paquets, créez un lien 
		symbolique&nbsp;:</para>

<screen><userinput>ln -vs gcc /usr/bin/cc</userinput></screen>

    <para>Installez le fichier d'en-tête
		<filename class="headerfile">libiberty</filename> requis par certains
    paquets&nbsp;:</para>

<screen><userinput>install -v -m0644 ../butterfly-toolchain/include/libiberty.h \
    /usr/include</userinput></screen>

    <important>
      <?dbfo keep-together="auto"?>
      <para condition="glibc">Avec Glibc le test _FORTIFY_SOURCE gérera les   
      débordements de mémoire avant SSP.</para>

      <para condition="uclibc">Avec uClibc, si les fonctions SSP et
			_FORTIFY_SOURCE viennent de la bibliothèque
			<filename class="libraryfile">libssp</filename>, SSP gérera les 
			débordements de mémoire avant le contrôle _FORTIFY_SOURCE.</para>

      <para>Tous ces programmes de test sont issus du projet NetBSD.</para>

      <para>S'il y a une <quote>Erreur de segmentation</quote> quelque part,  
      quelque chose ne va pas.</para>

      <para>Ce premier programme mettra en défaut le contrôle _FORTIFY_SOURCE mais
			devrait être ratrapé par SSP. Ce programme accepte un certain nombre 
			d'arguments en ligne de commande et affiche de nombreux 0 jusqu'au
      débordement de mémoire. Le nombre final nécessaire semble être différent 
      entre les versions de libc...&nbsp;:</para>

<screen><userinput>cat &gt; ssp-overflow.c &lt;&lt; "EOF"
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
static void raw(char *, size_t);
static void
raw(char *b, size_t len) {
        b[len] = '\0';
}
int
main(int argc, char *argv[])
{
        char b[10];
        size_t len = atoi(argv[1]);
        (void)strncpy(b, "0000000000", sizeof(b));
        raw(b, len);
        (void)printf("%s\n", b);
        return 0;
}
EOF

gcc -o ssp-overflow ssp-overflow.c
./ssp-overflow 9
./ssp-overflow 12</userinput></screen>

      <para>Ceci devrait afficher&nbsp;:</para>

<screen><computeroutput>0000000000
*** stack smashing detected ***: ./ssp-overflow terminated
Aborted</computeroutput></screen>

      <para>Vérifiez aussi que ce programme est compilé avec d'autres options 
			d'endurcissement&nbsp;:</para>

<screen><userinput>readelf -ld ssp-overflow | \
    grep -E 'Shared object|TEXTREL|PAX|BIND_NOW|GNU'</userinput></screen>

      <para>Ceci ne devrait pas afficher <quote>TEXTREL</quote>. Ceci ne devrait
      afficher que&nbsp;:</para>

<screen><computeroutput>Elf file type is DYN (Shared object file)
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4
  GNU_RELRO      0x000ee0 0x00001ee0 0x00001ee0 0x00120 0x00120 R   0x1
  PAX_FLAGS      0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4
 0x00000018 (BIND_NOW)</computeroutput></screen>

      <para>Ceci dit que nous avons un objet partagé sans déplacement de texte 
			ce qui est idéal pour tirer le meilleur parti de PaX. Puis, nous 
			avons le marcage d'en-tête GNU Stack requis par PaX. L'en-tête GNU
			Relro est issue de l'option <option>-z relro</option> de l'éditeur de 
			liens. L'en-tête PaX est utilisée par PaX et vient du correctif PaX pour
			Binutils. La section Bind Now est issue de l'option
			<option>-z now</option> de l'éditeur de liens.</para>

      <para>Le programme suivant va tester le contrôle _FORTIFY_SOURCE. En même
      temps nous pouvons tester les options négatives du compilateur pour 
			vérifier qu'elles fonctionnent aussi. C'est un exemple où le contrôle
			statique du code ne détectera pas de problème. Le seul problème signalé par
      les programmes d'analyse statique du code comme
			<ulink url="http://www.splint.org/">Splint</ulink> ou l'option
      <parameter>-Wextra</parameter> est que le paramètre 
      <function>int argc</function> n'est pas utilisé&nbsp;:</para>

<screen><userinput>cat &gt; fgets-overflow.c &lt;&lt; "EOF"
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int
main(int argc, char *argv[])
{
	char b[10];
	int len = atoi(argv[1]);
	if ((fgets(b, len, stdin)) != b)
		return 1;
	(void)printf("%s\n", b);
	return 0;
}
EOF

gcc -o fgets-overflow fgets-overflow.c -fno-stack-protector \
    -nopie -fno-pie -nonow -norelro
echo abcdefghijklm | ./fgets-overflow 10
echo abcdefghijklm | ./fgets-overflow 14</userinput></screen>

      <para>Ceci devrait afficher&nbsp;:</para>

<screen><computeroutput>abcdefghi
*** buffer overflow detected ***: ./fgets-overflow terminated
Aborted</computeroutput></screen>

      <para condition="glibc">Glibc peut afficher aussi une trace.</para>

      <para>Et vérifiez que les options négatives fonctionnaient, et c'est un
			objet normal lié dynamiquement&nbsp;:</para>

<screen><userinput>readelf -ld ./fgets-overflow | \
    grep -E 'Executable file|PAX|BIND_NOW|GNU'</userinput></screen>

      <para>Ceci devrait afficher&nbsp;:</para>

<screen><computeroutput>Elf file type is EXEC (Executable file)
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4
  PAX_FLAGS      0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4</computeroutput></screen>

      <para>_FORTIFY_SOURCE et SSP interrompront ce programme si 
			l'argument du programme (14 dans l'exemple ci-dessus) est supérieur à
  	  10.</para>

      <para>Le programme suivant est un simple débordement de mémoire via
			strcpy(3), c'est un exemple où l'analyse statique du code ratrapera le
      problème. En même temps nous pouvons vérifier que l'édition de liens
			dynamique fonctionne&nbsp;:</para>

<screen><userinput>cat &gt; strcpy-overflow.c &lt;&lt; "EOF"
#include &lt;string.h&gt;
int main()
{
 char buf[2];
 strcpy(buf,"12345");
 return 0;
}
EOF
gcc -o strcpy-overflow strcpy-overflow.c -static -L/usr/lib/static</userinput></screen>

      <para>Ceci devrait afficher&nbsp;:</para>

<screen><computeroutput>strcpy-overflow.c: In function 'main':
strcpy-overflow.c:5: warning: call to __builtin___strcpy_chk will
    always overflow destination buffer</computeroutput></screen>

      <para>Ici la fonctionnalité _FORTIFY_SOURCE avertit que le compilateur
			sait en avance que strcpy(3) va déborder. Essayez de lancer le
			programme&nbsp;:</para>

<screen><userinput>./strcpy-overflow</userinput></screen>

      <para>Ceci devrait afficher&nbsp;:</para>

<screen><computeroutput>*** buffer overflow detected ***: ./strcpy-overflow terminated
Aborted</computeroutput></screen>

      <para>Dans ce programme fortify-test la fonction strcpy() a été remplacée
			par la fonction __strcpy_chk() au moment de la compilation, lorsque
			l'avertissement est généré. La fonction __strcpy_chk() interrompt alors
			le programme au moment de l'exécution quand un débordement de mémoire a
      été détecté.</para>

      <para>Vérifiez aussi que l'édition de liens statique fonctionne&nbsp;:</para>

<screen><userinput>readelf -d ./strcpy-overflow</userinput></screen>

      <para>Ceci devrait afficher&nbsp;:</para>

<screen><computeroutput>There is no dynamic section in this file.</computeroutput></screen>

      <para role="ssp">Ce programme particulier peut être aussi utilisé pour
			tester le protecteur Stack Smashing. Recompilez ce programme en
			désactivant les optimisations en activant FORTIFY_SOURCE ce qui 
			remplacera les specs de GCC, simplement pour montrer que FORTIFY_SOURCE
			ne fonctionne qu'avec les optimisations&nbsp;:</para>

<screen role="ssp"><userinput>gcc -o strcpy-overflow strcpy-overflow.c -O0</userinput></screen>

      <para role="ssp">Puis lancez-le&nbsp;:</para>

<screen role="ssp"><userinput>./strcpy-overflow</userinput></screen>

      <para role="ssp">Ceci devrait retourner&nbsp;:</para>

<screen role="ssp"><computeroutput>*** stack smashing detected ***: ./ssp-test terminated
Aborted</computeroutput></screen>

      <para>Si votre libc inclut <function>arc4random()</function>, le programme 
      suivant la testera&nbsp;:</para>

<screen><userinput>cat &gt; arc4rnd-tst.c &lt;&lt; "EOF"
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void)
{
 int random_number;
 random_number = arc4random() % 65536;
 printf("%d\n", random_number);
 return 0;
}
EOF
gcc -o arc4rnd-tst arc4rnd-tst.c -Wall
./arc4rnd-tst &amp;&amp; ./arc4rnd-tst &amp;&amp; ./arc4rnd-tst</userinput></screen>

      <para>Cela devrait afficher trois lignes de nombre complètement 
			différents. FIXME: Testez d'où vient l'entropie. Peut-être y'a-t-il un
			programme qui va lancer <function>arc4random()</function> encore et
			encore jusqu'à ce que des nombres se répètent puis signaler les
      moyennes.</para>

      <para condition="glibc">Le correctif arc4_prng modifie aussi
      <function>strfry</function>. Le programme suivant va tester si cela
			fonctionne&nbsp;:</para>

<screen condition="glibc"><userinput>cat &gt; strfry-tst.c &lt;&lt; "EOF"
#define _GNU_SOURCE
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int main(int argc, char **argv) {
    char *string;
    string = malloc(sizeof(char) * 26);
    (void) strncpy(string, "abcdefghijklmnopqrstuvwxyz", sizeof(char) * 26);
    (void) strfry(string);
    (void) printf("%s\n", string);
    free(string);
    return 0;
}
EOF
gcc -o strfry-tst strfry-tst.c -Wall
./strfry-tst &amp;&amp; ./strfry-tst &amp;&amp; ./strfry-tst</userinput></screen>

     <para condition="glibc">Ceci devrait afficher trois lignes de longueur 
		 égale dans une séquence aléatoire.</para>
    
     <para>Si votre libc a <function>issetugid()</function>, le programme 
     suivant va la tester&nbsp;:</para>

<screen><userinput>cat &gt; issetugid-tst.c &lt;&lt; "EOF"
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
int main(void)
{
 int GETUID=getuid(), GETGID=getgid();
 int GETEUID=geteuid(), GETEGID=getegid();
 int ISSETUGID=issetugid();
 printf("Your real user ID is %d\n", GETUID);
 printf("Your real group ID is %d\n", GETGID);
 printf("Your effective user ID is %d\n", GETEUID);
 printf("Your effective group ID is %d\n", GETEGID);
 if (ISSETUGID == 1)
  {
   printf("issetugid() says this program is SUID\n");
  }
  else
  {
   printf("issetugid() says this program is not SUID\n");
  }
 return 0;
}
EOF
gcc -o issetugid-tst issetugid-tst.c -Wall
chmod +s ./issetugid-tst
echo "dummy:x:101:99:Dummy User:/nonexistent:/bin/sh" &gt;&gt; /etc/passwd
su-tools dummy -c $(pwd)/issetugid-tst
chmod -s ./issetugid-tst
su-tools dummy -c $(pwd)/issetugid-tst
sed '/dummy/d' -i /etc/passwd</userinput></screen>

      <para>Ceci devrait afficher&nbsp;:</para>

<screen><computeroutput>Your real user ID is 101
Your real group ID is 99
Your effective user ID is 0
Your effective group ID is 0
issetugid() says this program is SUID
...
Your real user ID is 101
Your real group ID is 99
Your effective user ID is 101
Your effective group ID is 99
issetugid() says this program is not SUID</computeroutput></screen>

      <para>Merci de noter que ce test <function>issetugid()</function> ne
			fonctionnera pas correctement sur une partition montée en
			<quote>nosuid</quote>.</para>
    </important>

<!--
<important><para>Now you must return to <xref linkend="testing-gcc"/> to repeat the
sanity checks, but removing <parameter>-e ': /tools'</parameter> from the third
test.</para></important>
-->

  </sect2>


  <sect2 id="contents-butterfly-binutils" role="content">
    <title>Contenu de Binutils</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>

      <seglistitem>
        <seg>addr2line, ar, as, c++filt, gprof, ld, nm, objcopy, objdump,
        ranlib, readelf, size, strings, and strip</seg>
        <seg>libiberty.a, libbfd.{a,so} et libopcodes.{a,so}</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="addr2line">
        <term><command>addr2line</command></term>
        <listitem>
          <para>Traduit les adresses des programmes en noms de fichier et numéros
					de ligne&nbsp;; suivant une adresse et le nom d'un exécutable, il 
					utilise les informations de débogage disponibles dans l'exécutable 
					pour déterminer le fichier source et le numéro de ligne associé à 
					cette adresse</para>
          <indexterm zone="ch-system-butterfly-toolchain addr2line">
            <primary sortas="b-addr2line">addr2line</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ar">
        <term><command>ar</command></term>
        <listitem>
          <para>Crée, modifie et extrait à partir d'archives</para>
          <indexterm zone="ch-system-butterfly-toolchain ar">
            <primary sortas="b-ar">ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="as">
        <term><command>as</command></term>
        <listitem>
          <para>Un assembleur qui assemble la sortie de <command>gcc</command>
					en un fichier objet</para>
          <indexterm zone="ch-system-butterfly-toolchain as">
            <primary sortas="b-as">as</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="c-filt">
        <term><command>c++filt</command></term>
        <listitem>
          <para>Utilisé par l'éditeur de liens pour récupérer les symboles C++
					et Java, et pour empêcher les fonctions surchargées d'arrêter
					brutalement le programme</para>
          <indexterm zone="ch-system-butterfly-toolchain c-filt">
            <primary sortas="b-c++filt">c++filt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gprof">
        <term><command>gprof</command></term>
        <listitem>
          <para>Affiche les données de profilage du graphe des appels</para>
          <indexterm zone="ch-system-butterfly-toolchain gprof">
            <primary sortas="b-gprof">gprof</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ld">
        <term><command>ld</command></term>
        <listitem>
          <para>Un éditeur de liens combinant un certain nombre d'objets et de 
					fichiers archives en un seul fichier, en déplaçant leur données et en
					regroupant les références de symboles</para>
          <indexterm zone="ch-system-butterfly-toolchain ld">
            <primary sortas="b-ld">ld</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nm">
        <term><command>nm</command></term>
        <listitem>
          <para>Liste les symboles disponibles dans un fichier objet</para>
          <indexterm zone="ch-system-butterfly-toolchain nm">
            <primary sortas="b-nm">nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="objcopy">
        <term><command>objcopy</command></term>
        <listitem>
          <para>Traduit un type de fichier objet en un autre</para>
          <indexterm zone="ch-system-butterfly-toolchain objcopy">
            <primary sortas="b-objcopy">objcopy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="objdump">
        <term><command>objdump</command></term>
        <listitem>
          <para>Affiche des informations sur le fichier objet donné, les options
					contrôlant les informations à afficher&nbsp;; l'information affichée 
					est surtout utile aux programmeurs qui travaillent sur les outils de 
					compilation</para>
          <indexterm zone="ch-system-butterfly-toolchain objdump">
            <primary sortas="b-objdump">objdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ranlib">
        <term><command>ranlib</command></term>
        <listitem>
          <para>Génère un index du contenu d'une  archive et le stocke dans 
					l'archive&nbsp;; l'index liste tous les symboles définis par les 
					membres de l'archive qui sont des fichiers objet déplaçables</para>
          <indexterm zone="ch-system-butterfly-toolchain ranlib">
            <primary sortas="b-ranlib">ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="readelf">
        <term><command>readelf</command></term>
        <listitem>
          <para>Affiche des informations sur les binaires du type ELF</para>
          <indexterm zone="ch-system-butterfly-toolchain readelf">
            <primary sortas="b-readelf">readelf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="size">
        <term><command>size</command></term>
        <listitem>
          <para>Liste les tailles des sections et la taille totale pour les 
					fichiers objets donnés</para>
          <indexterm zone="ch-system-butterfly-toolchain size">
            <primary sortas="b-size">size</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="strings">
        <term><command>strings</command></term>
        <listitem>
          <para>Affiche, pour chaque fichier donné, la séquence de caractères 
					affichables qui sont d'au moins la taille spécifiée (par défaut, 
					4)&nbsp;; pour les fichiers objets, il affiche, par défaut, seulement
					les chaînes des sections d'initialisation et de chargement alors que 
					pour les autres types de fichiers, il parcourt le fichier entier</para>
          <indexterm zone="ch-system-butterfly-toolchain strings">
            <primary sortas="b-strings">strings</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="strip">
        <term><command>strip</command></term>
        <listitem>
          <para>Supprime les symboles des fichiers objets</para>
          <indexterm zone="ch-system-butterfly-toolchain strip">
            <primary sortas="b-strip">strip</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libiberty">
        <term><filename class="libraryfile">libiberty</filename></term>
        <listitem>
          <para>Contient des routines utilisées par différents programmes GNU 
					comme <command>getopt</command>, <command>obstack</command>,
					<command>strerror</command>, <command>strtol</command>, et
					<command>strtoul</command></para>
          <indexterm zone="ch-system-butterfly-toolchain libiberty">
            <primary sortas="c-libiberty">libiberty</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libbfd">
        <term><filename class="libraryfile">libbfd</filename></term>
        <listitem>
          <para>Bibliothèque des descripteurs de fichiers binaires
					(<foreignphrase>Binary File Descriptor</foreignphrase>)</para>
          <indexterm zone="ch-system-butterfly-toolchain libbfd">
            <primary sortas="c-libbfd">libbfd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libopcodes">
        <term><filename class="libraryfile">libopcodes</filename></term>
        <listitem>
          <para>Une bibliothèque de gestion des opcodes&mdash;la <quote>version
					lisible</quote> des instructions du processeur&nbsp;; elle est utilisé
					construire des outils comme
					<command>objdump</command>.</para>
          <indexterm zone="ch-system-butterfly-toolchain libopcodes">
            <primary sortas="c-libopcodes">libopcodes</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="contents-butterfly-gcc" role="content">
    <title>Contenu de GCC</title>

    <segmentedlist>
      <segtitle>Programmes installés</segtitle>
      <segtitle>Bibliothèques installées</segtitle>

      <seglistitem>
        <seg>c++, cc (link to gcc), cpp, g++, gcc, gccbug et gcov</seg>
        <seg>libgcc.a, libgcc_eh.a, libgcc_s.so, libstdc++.{a,so} et
        libsupc++.a</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descriptions courtes</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="cc">
        <term><command>cc</command></term>
        <listitem>
          <para>Le compilateur C</para>
          <indexterm zone="ch-system-butterfly-toolchain cc">
            <primary sortas="b-cc">cc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cpp">
        <term><command>cpp</command></term>
        <listitem>
          <para>Le préprocesseur C&nbsp;; il est utilisé par le compilateur pour
					l'extension des instructions #include, #define et d'autres 
					instructions similaires dans les fichiers sources</para>
          <indexterm zone="ch-system-butterfly-toolchain cpp">
            <primary sortas="b-cpp">cpp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="c">
        <term><command>c++</command></term>
        <listitem>
          <para>Le compilateur C++</para>
          <indexterm zone="ch-system-butterfly-toolchain c">
            <primary sortas="b-c++">c++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="g">
        <term><command>g++</command></term>
        <listitem>
          <para>Le compilateur C++</para>
          <indexterm zone="ch-system-butterfly-toolchain g">
            <primary sortas="b-g++">g++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc">
        <term><command>gcc</command></term>
        <listitem>
          <para>Le compilateur C</para>
          <indexterm zone="ch-system-butterfly-toolchain gcc">
            <primary sortas="b-gcc">gcc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gccbug">
        <term><command>gccbug</command></term>
        <listitem>
          <para>Un script shell utilisé pour aider à la création de bons
					rapports de bogues</para>
          <indexterm zone="ch-system-butterfly-toolchain gccbug">
            <primary sortas="b-gccbug">gccbug</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcov">
        <term><command>gcov</command></term>
        <listitem>
          <para>Un outil de tests&nbsp;; il est utilisé pour analyser les 
					programmes et savoir où des optimisations seraient suivies du plus 
					d'effet</para>
          <indexterm zone="ch-system-butterfly-toolchain gcov">
            <primary sortas="b-gcov">gcov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgcc">
        <term><filename class="libraryfile">libgcc</filename></term>
        <listitem>
          <para>Contient un support en exécution pour <command>gcc</command></para>
          <indexterm zone="ch-system-butterfly-toolchain libgcc">
            <primary sortas="c-libgcc*">libgcc*</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstdc">
        <term><filename class="libraryfile">libstdc++</filename></term>
        <listitem>
          <para>La bibliothèque C++ standard</para>
          <indexterm zone="ch-system-butterfly-toolchain libstdc">
            <primary sortas="c-libstdc++">libstdc++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libsupc">
        <term><filename class="libraryfile">libsupc++</filename></term>
        <listitem>
          <para>Fournit des routines de support pour le langage de programmation
					C++</para>
          <indexterm zone="ch-system-butterfly-toolchain libsupc">
            <primary sortas="c-libsupc++">libsupc++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
