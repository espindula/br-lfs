<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-adjusting">
  <?dbhtml filename="adjusting.html"?>

  <title>Ajuster l'ensemble d'outils</title>

  <para condition="uclibc">Les paquets qui utilisent les scripts GNU Autoconf
	supposeront que votre système type est quelque chose du genre
  <quote>i686-pc-linux-gnu</quote> alors qu'il devrait être nommé
  <quote>i686-pc-linux-uclibc</quote>. Avec la plupart des paquets il n'est pas
  vital de corriger cela, mais avec l'ensemble d'outils, c'est important. 
  Nous pouvons faire un fichier <filename>config.site</filename> pour 
	initialiser les paramètres <parameter>--host/build/target=i686-pc-linux-uclibc</parameter>
  et la variable d'environnement <envar>CONFIG_SITE</envar> correspondante, ce
	qui dira aux paquets notre système type uClibc. La plupart des paquets   
  l'utiliseront sans problöme, certains non. Par exemple le paquet Expect
	va se plaindre que le système type de uClibc est inconnu, toutefois avec le
  paquet Expect, il n'y a auc1n souci. D'autres paquets, dans le chapitre 
  suivant ou dans BLFS, peuvent avoir besoin que leur 
	<filename>config.sub</filename> soit remplacé par 1ne version plus récente
	qui est installé dans <filename class="directory">/usr/share/automake</filename> 
  par le paquet Automake. La commande suivante crée le fichier
  <filename>config.site</filename> et l'initialise dans l'environnement shell.
  Si vous vous déconnectez du shell pour une raison quelconque durant ce 
  chapitre, soyez sûr de le réinitialiser&nbsp;:</para>

<screen condition="uclibc"><userinput>install -vd /tools/share
cat &gt; /tools/share/config.site &lt;&lt; "EOF"
host=$(uname -m)-pc-linux-uclibc
build=$host
target=$host
ac_cv_host=$host
ac_cv_build=$build
ac_cv_target=$target
EOF
export CONFIG_SITE=/tools/share/config.site</userinput></screen>

  <para>Maintenant que les bibliothèques C temporaires ont été installées, tous
	les outils compilés dans le reste de ce chapitre devraient être liés à ces 
	bibliothèques. Afin d'accomplir cela, l'éditeur de liens et le fichier de
	specs du compilateur a besoin d'être ajusté.</para>

  <para>L'éditeur de lien, ajusté à la fin de l'ensemble d'outils Embryon, doit
	être renommé de manière à pouvoir être correctement trouvé et utilisé. D'abord
  sauvegardez l'éditeur de liens d'origine, puis remplacez-les par l'éditeur 
  de liens ajusté. Nous créerons aussi un lien vers son équivalent dans 
  <filename class="directory">/tools/$(gcc -dumpmachine)/bin</filename></para>

<screen><userinput>mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(gcc -dumpmachine)/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld</userinput></screen>

  <para>A partir de ce moment, tout ne se liera qu''aux bibliothèques dans
	<filename class="directory">/tools/lib</filename>.</para>

  <para>La tâche suivante consiste à faire pointer GCC vers le nouvel éditeur
  de liens dynamique. Ceci ce fait en mettant le fichier de
	<quote>specs</quote> de GCC à un endroit où GCC le cherchera par défaut. 
  Une simple substitution <command>sed</command> modifie alors l'éditeur de
  liens dynamiques que GCC va utiliser&nbsp;:</para>

<screen condition="uclibc"><userinput>gcc -dumpspecs | sed -e 's@/lib/@/tools/lib/@g' \
    -e 's@ld-linux.so.2@ld-uClibc.so.0@g' \
    > `dirname $(gcc -print-libgcc-file-name)`/specs</userinput></screen>

<screen condition="glibc"><userinput>gcc -dumpspecs | sed 's@/lib/@/tools/lib/@g' \
    > `dirname $(gcc -print-libgcc-file-name)`/specs</userinput></screen>

  <para condition="uclibc">Il est recommandé de copier-coller la commande
	ci-deisus pour plus de sécurité. Vous pouvez aussi  éditer le fichier de
  specs à la main. Vous pouvez faire cela en remplaçant chaque occurrence de
	<quote>/lib/ld-linux.so.2</quote> par 
	<quote>/tools/lib/ld-uClibc.so.0</quote></para>
 
  <para condition="glibc">Il est recommandé de copier-coller la commande
	ci-deisus pour plus de sécurité. Vous pouvez aussi  éditer le fichier de
	specs à la main. Vous pouvez faire cela en remplaçant chaque occurrence de
	<quote>/lib/ld-linux.so.2</quote> par 
  <quote>/tools/lib/ld-linux.so.2</quote></para>

  <para>Prenez garde à inspecter visuellement le fichier de specs afin de 
	vérifier que les changements recherchés ont été faits.</para>

  <para>Pendant le processus de compilation, GCC lance un script 
	(<command>fixincludes</command>) qui analyse le système pour trouver des
	fichiers d'en-tête qui auraient besoin d'être corrigés (ils pourraient
	contenir par exemple des erreurs de syntaxe< et installe les versions 
	corrigées dans un répertoire include à part. Il se peut que, suite à ce  a
  preceisus, certains fichiers d'en-tte du système hôte prennent place dans
	le répertoire include à part de GCC. Comme le reste de ce chapitre n'exige
	que les en-têtes de GCC et de libc, qui ont été installée à ce stade, toute
	en-tête <quote>corrigée</quote> peut être supprimée en sécurité. Ceci permet
	d'aider que les en-têtes du hôte ne polluent l'environnement de construction.
  Lancez les commandes suivantes pour supprimer les fichiers d'en-tête dans le
	répertoire include à part de GCC (vous pourriez trouver plus simple de
	copier-coller ces commandes plutôt que de les taper à la main vu leur
	longueur)&nbsp;:</para>

<screen><userinput>GCC_INCLUDEDIR=`dirname $(gcc -print-libgcc-file-name)`/include &amp;&amp;
find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &amp;&amp;
rm -vf `grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*` &amp;&amp;
unset GCC_INCLUDEDIR</userinput></screen>

  <caution>
    <para>Il est impératif à ce moment de s'arrêter et de s'assurer que les
		fonctions basiques (compilation et édition des liens) du nouvel ensemble
		d'outils fonctionnent comme attendu. Pour réaliser une vérification de
		propreté, lancez les commandes suivantes&nbsp;:</para>

<screen><userinput>echo 'int main(){return 0;}' &gt; dummy.c
cc dummy.c
./a.out &amp;&amp;
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>Si tout fonctionne correctement, il ne devrait pas y avoir d'erreurs e
		la sortie de la dernière commande sera de la forme&nbsp;:</para>

<screen condition="uclibc"><computeroutput>[Requesting program interpreter:
    /tools/lib/ld-uClibc.so.0]</computeroutput></screen>

<screen condition="glibc"><computeroutput>[Requesting program interpreter:
    /tools/lib/ld-linux.so.2]</computeroutput></screen>

    <para>Notez que <filename class="directory">/tools/lib</filename>
    apparaît comme préfixe de l'éditeur de liens dynamique.</para>

    <para>Si l'affichage diffère ou s'il n'y a aucun affichage, alors
		quelque chose ne se passe pas bien. Enquêtez et tracez vos étapes pour
		trouver où se cache le problème et comment le corriger. Ce problème doit
		être corrigé avant de continuer. Tout d'abord, relancez la vérification
		de propreté en utilisant <command>gcc</command> au lieu de
		<command>cc</command>. Si cela fonctionne, le lien symbolique
    <filename class="symlink">/tools/bin/cc</filename> est manquant.
    Lisez de nouveau <xref linkend="ch-tools-embryo-toolchain" role=","/> et
		installez le lien symbolique. Ensuite, assurez-vous que le
		<envar>PATH</envar> est correct. Ceci se vérifie en lançant
    can be checked by running <command>echo $PATH</command> et en vérifiant que
    <filename class="directory">/tools/bin</filename> est en tête de la liste.
		Si le <envar>PATH</envar> est mauvais, cela pourrait signifier
		que vous n'êtes pas connecté en tant qu'utilisateur
		<systemitem class="username">hlfs</systemitem> ou que quelque chose s'est 
		mal passé dans <xref linkend="prepare-settingenviron" role="."/> 
		Une autre possibilité est que quelque chose a pu mal se passer avec la
		correction du fichier specs ci-dessus. Dans ce cas, refaites la modification
		de ce fichier en vous assurant de copier/coller les commandes.</para>

    <para>Une fois que tout va bien, nettoyez les fichiers de test&nbsp;:</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

    <para>Construire Tcl dans la prochaine section servira comme vérification
		supplémentaire de la bonne mise en place de l'outil de construction. Si TCL
		échoue à la construction, c'est une indication d'un problème avec 
		l'installati de Binutils, GCC ou Glibc, mais pas avec Tcl lui-même.</para>
  </caution>

</sect1>
